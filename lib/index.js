(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("store", [], factory);
	else if(typeof exports === 'object')
		exports["store"] = factory();
	else
		root["store"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Store = __webpack_require__(1);

var _Store2 = _interopRequireDefault(_Store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Store2.default;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _diff = __webpack_require__(2);

var _StoreID2 = __webpack_require__(3);

var _StoreID3 = _interopRequireDefault(_StoreID2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function isChanged(oldVal, newVal) {
	var comparisonValue = (0, _diff.compare)(oldVal, newVal);
	if (comparisonValue === 0) {
		return false;
	} else {
		return true;
	}
}

var Store = function (_StoreID) {
	_inherits(Store, _StoreID);

	function Store(value, displayName, objectName, listenersExecutedNotifier) {
		_classCallCheck(this, Store);

		var _this = _possibleConstructorReturn(this, (Store.__proto__ || Object.getPrototypeOf(Store)).call(this, objectName, listenersExecutedNotifier));

		_this.displayName = displayName;
		_this.value = value;
		return _this;
	}

	_createClass(Store, [{
		key: 'asJson',
		value: function asJson(value) {
			value = value === undefined ? this.getState() : value;
			var json = _get(Store.prototype.__proto__ || Object.getPrototypeOf(Store.prototype), 'asJson', this).call(this);
			json['classDefName'] = 'Store';
			json['displayName'] = this.displayName;
			json['value'] = value;
			return json;
		}
	}]);

	return Store;
}(_StoreID3.default);

exports.default = Store;


Store.prototype.getState = function () {
	return this.value;
};

Store.prototype.setState = function (newValue, callback) {
	var _this2 = this;

	var trigger = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;


	var _setState = function _setState() {
		var valueChange = isChanged(_this2.value, newValue);
		if (valueChange) {
			_this2.value = newValue;
			trigger && _this2.triggerListeners();
		}
	};
	//set state function is the one which triggers all the listeners attached to it
	// if listeners execution are going on, this will execute once they are done
	// else set state is executed immediately
	this.executeTriggerer(this, _setState, callback);
};

Store.prototype.getDiff = function (value) {
	var currentValue = this.getState();
	var comparisonValue = (0, _diff.compare)(value, currentValue);
	var prevState = this.asJson(value);

	var currentState = void 0;
	if (comparisonValue === 0) {
		// when no change returns the ID
		currentState = this.id;
	} else {
		// when there is change returns a JSOn object
		// object which as Class Name as `store`
		// value
		currentState = this.asJson(currentValue);
	}

	return {
		prev: prevState,
		current: currentState
	};
};

Store.prototype.applyDiff = function (diff, callback) {
	this.setState(diff.value, callback);
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("diff", [], factory);
	else if(typeof exports === 'object')
		exports["diff"] = factory();
	else
		root["diff"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _stringCompare = __webpack_require__(1);

var _stringCompare2 = _interopRequireDefault(_stringCompare);

var _numberCompare = __webpack_require__(2);

var _numberCompare2 = _interopRequireDefault(_numberCompare);

var _dateCompare = __webpack_require__(3);

var _dateCompare2 = _interopRequireDefault(_dateCompare);

var _arrayCompare = __webpack_require__(4);

var _arrayCompare2 = _interopRequireDefault(_arrayCompare);

var _objectCompare = __webpack_require__(5);

var _objectCompare2 = _interopRequireDefault(_objectCompare);

var _is = __webpack_require__(7);

var _is2 = _interopRequireDefault(_is);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function compare(oldObj, newObj) {
    if (oldObj === newObj) return 0;
    if (oldObj == null) return 1;
    if (newObj == null) return -1;

    var oldObjType = typeof oldObj === 'undefined' ? 'undefined' : _typeof(oldObj);
    var newObjType = typeof newObj === 'undefined' ? 'undefined' : _typeof(newObj);

    if (oldObjType !== newObjType) return (0, _stringCompare2.default)(oldObjType, newObjType);

    if (oldObjType === 'boolean') return (0, _numberCompare2.default)(Number(oldObj), Number(newObj));
    if (oldObjType === 'number') return (0, _numberCompare2.default)(oldObj, newObj);
    if (oldObjType === 'string') return (0, _stringCompare2.default)(oldObj, newObj);

    if (oldObjType !== 'object') return 1;

    if ((0, _is2.default)(oldObj, Date)) return (0, _dateCompare2.default)(oldObj, newObj);
    if ((0, _is2.default)(oldObj, Array)) return (0, _arrayCompare2.default)(oldObj, newObj, compare);
    if ((0, _is2.default)(oldObj, Object)) return (0, _objectCompare2.default)(oldObj, newObj, compare);

    return 0;
};

exports.default = compare;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare
function stringCompare(oldValue, newValue, isCaseSensitive) {
    isCaseSensitive = typeof isCaseSensitive !== 'undefined' ? isCaseSensitive : false;

    if (oldValue == null && newValue == null) return 0;
    if (oldValue == null) return 1;
    if (newValue == null) return -1;

    if (isCaseSensitive) {
        oldValue = String(oldValue).toLocaleLowerCase();
        newValue = String(newValue).toLocaleLowerCase();
    }

    var result = String(oldValue).localeCompare(newValue);
    if (result < -1) result = -1;else if (result > 1) result = 1;

    return result;
}

exports.default = stringCompare;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function numberCompare(oldValue, newValue) {

    if (isNaN(oldValue) && isNaN(newValue)) return 0;
    if (isNaN(oldValue)) return 1;
    if (isNaN(newValue)) return -1;

    if (oldValue < newValue) return -1;
    if (oldValue > newValue) return 1;
    return 0;
}

exports.default = numberCompare;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function dateCompare(oldValue, newValue) {

    if (oldValue === null && newValue === null) return 0;
    if (oldValue === null) return 1;
    if (newValue === null) return -1;

    var oldTime = oldValue.getTime();
    var newTime = newValue.getTime();
    if (oldTime < newTime) return -1;
    if (oldTime > newTime) return 1;

    if (isNaN(oldTime) && isNaN(newTime)) return 0;
    if (isNaN(oldTime)) return 1;
    if (isNaN(newTime)) return -1;

    return 0;
}

exports.default = dateCompare;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _compare = __webpack_require__(0);

var _compare2 = _interopRequireDefault(_compare);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arrayCompare(oldObj, newObj) {
    if (oldObj === newObj) return 0;
    if (oldObj == null) return 1;
    if (newObj == null) return -1;

    var comparisonValue = void 0;
    var oldObjLength = oldObj.length;
    var newObjLength = newObj.length;
    if (oldObjLength < newObjLength) return -1;
    if (oldObjLength > newObjLength) return 1;

    for (var i = 0; i < oldObjLength; i++) {
        //recursive comparison of array elements
        comparisonValue = (0, _compare2.default)(oldObj[i], newObj[i]);
        if (comparisonValue != 0) return comparisonValue;
    }
    return 0;
};

exports.default = arrayCompare;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _compare = __webpack_require__(0);

var _compare2 = _interopRequireDefault(_compare);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function objectCompare(oldObj, newObj) {
    if (oldObj === newObj) return 0;
    if (oldObj == null) return 1;
    if (newObj == null) return -1;

    var prop = void 0;
    for (prop in oldObj) {
        if (!newObj.hasOwnProperty(prop)) return -1;
    }

    var comparisonValue = void 0;
    for (prop in newObj) {
        if (!oldObj.hasOwnProperty(prop)) return 1;
        //recursive comparison of object property
        comparisonValue = (0, _compare2.default)(oldObj[prop], newObj[prop]);
        if (comparisonValue !== 0) return comparisonValue;
    }
    return 0;
};

exports.default = objectCompare;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.objectCompare = exports.arrayCompare = exports.dateCompare = exports.numberCompare = exports.stringCompare = exports.compare = exports.default = undefined;

var _stringCompare = __webpack_require__(1);

var _stringCompare2 = _interopRequireDefault(_stringCompare);

var _numberCompare = __webpack_require__(2);

var _numberCompare2 = _interopRequireDefault(_numberCompare);

var _dateCompare = __webpack_require__(3);

var _dateCompare2 = _interopRequireDefault(_dateCompare);

var _arrayCompare = __webpack_require__(4);

var _arrayCompare2 = _interopRequireDefault(_arrayCompare);

var _objectCompare = __webpack_require__(5);

var _objectCompare2 = _interopRequireDefault(_objectCompare);

var _compare = __webpack_require__(0);

var _compare2 = _interopRequireDefault(_compare);

var _diff = __webpack_require__(8);

var _diff2 = _interopRequireDefault(_diff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _diff2.default;
exports.compare = _compare2.default;
exports.stringCompare = _stringCompare2.default;
exports.numberCompare = _numberCompare2.default;
exports.dateCompare = _dateCompare2.default;
exports.arrayCompare = _arrayCompare2.default;
exports.objectCompare = _objectCompare2.default;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
function is(obj, Type) {
    if (obj == null || obj == null) return false;
    if (obj instanceof Type) return true;
    if (Type === Object) return true;

    if (typeof obj === 'string') return Type === String;
    if (typeof obj === 'number') return Type === Number;
    if (typeof obj === 'boolean') return Type === Boolean;
    if (Type === Array) return Array.isArray(obj);

    return false;
}

exports.default = is;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _compare = __webpack_require__(0);

var _compare2 = _interopRequireDefault(_compare);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function diff(oldValue, newValue) {
	var comparisonValue = (0, _compare2.default)(oldValue, newValue);

	if (comparisonValue === 0) {
		newValue = undefined;
	}

	return {
		prev: oldValue,
		current: newValue
	};
}

exports.default = diff;

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _functions = __webpack_require__(4);

var _functions2 = _interopRequireDefault(_functions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StoreID = function (_Functions) {
	_inherits(StoreID, _Functions);

	function StoreID(id, listenersExecutedNotifier) {
		_classCallCheck(this, StoreID);

		var _this = _possibleConstructorReturn(this, (StoreID.__proto__ || Object.getPrototypeOf(StoreID)).call(this, listenersExecutedNotifier));

		if (id === undefined || id === null) {
			_this.id = Math.random().toString(36).substr(2, 9);
		} else {
			_this.id = id;
		}
		_this.parentId = null;
		_this.linkedIds = null;

		_this.linkParentId = _this.linkParentId.bind(_this);
		_this.unLinkParentId = _this.unLinkParentId.bind(_this);
		_this.linkId = _this.linkId.bind(_this);
		_this.unLinkId = _this.unLinkId.bind(_this);
		_this.asJson = _this.asJson.bind(_this);
		return _this;
	}

	_createClass(StoreID, [{
		key: 'linkParentId',
		value: function linkParentId(id) {
			this.parentId = id;
		}
	}, {
		key: 'unLinkParentId',
		value: function unLinkParentId() {
			this.parentId = null;
		}
	}, {
		key: 'linkId',
		value: function linkId(id) {
			if (!this.linkedIds) {
				this.linkedIds = [];
			}

			if (this.linkedIds.indexOf(id) > -1) {
				this.linkedIds.push(id);
			}
		}
	}, {
		key: 'unLinkId',
		value: function unLinkId(id) {}
	}, {
		key: 'asJson',
		value: function asJson() {
			return {
				id: this.id,
				parentId: this.parentId,
				linkedIds: this.linkedIds
			};
		}
	}]);

	return StoreID;
}(_functions2.default);

exports.default = StoreID;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("functions", [], factory);
	else if(typeof exports === 'object')
		exports["functions"] = factory();
	else
		root["functions"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ticker", [], factory);
	else if(typeof exports === 'object')
		exports["ticker"] = factory();
	else
		root["ticker"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _TickEntry = __webpack_require__(1);

var _TickEntry2 = _interopRequireDefault(_TickEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _TickEntry2.default;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Manager = __webpack_require__(2);

var _Manager2 = _interopRequireDefault(_Manager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// toDo: support both callback and promise
var TickEntry =
/**
 * @param {object} context - The "this" argument for the listener function.
 * @param {function} listener.
 */
function TickEntry(context, listener) {
	var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

	_classCallCheck(this, TickEntry);

	this.context = context;
	this.listener = listener;
	this.callback = callback;
	this.priority = priority;
};

/*---- Public|Prototype Methods ---*/

exports.default = TickEntry;
TickEntry.prototype.dispose = function () {
	this.context = null;
	this.listener = null;
	this.callback = null;
	this.priority = null;
};

TickEntry.prototype.execute = function () {
	_Manager2.default.add(this);
};

TickEntry.prototype.getMaxPriority = function () {
	return _Manager2.default.getMaxPriority();
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var requestAnimationFrameId = NaN;
var priorityEntries = [null, null, null, null];

function onTick() {
	for (var index = 0; index < priorityEntries.length; index++) {
		var tickEntries = priorityEntries[index];
		if (tickEntries && tickEntries.length > 0) {
			executeTickEntries(tickEntries);
			//Clear them once executed
			priorityEntries[index] = null;
		}
	}
}

function executeTickEntries(tickEntries) {
	// important to use for-loop
	// tickEntries grows dynamically by one of its entry
	// for example: let say we have one entry, and executing that entry might adds another entry
	// with map function we cant execute dynamically growing entries.
	for (var i = 0; i < tickEntries.length; i++) {
		var tickEntry = tickEntries[i];
		tickEntry.listener.call(tickEntry.context || tickEntry.listener['this']);
		if (tickEntry.callback) {
			tickEntry.callback.call(tickEntry.callback['this']);
		}
	}
}

function isAddedAlready(entry, tickEntries) {
	// important to use for-loop
	// tickEntries grows dynamically by one of its entry
	// for example: let say we have one entry, and executing that entry might adds another entry
	// with map function we cant execute dynamically growing entries.
	for (var i = 0; i < tickEntries.length; i++) {
		var tickEntry = tickEntries[i];
		if (entry.context === tickEntry.context && entry.listener === tickEntry.listener) {
			return true;
		}
	}
	return false;
}

function requestAnimationFrameCallback() {
	onTick();
	requestAnimationFrameId = window.requestAnimationFrame(requestAnimationFrameCallback);
}

var TickManager = function TickManager() {
	_classCallCheck(this, TickManager);

	requestAnimationFrameId = 0; // for Windows Env
	this.start();
};

TickManager.prototype.add = function (tickEntry) {
	var priority = tickEntry.priority,
	    callback = tickEntry.callback;

	if (!priorityEntries[priority]) {
		priorityEntries[priority] = [];
		var _tickEntries = priorityEntries[priority];
		_tickEntries.push(tickEntry);
		return;
	}
	var tickEntries = priorityEntries[priority];
	if (isAddedAlready(tickEntry, tickEntries)) {
		callback && callback(true);
	} else {
		tickEntries.push(tickEntry);
	}
};

// Todo: Support for NodeJS 
TickManager.prototype.start = function () {
	if (window) {
		// will receives timestamp as argument
		//todo: Learn:  the purpose of timestamp
		requestAnimationFrameId = window.requestAnimationFrame(requestAnimationFrameCallback);
	}
};

TickManager.prototype.stop = function () {
	if (window) {
		window.cancelAnimationFrame(requestAnimationFrameId);
	}
};

TickManager.prototype.getMaxPriority = function () {
	return priorityEntries.length - 1;
};

var singletonInstance = new TickManager();

exports.default = singletonInstance;

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _functions = __webpack_require__(2);

var _functions2 = _interopRequireDefault(_functions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _functions2.default;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _entry = __webpack_require__(3);

var _entry2 = _interopRequireDefault(_entry);

var _ticker = __webpack_require__(0);

var _ticker2 = _interopRequireDefault(_ticker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Functions = function Functions(triggerDoneNotifier) {
	_classCallCheck(this, Functions);

	this.entries = [];
	this.frameEntries = [];
	this.executingLaterInNextTickCount = 0;
	this.triggerDoneNotifier = triggerDoneNotifier;
};

exports.default = Functions;


Functions.prototype.setTriggerDoneNotifier = function (triggerDoneNotifier) {
	this.triggerDoneNotifier = triggerDoneNotifier;
};

Functions.prototype.removeTriggerDoneNotifier = function () {
	this.triggerDoneNotifier = null;
};

// the function that responsible for initiating trigger
// if called using this function will make a synced effect of execution
Functions.prototype.executeTriggerer = function (context, func, triggererCallback) {
	var _this = this;

	var _executeTriggerer = function _executeTriggerer() {
		var triggeredAgain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

		var ticker = void 0;
		if (_this.executingLaterInNextTickCount === 0) {
			func.call(context);
			if (triggererCallback) {
				if (_this.executingLaterInNextTickCount === 0) {
					triggererCallback && triggererCallback(triggeredAgain);
				} else {
					ticker = new _ticker2.default(_this, triggererCallback, null, 3);
					ticker.execute();
				}
			}
		} else {
			ticker = new _ticker2.default(_this, _executeTriggerer, triggererCallback, 3);
			ticker.execute();
		}
	};
	_executeTriggerer();
};

Functions.prototype.addListener = function (context, func) {
	var executeLaterInNextTick = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	var _this2 = this;

	var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	var listenerCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

	var entry = void 0;
	if (executeLaterInNextTick) {

		var tickerCallback = function tickerCallback() {
			var triggeredAgain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

			_this2.executingLaterInNextTickCount = _this2.executingLaterInNextTickCount - 1;
			if (listenerCallback) {
				listenerCallback.call(listenerCallback['this'], triggeredAgain);
			}
			if (_this2.executingLaterInNextTickCount === 0) {
				_this2.triggerDoneNotifier && _this2.triggerDoneNotifier();
			}
		};
		var ticker = new _ticker2.default(context, func, tickerCallback, priority);
		entry = new _entry2.default(ticker, ticker.execute);
		this.frameEntries.push(entry);
	} else {
		entry = new _entry2.default(context, func);
		this.entries.push(entry);
	}
};

Functions.prototype.removeListener = function (context, func) {
	var _this3 = this;

	var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	var entry = void 0,
	    i = void 0;
	var frameEntries = this.frameEntries,
	    entries = this.entries;

	var _loop = function _loop() {
		var frameEntry = frameEntries[i];
		entry = frameEntry.context;
		if (entry.context === context && entry.listener === func) {
			if (_this3.executingLaterInNextTickCount === 0) {
				frameEntry.dispose();
			} else {
				// frame trigger Listeners are still running
				var tickerEntry = void 0;
				var disposeDoneNotifier = function disposeDoneNotifier() {
					var triggeredAgain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

					if (_this3.executingLaterInNextTickCount === 0) {
						callback && callback(triggeredAgain);
					} else {
						tickerEntry = new _ticker2.default(frameEntry, frameEntry.dispose, disposeDoneNotifier, 3);
						tickerEntry.execute();
					}
				};
				tickerEntry = new _ticker2.default(frameEntry, frameEntry.dispose, disposeDoneNotifier, 3);
				tickerEntry.execute();
			}
			return {
				v: void 0
			};
		}
	};

	for (i = 0; i < frameEntries.length; i++) {
		var _ret = _loop();

		if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	}

	for (i = 0; i < entries.length; i++) {
		entry = entries[i];
		if (entry.context === context && entry.listener === func) {
			entry.dispose();
			callback && callback();
			return;
		}
	}
};

Functions.prototype.triggerListeners = function () {
	var entriesIndexToDispose = [];

	this.entries.forEach(function (entry, index) {
		if (entry.listener) {
			entry.listener.apply(entry.context || entry.listener['this']);
		} else {
			entriesIndexToDispose.push(index);
		}
	});
	entriesIndexToDispose.forEach(function (entryIndex) {
		this.entries.splice(entryIndex, 1);
	}, this);

	if (this.frameEntries.length > 0) {
		this.frameEntries.forEach(function (entry, index) {
			if (entry.listener) {
				this.executingLaterInNextTickCount = this.executingLaterInNextTickCount + 1;
				entry.listener.apply(entry.context || entry.listener['this']);
			} else {
				entriesIndexToDispose.push(index);
			}
		}, this);
		entriesIndexToDispose.forEach(function (entryIndex) {
			this.frameEntries.splice(entryIndex, 1);
		}, this);
	} else {
		this.triggerDoneNotifier && this.triggerDoneNotifier();
	}
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ticker = __webpack_require__(0);

var _ticker2 = _interopRequireDefault(_ticker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Entry = function Entry(context, func) {
    _classCallCheck(this, Entry);

    this.context = context;
    this.listener = func;
};

// Method available only on Entry instance not in Class


exports.default = Entry;
Entry.prototype.dispose = function () {
    if (this.context instanceof _ticker2.default) {
        this.context.dispose();
    }
    this.context = null;
    this.listener = null;
};

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA5MmJiMmU0ZDg0ZDJlMzhlYzc4OSIsIndlYnBhY2s6Ly8vLi9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbGliL1N0b3JlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGlmZi9saWIvZGlmZi5qcyIsIndlYnBhY2s6Ly8vLi9saWIvU3RvcmVJRC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9ucy9saWIvZnVuY3Rpb25zLmpzIl0sIm5hbWVzIjpbImlzQ2hhbmdlZCIsIm9sZFZhbCIsIm5ld1ZhbCIsImNvbXBhcmlzb25WYWx1ZSIsIlN0b3JlIiwidmFsdWUiLCJkaXNwbGF5TmFtZSIsIm9iamVjdE5hbWUiLCJsaXN0ZW5lcnNFeGVjdXRlZE5vdGlmaWVyIiwidW5kZWZpbmVkIiwiZ2V0U3RhdGUiLCJqc29uIiwicHJvdG90eXBlIiwic2V0U3RhdGUiLCJuZXdWYWx1ZSIsImNhbGxiYWNrIiwidHJpZ2dlciIsIl9zZXRTdGF0ZSIsInZhbHVlQ2hhbmdlIiwidHJpZ2dlckxpc3RlbmVycyIsImV4ZWN1dGVUcmlnZ2VyZXIiLCJnZXREaWZmIiwiY3VycmVudFZhbHVlIiwicHJldlN0YXRlIiwiYXNKc29uIiwiY3VycmVudFN0YXRlIiwiaWQiLCJwcmV2IiwiY3VycmVudCIsImFwcGx5RGlmZiIsImRpZmYiLCJTdG9yZUlEIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwicGFyZW50SWQiLCJsaW5rZWRJZHMiLCJsaW5rUGFyZW50SWQiLCJiaW5kIiwidW5MaW5rUGFyZW50SWQiLCJsaW5rSWQiLCJ1bkxpbmtJZCIsImluZGV4T2YiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxD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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU87QUFDUDtBQUNBLENBQUM7QUFDRCwyQ0FBMkMsY0FBYywyMytDIiwiZmlsZSI6ImxpYi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwic3RvcmVcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wic3RvcmVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wic3RvcmVcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDkyYmIyZTRkODRkMmUzOGVjNzg5IiwiaW1wb3J0IFN0b3JlIGZyb20gJy4vU3RvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBTdG9yZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvaW5kZXguanMiLCJpbXBvcnQgeyBjb21wYXJlfSBmcm9tICdkaWZmJztcbmltcG9ydCBTdG9yZUlEIGZyb20gJy4vU3RvcmVJRCc7XG5cblxuZnVuY3Rpb24gaXNDaGFuZ2VkKG9sZFZhbCwgbmV3VmFsKXtcblx0Y29uc3QgY29tcGFyaXNvblZhbHVlID0gIGNvbXBhcmUob2xkVmFsLCBuZXdWYWwpO1xuXHRpZihjb21wYXJpc29uVmFsdWUgPT09IDApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcmUgZXh0ZW5kcyBTdG9yZUlEe1xuXHRjb25zdHJ1Y3RvciggdmFsdWUsIGRpc3BsYXlOYW1lLCBvYmplY3ROYW1lLCBsaXN0ZW5lcnNFeGVjdXRlZE5vdGlmaWVyKXtcblx0XHRzdXBlcihvYmplY3ROYW1lLGxpc3RlbmVyc0V4ZWN1dGVkTm90aWZpZXIpO1xuXHRcdHRoaXMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cdH1cblxuXHRhc0pzb24odmFsdWUpe1xuXHRcdHZhbHVlID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHRoaXMuZ2V0U3RhdGUoKSA6IHZhbHVlO1xuXHRcdGNvbnN0IGpzb24gPSBzdXBlci5hc0pzb24oKTtcblx0XHRqc29uWydjbGFzc0RlZk5hbWUnXSA9ICdTdG9yZSc7XG5cdFx0anNvblsnZGlzcGxheU5hbWUnXSA9IHRoaXMuZGlzcGxheU5hbWU7XG5cdFx0anNvblsndmFsdWUnXSA9IHZhbHVlO1xuXHRcdHJldHVybiBqc29uO1xuXHR9O1xufVxuXG5TdG9yZS5wcm90b3R5cGUuZ2V0U3RhdGUgPSBmdW5jdGlvbigpe1xuXHRyZXR1cm4gdGhpcy52YWx1ZTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uKG5ld1ZhbHVlLCBjYWxsYmFjaywgdHJpZ2dlciA9IHRydWUpe1xuXG5cdGNvbnN0IF9zZXRTdGF0ZSA9ICgpPT57XG5cdFx0Y29uc3QgdmFsdWVDaGFuZ2UgPSBpc0NoYW5nZWQodGhpcy52YWx1ZSwgbmV3VmFsdWUpO1xuXHRcdGlmICh2YWx1ZUNoYW5nZSkge1xuXHRcdFx0dGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuXHRcdFx0dHJpZ2dlciAmJiB0aGlzLnRyaWdnZXJMaXN0ZW5lcnMoKTtcblx0XHR9XG5cdH07XG5cdC8vc2V0IHN0YXRlIGZ1bmN0aW9uIGlzIHRoZSBvbmUgd2hpY2ggdHJpZ2dlcnMgYWxsIHRoZSBsaXN0ZW5lcnMgYXR0YWNoZWQgdG8gaXRcblx0Ly8gaWYgbGlzdGVuZXJzIGV4ZWN1dGlvbiBhcmUgZ29pbmcgb24sIHRoaXMgd2lsbCBleGVjdXRlIG9uY2UgdGhleSBhcmUgZG9uZVxuXHQvLyBlbHNlIHNldCBzdGF0ZSBpcyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHR0aGlzLmV4ZWN1dGVUcmlnZ2VyZXIodGhpcyxfc2V0U3RhdGUsIGNhbGxiYWNrKTtcbn07XG5cblxuU3RvcmUucHJvdG90eXBlLmdldERpZmYgPSBmdW5jdGlvbih2YWx1ZSl7XG5cdGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMuZ2V0U3RhdGUoKTtcblx0Y29uc3QgY29tcGFyaXNvblZhbHVlID0gIGNvbXBhcmUodmFsdWUsIGN1cnJlbnRWYWx1ZSk7XG5cdGNvbnN0IHByZXZTdGF0ZSA9IHRoaXMuYXNKc29uKHZhbHVlKTtcblxuXHRsZXQgY3VycmVudFN0YXRlO1xuXHRpZihjb21wYXJpc29uVmFsdWUgPT09IDApe1xuXHRcdC8vIHdoZW4gbm8gY2hhbmdlIHJldHVybnMgdGhlIElEXG5cdFx0Y3VycmVudFN0YXRlID0gdGhpcy5pZDtcblx0fSBlbHNlIHtcblx0XHQvLyB3aGVuIHRoZXJlIGlzIGNoYW5nZSByZXR1cm5zIGEgSlNPbiBvYmplY3Rcblx0XHQvLyBvYmplY3Qgd2hpY2ggYXMgQ2xhc3MgTmFtZSBhcyBgc3RvcmVgXG5cdFx0Ly8gdmFsdWVcblx0XHRjdXJyZW50U3RhdGUgPSB0aGlzLmFzSnNvbihjdXJyZW50VmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRwcmV2OiBwcmV2U3RhdGUsXG5cdFx0Y3VycmVudDogY3VycmVudFN0YXRlXG5cdH07XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuYXBwbHlEaWZmID0gZnVuY3Rpb24oZGlmZiwgY2FsbGJhY2spe1xuXHR0aGlzLnNldFN0YXRlKGRpZmYudmFsdWUsIGNhbGxiYWNrKTtcbn07XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9TdG9yZS5qcyIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiZGlmZlwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJkaWZmXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImRpZmZcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3N0cmluZ0NvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3N0cmluZ0NvbXBhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5nQ29tcGFyZSk7XG5cbnZhciBfbnVtYmVyQ29tcGFyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfbnVtYmVyQ29tcGFyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9udW1iZXJDb21wYXJlKTtcblxudmFyIF9kYXRlQ29tcGFyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZGF0ZUNvbXBhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGF0ZUNvbXBhcmUpO1xuXG52YXIgX2FycmF5Q29tcGFyZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYXJyYXlDb21wYXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FycmF5Q29tcGFyZSk7XG5cbnZhciBfb2JqZWN0Q29tcGFyZSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfb2JqZWN0Q29tcGFyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RDb21wYXJlKTtcblxudmFyIF9pcyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfaXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjb21wYXJlKG9sZE9iaiwgbmV3T2JqKSB7XG4gICAgaWYgKG9sZE9iaiA9PT0gbmV3T2JqKSByZXR1cm4gMDtcbiAgICBpZiAob2xkT2JqID09IG51bGwpIHJldHVybiAxO1xuICAgIGlmIChuZXdPYmogPT0gbnVsbCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIG9sZE9ialR5cGUgPSB0eXBlb2Ygb2xkT2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvbGRPYmopO1xuICAgIHZhciBuZXdPYmpUeXBlID0gdHlwZW9mIG5ld09iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobmV3T2JqKTtcblxuICAgIGlmIChvbGRPYmpUeXBlICE9PSBuZXdPYmpUeXBlKSByZXR1cm4gKDAsIF9zdHJpbmdDb21wYXJlMi5kZWZhdWx0KShvbGRPYmpUeXBlLCBuZXdPYmpUeXBlKTtcblxuICAgIGlmIChvbGRPYmpUeXBlID09PSAnYm9vbGVhbicpIHJldHVybiAoMCwgX251bWJlckNvbXBhcmUyLmRlZmF1bHQpKE51bWJlcihvbGRPYmopLCBOdW1iZXIobmV3T2JqKSk7XG4gICAgaWYgKG9sZE9ialR5cGUgPT09ICdudW1iZXInKSByZXR1cm4gKDAsIF9udW1iZXJDb21wYXJlMi5kZWZhdWx0KShvbGRPYmosIG5ld09iaik7XG4gICAgaWYgKG9sZE9ialR5cGUgPT09ICdzdHJpbmcnKSByZXR1cm4gKDAsIF9zdHJpbmdDb21wYXJlMi5kZWZhdWx0KShvbGRPYmosIG5ld09iaik7XG5cbiAgICBpZiAob2xkT2JqVHlwZSAhPT0gJ29iamVjdCcpIHJldHVybiAxO1xuXG4gICAgaWYgKCgwLCBfaXMyLmRlZmF1bHQpKG9sZE9iaiwgRGF0ZSkpIHJldHVybiAoMCwgX2RhdGVDb21wYXJlMi5kZWZhdWx0KShvbGRPYmosIG5ld09iaik7XG4gICAgaWYgKCgwLCBfaXMyLmRlZmF1bHQpKG9sZE9iaiwgQXJyYXkpKSByZXR1cm4gKDAsIF9hcnJheUNvbXBhcmUyLmRlZmF1bHQpKG9sZE9iaiwgbmV3T2JqLCBjb21wYXJlKTtcbiAgICBpZiAoKDAsIF9pczIuZGVmYXVsdCkob2xkT2JqLCBPYmplY3QpKSByZXR1cm4gKDAsIF9vYmplY3RDb21wYXJlMi5kZWZhdWx0KShvbGRPYmosIG5ld09iaiwgY29tcGFyZSk7XG5cbiAgICByZXR1cm4gMDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNvbXBhcmU7XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4vL2h0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9sb2NhbGVDb21wYXJlXG5mdW5jdGlvbiBzdHJpbmdDb21wYXJlKG9sZFZhbHVlLCBuZXdWYWx1ZSwgaXNDYXNlU2Vuc2l0aXZlKSB7XG4gICAgaXNDYXNlU2Vuc2l0aXZlID0gdHlwZW9mIGlzQ2FzZVNlbnNpdGl2ZSAhPT0gJ3VuZGVmaW5lZCcgPyBpc0Nhc2VTZW5zaXRpdmUgOiBmYWxzZTtcblxuICAgIGlmIChvbGRWYWx1ZSA9PSBudWxsICYmIG5ld1ZhbHVlID09IG51bGwpIHJldHVybiAwO1xuICAgIGlmIChvbGRWYWx1ZSA9PSBudWxsKSByZXR1cm4gMTtcbiAgICBpZiAobmV3VmFsdWUgPT0gbnVsbCkgcmV0dXJuIC0xO1xuXG4gICAgaWYgKGlzQ2FzZVNlbnNpdGl2ZSkge1xuICAgICAgICBvbGRWYWx1ZSA9IFN0cmluZyhvbGRWYWx1ZSkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgbmV3VmFsdWUgPSBTdHJpbmcobmV3VmFsdWUpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IFN0cmluZyhvbGRWYWx1ZSkubG9jYWxlQ29tcGFyZShuZXdWYWx1ZSk7XG4gICAgaWYgKHJlc3VsdCA8IC0xKSByZXN1bHQgPSAtMTtlbHNlIGlmIChyZXN1bHQgPiAxKSByZXN1bHQgPSAxO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gc3RyaW5nQ29tcGFyZTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gbnVtYmVyQ29tcGFyZShvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcblxuICAgIGlmIChpc05hTihvbGRWYWx1ZSkgJiYgaXNOYU4obmV3VmFsdWUpKSByZXR1cm4gMDtcbiAgICBpZiAoaXNOYU4ob2xkVmFsdWUpKSByZXR1cm4gMTtcbiAgICBpZiAoaXNOYU4obmV3VmFsdWUpKSByZXR1cm4gLTE7XG5cbiAgICBpZiAob2xkVmFsdWUgPCBuZXdWYWx1ZSkgcmV0dXJuIC0xO1xuICAgIGlmIChvbGRWYWx1ZSA+IG5ld1ZhbHVlKSByZXR1cm4gMTtcbiAgICByZXR1cm4gMDtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gbnVtYmVyQ29tcGFyZTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gZGF0ZUNvbXBhcmUob2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG5cbiAgICBpZiAob2xkVmFsdWUgPT09IG51bGwgJiYgbmV3VmFsdWUgPT09IG51bGwpIHJldHVybiAwO1xuICAgIGlmIChvbGRWYWx1ZSA9PT0gbnVsbCkgcmV0dXJuIDE7XG4gICAgaWYgKG5ld1ZhbHVlID09PSBudWxsKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgb2xkVGltZSA9IG9sZFZhbHVlLmdldFRpbWUoKTtcbiAgICB2YXIgbmV3VGltZSA9IG5ld1ZhbHVlLmdldFRpbWUoKTtcbiAgICBpZiAob2xkVGltZSA8IG5ld1RpbWUpIHJldHVybiAtMTtcbiAgICBpZiAob2xkVGltZSA+IG5ld1RpbWUpIHJldHVybiAxO1xuXG4gICAgaWYgKGlzTmFOKG9sZFRpbWUpICYmIGlzTmFOKG5ld1RpbWUpKSByZXR1cm4gMDtcbiAgICBpZiAoaXNOYU4ob2xkVGltZSkpIHJldHVybiAxO1xuICAgIGlmIChpc05hTihuZXdUaW1lKSkgcmV0dXJuIC0xO1xuXG4gICAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGRhdGVDb21wYXJlO1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX2NvbXBhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcGFyZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGFycmF5Q29tcGFyZShvbGRPYmosIG5ld09iaikge1xuICAgIGlmIChvbGRPYmogPT09IG5ld09iaikgcmV0dXJuIDA7XG4gICAgaWYgKG9sZE9iaiA9PSBudWxsKSByZXR1cm4gMTtcbiAgICBpZiAobmV3T2JqID09IG51bGwpIHJldHVybiAtMTtcblxuICAgIHZhciBjb21wYXJpc29uVmFsdWUgPSB2b2lkIDA7XG4gICAgdmFyIG9sZE9iakxlbmd0aCA9IG9sZE9iai5sZW5ndGg7XG4gICAgdmFyIG5ld09iakxlbmd0aCA9IG5ld09iai5sZW5ndGg7XG4gICAgaWYgKG9sZE9iakxlbmd0aCA8IG5ld09iakxlbmd0aCkgcmV0dXJuIC0xO1xuICAgIGlmIChvbGRPYmpMZW5ndGggPiBuZXdPYmpMZW5ndGgpIHJldHVybiAxO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGRPYmpMZW5ndGg7IGkrKykge1xuICAgICAgICAvL3JlY3Vyc2l2ZSBjb21wYXJpc29uIG9mIGFycmF5IGVsZW1lbnRzXG4gICAgICAgIGNvbXBhcmlzb25WYWx1ZSA9ICgwLCBfY29tcGFyZTIuZGVmYXVsdCkob2xkT2JqW2ldLCBuZXdPYmpbaV0pO1xuICAgICAgICBpZiAoY29tcGFyaXNvblZhbHVlICE9IDApIHJldHVybiBjb21wYXJpc29uVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiAwO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYXJyYXlDb21wYXJlO1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX2NvbXBhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcGFyZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIG9iamVjdENvbXBhcmUob2xkT2JqLCBuZXdPYmopIHtcbiAgICBpZiAob2xkT2JqID09PSBuZXdPYmopIHJldHVybiAwO1xuICAgIGlmIChvbGRPYmogPT0gbnVsbCkgcmV0dXJuIDE7XG4gICAgaWYgKG5ld09iaiA9PSBudWxsKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcHJvcCA9IHZvaWQgMDtcbiAgICBmb3IgKHByb3AgaW4gb2xkT2JqKSB7XG4gICAgICAgIGlmICghbmV3T2JqLmhhc093blByb3BlcnR5KHByb3ApKSByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgdmFyIGNvbXBhcmlzb25WYWx1ZSA9IHZvaWQgMDtcbiAgICBmb3IgKHByb3AgaW4gbmV3T2JqKSB7XG4gICAgICAgIGlmICghb2xkT2JqLmhhc093blByb3BlcnR5KHByb3ApKSByZXR1cm4gMTtcbiAgICAgICAgLy9yZWN1cnNpdmUgY29tcGFyaXNvbiBvZiBvYmplY3QgcHJvcGVydHlcbiAgICAgICAgY29tcGFyaXNvblZhbHVlID0gKDAsIF9jb21wYXJlMi5kZWZhdWx0KShvbGRPYmpbcHJvcF0sIG5ld09ialtwcm9wXSk7XG4gICAgICAgIGlmIChjb21wYXJpc29uVmFsdWUgIT09IDApIHJldHVybiBjb21wYXJpc29uVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiAwO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gb2JqZWN0Q29tcGFyZTtcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMub2JqZWN0Q29tcGFyZSA9IGV4cG9ydHMuYXJyYXlDb21wYXJlID0gZXhwb3J0cy5kYXRlQ29tcGFyZSA9IGV4cG9ydHMubnVtYmVyQ29tcGFyZSA9IGV4cG9ydHMuc3RyaW5nQ29tcGFyZSA9IGV4cG9ydHMuY29tcGFyZSA9IGV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9zdHJpbmdDb21wYXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9zdHJpbmdDb21wYXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ0NvbXBhcmUpO1xuXG52YXIgX251bWJlckNvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX251bWJlckNvbXBhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbnVtYmVyQ29tcGFyZSk7XG5cbnZhciBfZGF0ZUNvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2RhdGVDb21wYXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RhdGVDb21wYXJlKTtcblxudmFyIF9hcnJheUNvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2FycmF5Q29tcGFyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcnJheUNvbXBhcmUpO1xuXG52YXIgX29iamVjdENvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX29iamVjdENvbXBhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0Q29tcGFyZSk7XG5cbnZhciBfY29tcGFyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfY29tcGFyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wYXJlKTtcblxudmFyIF9kaWZmID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9kaWZmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RpZmYpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGlmZjIuZGVmYXVsdDtcbmV4cG9ydHMuY29tcGFyZSA9IF9jb21wYXJlMi5kZWZhdWx0O1xuZXhwb3J0cy5zdHJpbmdDb21wYXJlID0gX3N0cmluZ0NvbXBhcmUyLmRlZmF1bHQ7XG5leHBvcnRzLm51bWJlckNvbXBhcmUgPSBfbnVtYmVyQ29tcGFyZTIuZGVmYXVsdDtcbmV4cG9ydHMuZGF0ZUNvbXBhcmUgPSBfZGF0ZUNvbXBhcmUyLmRlZmF1bHQ7XG5leHBvcnRzLmFycmF5Q29tcGFyZSA9IF9hcnJheUNvbXBhcmUyLmRlZmF1bHQ7XG5leHBvcnRzLm9iamVjdENvbXBhcmUgPSBfb2JqZWN0Q29tcGFyZTIuZGVmYXVsdDtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmZ1bmN0aW9uIGlzKG9iaiwgVHlwZSkge1xuICAgIGlmIChvYmogPT0gbnVsbCB8fCBvYmogPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBUeXBlKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoVHlwZSA9PT0gT2JqZWN0KSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgcmV0dXJuIFR5cGUgPT09IFN0cmluZztcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHJldHVybiBUeXBlID09PSBOdW1iZXI7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdib29sZWFuJykgcmV0dXJuIFR5cGUgPT09IEJvb2xlYW47XG4gICAgaWYgKFR5cGUgPT09IEFycmF5KSByZXR1cm4gQXJyYXkuaXNBcnJheShvYmopO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBpcztcblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY29tcGFyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfY29tcGFyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wYXJlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZGlmZihvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcblx0dmFyIGNvbXBhcmlzb25WYWx1ZSA9ICgwLCBfY29tcGFyZTIuZGVmYXVsdCkob2xkVmFsdWUsIG5ld1ZhbHVlKTtcblxuXHRpZiAoY29tcGFyaXNvblZhbHVlID09PSAwKSB7XG5cdFx0bmV3VmFsdWUgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHByZXY6IG9sZFZhbHVlLFxuXHRcdGN1cnJlbnQ6IG5ld1ZhbHVlXG5cdH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGRpZmY7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dmQyVmljR0ZqYXk5MWJtbDJaWEp6WVd4TmIyUjFiR1ZFWldacGJtbDBhVzl1SWl3aWQyVmljR0ZqYXpvdkx5OTNaV0p3WVdOckwySnZiM1J6ZEhKaGNDQTJORFF3TXpOall6bGxPV0l3WldWa00yTTBOaUlzSW5kbFluQmhZMnM2THk4dkxpOXNhV0l2WTI5dGNHRnlaUzlqYjIxd1lYSmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMnhwWWk5amIyMXdZWEpsTDNOMGNtbHVaME52YlhCaGNtVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZiR2xpTDJOdmJYQmhjbVV2Ym5WdFltVnlRMjl0Y0dGeVpTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXNhV0l2WTI5dGNHRnlaUzlrWVhSbFEyOXRjR0Z5WlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5c2FXSXZZMjl0Y0dGeVpTOWhjbkpoZVVOdmJYQmhjbVV1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YkdsaUwyTnZiWEJoY21VdmIySnFaV04wUTI5dGNHRnlaUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTlzYVdJdmFXNWtaWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YkdsaUwybHpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMnhwWWk5a2FXWm1MbXB6SWwwc0ltNWhiV1Z6SWpwYkltTnZiWEJoY21VaUxDSnZiR1JQWW1vaUxDSnVaWGRQWW1vaUxDSnZiR1JQWW1wVWVYQmxJaXdpYm1WM1QySnFWSGx3WlNJc0lrNTFiV0psY2lJc0lrUmhkR1VpTENKQmNuSmhlU0lzSWs5aWFtVmpkQ0lzSW5OMGNtbHVaME52YlhCaGNtVWlMQ0p2YkdSV1lXeDFaU0lzSW01bGQxWmhiSFZsSWl3aWFYTkRZWE5sVTJWdWMybDBhWFpsSWl3aVUzUnlhVzVuSWl3aWRHOU1iMk5oYkdWTWIzZGxja05oYzJVaUxDSnlaWE4xYkhRaUxDSnNiMk5oYkdWRGIyMXdZWEpsSWl3aWJuVnRZbVZ5UTI5dGNHRnlaU0lzSW1selRtRk9JaXdpWkdGMFpVTnZiWEJoY21VaUxDSnZiR1JVYVcxbElpd2laMlYwVkdsdFpTSXNJbTVsZDFScGJXVWlMQ0poY25KaGVVTnZiWEJoY21VaUxDSmpiMjF3WVhKcGMyOXVWbUZzZFdVaUxDSnZiR1JQWW1wTVpXNW5kR2dpTENKc1pXNW5kR2dpTENKdVpYZFBZbXBNWlc1bmRHZ2lMQ0pwSWl3aWIySnFaV04wUTI5dGNHRnlaU0lzSW5CeWIzQWlMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJbVJsWm1GMWJIUWlMQ0pwY3lJc0ltOWlhaUlzSWxSNWNHVWlMQ0pDYjI5c1pXRnVJaXdpYVhOQmNuSmhlU0lzSW1ScFptWWlMQ0oxYm1SbFptbHVaV1FpTENKd2NtVjJJaXdpWTNWeWNtVnVkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6dEJRVU5FTEU4N1FVTldRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdPMEZCUjBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNZVUZCU3p0QlFVTk1PMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNiVU5CUVRKQ0xEQkNRVUV3UWl4RlFVRkZPMEZCUTNaRUxIbERRVUZwUXl4bFFVRmxPMEZCUTJoRU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRGhFUVVGelJDd3JSRUZCSzBRN08wRkJSWEpJTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3T3pzN096czdPenM3T3pzN096dEJRemRFUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3T3p0QlFVVkJMRk5CUVZOQkxFOUJRVlFzUTBGQmFVSkRMRTFCUVdwQ0xFVkJRWGxDUXl4TlFVRjZRaXhGUVVOQk8wRkJRMGtzVVVGQlNVUXNWMEZCVjBNc1RVRkJaaXhGUVVOSkxFOUJRVThzUTBGQlVEdEJRVU5LTEZGQlFVbEVMRlZCUVZVc1NVRkJaQ3hGUVVOSkxFOUJRVThzUTBGQlVEdEJRVU5LTEZGQlFVbERMRlZCUVZVc1NVRkJaQ3hGUVVOSkxFOUJRVThzUTBGQlF5eERRVUZTT3p0QlFVVktMRkZCUVU5RExHOUNRVUZ2UWtZc1RVRkJjRUlzZVVOQlFXOUNRU3hOUVVGd1FpeERRVUZRTzBGQlEwRXNVVUZCVDBjc2IwSkJRVzlDUml4TlFVRndRaXg1UTBGQmIwSkJMRTFCUVhCQ0xFTkJRVkE3TzBGQlJVRXNVVUZCU1VNc1pVRkJaVU1zVlVGQmJrSXNSVUZEU1N4UFFVRlBMRFpDUVVGalJDeFZRVUZrTEVWQlFUQkNReXhWUVVFeFFpeERRVUZRT3p0QlFVVktMRkZCUVVsRUxHVkJRV1VzVTBGQmJrSXNSVUZEU1N4UFFVRlBMRFpDUVVGalJTeFBRVUZQU2l4TlFVRlFMRU5CUVdRc1JVRkJPRUpKTEU5QlFVOUlMRTFCUVZBc1EwRkJPVUlzUTBGQlVEdEJRVU5LTEZGQlFVbERMR1ZCUVdVc1VVRkJia0lzUlVGRFNTeFBRVUZQTERaQ1FVRmpSaXhOUVVGa0xFVkJRWE5DUXl4TlFVRjBRaXhEUVVGUU8wRkJRMG9zVVVGQlNVTXNaVUZCWlN4UlFVRnVRaXhGUVVOSkxFOUJRVThzTmtKQlFXTkdMRTFCUVdRc1JVRkJjMEpETEUxQlFYUkNMRU5CUVZBN08wRkJSVW9zVVVGQlNVTXNaVUZCWlN4UlFVRnVRaXhGUVVOSkxFOUJRVThzUTBGQlVEczdRVUZGU2l4UlFVRkpMR3RDUVVGSFJpeE5RVUZJTEVWQlFWZExMRWxCUVZnc1EwRkJTaXhGUVVOSkxFOUJRVThzTWtKQlFWbE1MRTFCUVZvc1JVRkJiMEpETEUxQlFYQkNMRU5CUVZBN1FVRkRTaXhSUVVGSkxHdENRVUZIUkN4TlFVRklMRVZCUVZkTkxFdEJRVmdzUTBGQlNpeEZRVU5KTEU5QlFVOHNORUpCUVdGT0xFMUJRV0lzUlVGQmNVSkRMRTFCUVhKQ0xFVkJRVFJDUml4UFFVRTFRaXhEUVVGUU8wRkJRMG9zVVVGQlNTeHJRa0ZCUjBNc1RVRkJTQ3hGUVVGWFR5eE5RVUZZTEVOQlFVb3NSVUZEU1N4UFFVRlBMRFpDUVVGalVDeE5RVUZrTEVWQlFYTkNReXhOUVVGMFFpeEZRVUU0UWtZc1QwRkJPVUlzUTBGQlVEczdRVUZGU2l4WFFVRlBMRU5CUVZBN1FVRkRTRHM3YTBKQlJXTkJMRTg3T3pzN096czdPenM3T3p0QlF6RkRaanRCUVVOQkxGTkJRVk5UTEdGQlFWUXNRMEZCZFVKRExGRkJRWFpDTEVWQlFXbERReXhSUVVGcVF5eEZRVUV5UTBNc1pVRkJNME1zUlVGQk5FUTdRVUZEZUVSQkxITkNRVUZyUWl4UFFVRlBRU3hsUVVGUUxFdEJRVEpDTEZkQlFUTkNMRWRCUVhsRFFTeGxRVUY2UXl4SFFVRXlSQ3hMUVVFM1JUczdRVUZGUVN4UlFVRkpSaXhaUVVGWkxFbEJRVm9zU1VGQmIwSkRMRmxCUVZrc1NVRkJjRU1zUlVGRFNTeFBRVUZQTEVOQlFWQTdRVUZEU2l4UlFVRkpSQ3haUVVGWkxFbEJRV2hDTEVWQlEwa3NUMEZCVHl4RFFVRlFPMEZCUTBvc1VVRkJTVU1zV1VGQldTeEpRVUZvUWl4RlFVTkpMRTlCUVU4c1EwRkJReXhEUVVGU096dEJRVVZLTEZGQlFVbERMR1ZCUVVvc1JVRkJjVUk3UVVGRGFrSkdMRzFDUVVGWFJ5eFBRVUZQU0N4UlFVRlFMRVZCUVdsQ1NTeHBRa0ZCYWtJc1JVRkJXRHRCUVVOQlNDeHRRa0ZCVjBVc1QwRkJUMFlzVVVGQlVDeEZRVUZwUWtjc2FVSkJRV3BDTEVWQlFWZzdRVUZEU0RzN1FVRkZSQ3hSUVVGSlF5eFRRVUZUUml4UFFVRlBTQ3hSUVVGUUxFVkJRV2xDVFN4aFFVRnFRaXhEUVVFclFrd3NVVUZCTDBJc1EwRkJZanRCUVVOQkxGRkJRVWxKTEZOQlFWTXNRMEZCUXl4RFFVRmtMRVZCUTBsQkxGTkJRVk1zUTBGQlF5eERRVUZXTEVOQlJFb3NTMEZGU3l4SlFVRkpRU3hUUVVGVExFTkJRV0lzUlVGRFJFRXNVMEZCVXl4RFFVRlVPenRCUVVWS0xGZEJRVTlCTEUxQlFWQTdRVUZEU0RzN2EwSkJSV05PTEdFN096czdPenM3T3pzN096czdRVU40UW1Zc1UwRkJVMUVzWVVGQlZDeERRVUYxUWxBc1VVRkJka0lzUlVGQmFVTkRMRkZCUVdwRExFVkJRVEpET3p0QlFVVjJReXhSUVVGSlR5eE5RVUZOVWl4UlFVRk9MRXRCUVcxQ1VTeE5RVUZOVUN4UlFVRk9MRU5CUVhaQ0xFVkJRMGtzVDBGQlR5eERRVUZRTzBGQlEwb3NVVUZCU1U4c1RVRkJUVklzVVVGQlRpeERRVUZLTEVWQlEwa3NUMEZCVHl4RFFVRlFPMEZCUTBvc1VVRkJTVkVzVFVGQlRWQXNVVUZCVGl4RFFVRktMRVZCUTBrc1QwRkJUeXhEUVVGRExFTkJRVkk3TzBGQlJVb3NVVUZCU1VRc1YwRkJWME1zVVVGQlppeEZRVU5KTEU5QlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBvc1VVRkJTVVFzVjBGQlYwTXNVVUZCWml4RlFVTkpMRTlCUVU4c1EwRkJVRHRCUVVOS0xGZEJRVThzUTBGQlVEdEJRVU5JT3p0clFrRkZZMDBzWVRzN096czdPenM3T3pzN096dEJRMmhDWml4VFFVRlRSU3hYUVVGVUxFTkJRWEZDVkN4UlFVRnlRaXhGUVVFclFrTXNVVUZCTDBJc1JVRkJlVU03TzBGQlJYSkRMRkZCUVVsRUxHRkJRV0VzU1VGQllpeEpRVUZ4UWtNc1lVRkJZU3hKUVVGMFF5eEZRVU5KTEU5QlFVOHNRMEZCVUR0QlFVTktMRkZCUVVsRUxHRkJRV0VzU1VGQmFrSXNSVUZEU1N4UFFVRlBMRU5CUVZBN1FVRkRTaXhSUVVGSlF5eGhRVUZoTEVsQlFXcENMRVZCUTBrc1QwRkJUeXhEUVVGRExFTkJRVkk3TzBGQlJVb3NVVUZCUzFNc1ZVRkJWVllzVTBGQlUxY3NUMEZCVkN4RlFVRm1PMEZCUTBFc1VVRkJTME1zVlVGQlZWZ3NVMEZCVTFVc1QwRkJWQ3hGUVVGbU8wRkJRMEVzVVVGQlNVUXNWVUZCVlVVc1QwRkJaQ3hGUVVOSkxFOUJRVThzUTBGQlF5eERRVUZTTzBGQlEwb3NVVUZCU1VZc1ZVRkJWVVVzVDBGQlpDeEZRVU5KTEU5QlFVOHNRMEZCVURzN1FVRkZTaXhSUVVGSlNpeE5RVUZOUlN4UFFVRk9MRXRCUVd0Q1JpeE5RVUZOU1N4UFFVRk9MRU5CUVhSQ0xFVkJRMGtzVDBGQlR5eERRVUZRTzBGQlEwb3NVVUZCU1Vvc1RVRkJUVVVzVDBGQlRpeERRVUZLTEVWQlEwa3NUMEZCVHl4RFFVRlFPMEZCUTBvc1VVRkJTVVlzVFVGQlRVa3NUMEZCVGl4RFFVRktMRVZCUTBrc1QwRkJUeXhEUVVGRExFTkJRVkk3TzBGQlJVb3NWMEZCVHl4RFFVRlFPMEZCUTBnN08ydENRVVZqU0N4WE96czdPenM3T3pzN096czdPMEZETTBKbU96czdPenM3UVVGRlFTeFRRVUZUU1N4WlFVRlVMRU5CUVhOQ2RFSXNUVUZCZEVJc1JVRkJPRUpETEUxQlFUbENMRVZCUTBFN1FVRkRTU3hSUVVGSlJDeFhRVUZYUXl4TlFVRm1MRVZCUTBrc1QwRkJUeXhEUVVGUU8wRkJRMG9zVVVGQlNVUXNWVUZCVlN4SlFVRmtMRVZCUTBrc1QwRkJUeXhEUVVGUU8wRkJRMG9zVVVGQlNVTXNWVUZCVlN4SlFVRmtMRVZCUTBrc1QwRkJUeXhEUVVGRExFTkJRVkk3TzBGQlJVb3NVVUZCU1hOQ0xIZENRVUZLTzBGQlEwRXNVVUZCUzBNc1pVRkJaWGhDTEU5QlFVOTVRaXhOUVVFelFqdEJRVU5CTEZGQlFVdERMR1ZCUVdWNlFpeFBRVUZQZDBJc1RVRkJNMEk3UVVGRFFTeFJRVUZKUkN4bFFVRmxSU3haUVVGdVFpeEZRVU5KTEU5QlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBvc1VVRkJTVVlzWlVGQlpVVXNXVUZCYmtJc1JVRkRTU3hQUVVGUExFTkJRVkE3TzBGQlJVb3NVMEZCU3l4SlFVRkxReXhKUVVGSkxFTkJRV1FzUlVGQmFVSkJMRWxCUVVsSUxGbEJRWEpDTEVWQlFXMURSeXhIUVVGdVF5eEZRVUYzUXp0QlFVTndRenRCUVVOQlNpd3dRa0ZCYTBJc2RVSkJRVkYyUWl4UFFVRlBNa0lzUTBGQlVDeERRVUZTTEVWQlFXMUNNVUlzVDBGQlR6QkNMRU5CUVZBc1EwRkJia0lzUTBGQmJFSTdRVUZEUVN4WlFVRkpTaXh0UWtGQmJVSXNRMEZCZGtJc1JVRkRTU3hQUVVGUFFTeGxRVUZRTzBGQlExQTdRVUZEUkN4WFFVRlBMRU5CUVZBN1FVRkRTRHM3YTBKQlJXTkVMRms3T3pzN096czdPenM3T3pzN1FVTTFRbVk3T3pzN096dEJRVVZCTEZOQlFWTk5MR0ZCUVZRc1EwRkJkVUkxUWl4TlFVRjJRaXhGUVVFclFrTXNUVUZCTDBJc1JVRkRRVHRCUVVOSkxGRkJRVWxFTEZkQlFWZERMRTFCUVdZc1JVRkRTU3hQUVVGUExFTkJRVkE3UVVGRFNpeFJRVUZKUkN4VlFVRlZMRWxCUVdRc1JVRkRTU3hQUVVGUExFTkJRVkE3UVVGRFNpeFJRVUZKUXl4VlFVRlZMRWxCUVdRc1JVRkRTU3hQUVVGUExFTkJRVU1zUTBGQlVqczdRVUZIU2l4UlFVRkpORUlzWVVGQlNqdEJRVU5CTEZOQlFVdEJMRWxCUVV3c1NVRkJZVGRDTEUxQlFXSXNSVUZEUVR0QlFVTkpMRmxCUVVrc1EwRkJRME1zVDBGQlR6WkNMR05CUVZBc1EwRkJjMEpFTEVsQlFYUkNMRU5CUVV3c1JVRkRTU3hQUVVGUExFTkJRVU1zUTBGQlVqdEJRVU5RT3p0QlFVVkVMRkZCUVVsT0xIZENRVUZLTzBGQlEwRXNVMEZCUzAwc1NVRkJUQ3hKUVVGaE5VSXNUVUZCWWl4RlFVTkJPMEZCUTBrc1dVRkJTU3hEUVVGRFJDeFBRVUZQT0VJc1kwRkJVQ3hEUVVGelFrUXNTVUZCZEVJc1EwRkJUQ3hGUVVOSkxFOUJRVThzUTBGQlVEdEJRVU5LTzBGQlEwRk9MREJDUVVGclFpeDFRa0ZCVVhaQ0xFOUJRVTgyUWl4SlFVRlFMRU5CUVZJc1JVRkJjMEkxUWl4UFFVRlBORUlzU1VGQlVDeERRVUYwUWl4RFFVRnNRanRCUVVOQkxGbEJRVWxPTEc5Q1FVRnZRaXhEUVVGNFFpeEZRVU5KTEU5QlFVOUJMR1ZCUVZBN1FVRkRVRHRCUVVORUxGZEJRVThzUTBGQlVEdEJRVU5JT3p0clFrRkZZMHNzWVRzN096czdPenM3T3pzN096czdRVU5vUTJZN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3T3p0UlFVZFpSeXhQTzFGQlExSm9ReXhQTzFGQlEwRlRMR0U3VVVGRFFWRXNZVHRSUVVOQlJTeFhPMUZCUTBGSkxGazdVVUZEUVUwc1lUczdPenM3T3pzN096czdPMEZEWmtvc1UwRkJVMGtzUlVGQlZDeERRVUZaUXl4SFFVRmFMRVZCUVdsQ1F5eEpRVUZxUWl4RlFVRjFRanRCUVVOdVFpeFJRVUZKUkN4UFFVRlBMRWxCUVZBc1NVRkJaVUVzVDBGQlR5eEpRVUV4UWl4RlFVTkpMRTlCUVU4c1MwRkJVRHRCUVVOS0xGRkJRVWxCTEdWQlFXVkRMRWxCUVc1Q0xFVkJRMGtzVDBGQlR5eEpRVUZRTzBGQlEwb3NVVUZCU1VFc1UwRkJVek5DTEUxQlFXSXNSVUZEU1N4UFFVRlBMRWxCUVZBN08wRkJSVW9zVVVGQlNTeFBRVUZQTUVJc1IwRkJVQ3hMUVVGblFpeFJRVUZ3UWl4RlFVTkpMRTlCUVU5RExGTkJRVk4wUWl4TlFVRm9RanRCUVVOS0xGRkJRVWtzVDBGQlQzRkNMRWRCUVZBc1MwRkJaMElzVVVGQmNFSXNSVUZEU1N4UFFVRlBReXhUUVVGVE9VSXNUVUZCYUVJN1FVRkRTaXhSUVVGSkxFOUJRVTgyUWl4SFFVRlFMRXRCUVdkQ0xGTkJRWEJDTEVWQlEwa3NUMEZCVDBNc1UwRkJVME1zVDBGQmFFSTdRVUZEU2l4UlFVRkpSQ3hUUVVGVE5VSXNTMEZCWWl4RlFVTkpMRTlCUVU5QkxFMUJRVTA0UWl4UFFVRk9MRU5CUVdOSUxFZEJRV1FzUTBGQlVEczdRVUZGU2l4WFFVRlBMRXRCUVZBN1FVRkRTRHM3YTBKQlJXTkVMRVU3T3pzN096czdPenM3T3pzN1FVTndRbVk3T3pzN096dEJRVVZCTEZOQlFWTkxMRWxCUVZRc1EwRkJZelZDTEZGQlFXUXNSVUZCZDBKRExGRkJRWGhDTEVWQlFXbERPMEZCUTJoRExFdEJRVTFoTEd0Q1FVRnRRaXgxUWtGQlVXUXNVVUZCVWl4RlFVRnJRa01zVVVGQmJFSXNRMEZCZWtJN08wRkJSVUVzUzBGQlIyRXNiMEpCUVc5Q0xFTkJRWFpDTEVWQlFYbENPMEZCUTNoQ1lpeGhRVUZYTkVJc1UwRkJXRHRCUVVOQk96dEJRVVZGTEZGQlFVODdRVUZEVkVNc1VVRkJUVGxDTEZGQlJFYzdRVUZGVkN0Q0xGZEJRVk01UWp0QlFVWkJMRVZCUVZBN1FVRkpTRHM3YTBKQlJXTXlRaXhKSWl3aVptbHNaU0k2SW14cFlpOWthV1ptTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVJSGRsWW5CaFkydFZibWwyWlhKellXeE5iMlIxYkdWRVpXWnBibWwwYVc5dUtISnZiM1FzSUdaaFkzUnZjbmtwSUh0Y2JseDBhV1lvZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCdGIyUjFiR1VnUFQwOUlDZHZZbXBsWTNRbktWeHVYSFJjZEcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm1GamRHOXllU2dwTzF4dVhIUmxiSE5sSUdsbUtIUjVjR1Z2WmlCa1pXWnBibVVnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnWkdWbWFXNWxMbUZ0WkNsY2JseDBYSFJrWldacGJtVW9YQ0prYVdabVhDSXNJRnRkTENCbVlXTjBiM0o1S1R0Y2JseDBaV3h6WlNCcFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MFpYaHdiM0owYzF0Y0ltUnBabVpjSWwwZ1BTQm1ZV04wYjNKNUtDazdYRzVjZEdWc2MyVmNibHgwWEhSeWIyOTBXMXdpWkdsbVpsd2lYU0E5SUdaaFkzUnZjbmtvS1R0Y2JuMHBLSFJvYVhNc0lHWjFibU4wYVc5dUtDa2dlMXh1Y21WMGRYSnVJRnh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlCM1pXSndZV05yTDNWdWFYWmxjbk5oYkUxdlpIVnNaVVJsWm1sdWFYUnBiMjRpTENJZ1hIUXZMeUJVYUdVZ2JXOWtkV3hsSUdOaFkyaGxYRzRnWEhSMllYSWdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN5QTlJSHQ5TzF4dVhHNGdYSFF2THlCVWFHVWdjbVZ4ZFdseVpTQm1kVzVqZEdsdmJseHVJRngwWm5WdVkzUnBiMjRnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlodGIyUjFiR1ZKWkNrZ2UxeHVYRzRnWEhSY2RDOHZJRU5vWldOcklHbG1JRzF2WkhWc1pTQnBjeUJwYmlCallXTm9aVnh1SUZ4MFhIUnBaaWhwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYU2tnZTF4dUlGeDBYSFJjZEhKbGRIVnliaUJwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYUzVsZUhCdmNuUnpPMXh1SUZ4MFhIUjlYRzRnWEhSY2RDOHZJRU55WldGMFpTQmhJRzVsZHlCdGIyUjFiR1VnS0dGdVpDQndkWFFnYVhRZ2FXNTBieUIwYUdVZ1kyRmphR1VwWEc0Z1hIUmNkSFpoY2lCdGIyUjFiR1VnUFNCcGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFNBOUlIdGNiaUJjZEZ4MFhIUnBPaUJ0YjJSMWJHVkpaQ3hjYmlCY2RGeDBYSFJzT2lCbVlXeHpaU3hjYmlCY2RGeDBYSFJsZUhCdmNuUnpPaUI3ZlZ4dUlGeDBYSFI5TzF4dVhHNGdYSFJjZEM4dklFVjRaV04xZEdVZ2RHaGxJRzF2WkhWc1pTQm1kVzVqZEdsdmJseHVJRngwWEhSdGIyUjFiR1Z6VzIxdlpIVnNaVWxrWFM1allXeHNLRzF2WkhWc1pTNWxlSEJ2Y25SekxDQnRiMlIxYkdVc0lHMXZaSFZzWlM1bGVIQnZjblJ6TENCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktUdGNibHh1SUZ4MFhIUXZMeUJHYkdGbklIUm9aU0J0YjJSMWJHVWdZWE1nYkc5aFpHVmtYRzRnWEhSY2RHMXZaSFZzWlM1c0lEMGdkSEoxWlR0Y2JseHVJRngwWEhRdkx5QlNaWFIxY200Z2RHaGxJR1Y0Y0c5eWRITWdiMllnZEdobElHMXZaSFZzWlZ4dUlGeDBYSFJ5WlhSMWNtNGdiVzlrZFd4bExtVjRjRzl5ZEhNN1hHNGdYSFI5WEc1Y2JseHVJRngwTHk4Z1pYaHdiM05sSUhSb1pTQnRiMlIxYkdWeklHOWlhbVZqZENBb1gxOTNaV0p3WVdOclgyMXZaSFZzWlhOZlh5bGNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJTQTlJRzF2WkhWc1pYTTdYRzVjYmlCY2RDOHZJR1Y0Y0c5elpTQjBhR1VnYlc5a2RXeGxJR05oWTJobFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1NZ1BTQnBibk4wWVd4c1pXUk5iMlIxYkdWek8xeHVYRzRnWEhRdkx5QmtaV1pwYm1VZ1oyVjBkR1Z5SUdaMWJtTjBhVzl1SUdadmNpQm9ZWEp0YjI1NUlHVjRjRzl5ZEhOY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNBOUlHWjFibU4wYVc5dUtHVjRjRzl5ZEhNc0lHNWhiV1VzSUdkbGRIUmxjaWtnZTF4dUlGeDBYSFJwWmlnaFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZLR1Y0Y0c5eWRITXNJRzVoYldVcEtTQjdYRzRnWEhSY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUc1aGJXVXNJSHRjYmlCY2RGeDBYSFJjZEdOdmJtWnBaM1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdYSFJjZEZ4MFhIUmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJRngwWEhSY2RGeDBaMlYwT2lCblpYUjBaWEpjYmlCY2RGeDBYSFI5S1R0Y2JpQmNkRngwZlZ4dUlGeDBmVHRjYmx4dUlGeDBMeThnWjJWMFJHVm1ZWFZzZEVWNGNHOXlkQ0JtZFc1amRHbHZiaUJtYjNJZ1kyOXRjR0YwYVdKcGJHbDBlU0IzYVhSb0lHNXZiaTFvWVhKdGIyNTVJRzF2WkhWc1pYTmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJpQTlJR1oxYm1OMGFXOXVLRzF2WkhWc1pTa2dlMXh1SUZ4MFhIUjJZWElnWjJWMGRHVnlJRDBnYlc5a2RXeGxJQ1ltSUcxdlpIVnNaUzVmWDJWelRXOWtkV3hsSUQ5Y2JpQmNkRngwWEhSbWRXNWpkR2x2YmlCblpYUkVaV1poZFd4MEtDa2dleUJ5WlhSMWNtNGdiVzlrZFd4bFd5ZGtaV1poZFd4MEoxMDdJSDBnT2x4dUlGeDBYSFJjZEdaMWJtTjBhVzl1SUdkbGRFMXZaSFZzWlVWNGNHOXlkSE1vS1NCN0lISmxkSFZ5YmlCdGIyUjFiR1U3SUgwN1hHNGdYSFJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dVpDaG5aWFIwWlhJc0lDZGhKeXdnWjJWMGRHVnlLVHRjYmlCY2RGeDBjbVYwZFhKdUlHZGxkSFJsY2p0Y2JpQmNkSDA3WEc1Y2JpQmNkQzh2SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV2SUQwZ1puVnVZM1JwYjI0b2IySnFaV04wTENCd2NtOXdaWEowZVNrZ2V5QnlaWFIxY200Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOWlhbVZqZEN3Z2NISnZjR1Z5ZEhrcE95QjlPMXh1WEc0Z1hIUXZMeUJmWDNkbFluQmhZMnRmY0hWaWJHbGpYM0JoZEdoZlgxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1d0lEMGdYQ0pjSWp0Y2JseHVJRngwTHk4Z1RHOWhaQ0JsYm5SeWVTQnRiMlIxYkdVZ1lXNWtJSEpsZEhWeWJpQmxlSEJ2Y25SelhHNGdYSFJ5WlhSMWNtNGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWhmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5NZ1BTQTJLVHRjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QjNaV0p3WVdOckwySnZiM1J6ZEhKaGNDQTJORFF3TXpOall6bGxPV0l3WldWa00yTTBOaUlzSW1sdGNHOXlkQ0J6ZEhKcGJtZERiMjF3WVhKbElHWnliMjBnSnk0dmMzUnlhVzVuUTI5dGNHRnlaU2RjYm1sdGNHOXlkQ0J1ZFcxaVpYSkRiMjF3WVhKbElHWnliMjBnSnk0dmJuVnRZbVZ5UTI5dGNHRnlaU2RjYm1sdGNHOXlkQ0JrWVhSbFEyOXRjR0Z5WlNCbWNtOXRJQ2N1TDJSaGRHVkRiMjF3WVhKbEoxeHVhVzF3YjNKMElHRnljbUY1UTI5dGNHRnlaU0JtY205dElDY3VMMkZ5Y21GNVEyOXRjR0Z5WlNkY2JtbHRjRzl5ZENCdlltcGxZM1JEYjIxd1lYSmxJR1p5YjIwZ0p5NHZiMkpxWldOMFEyOXRjR0Z5WlNkY2JtbHRjRzl5ZENCcGN5Qm1jbTl0SUNjdUx5NHVMMmx6SjF4dVhHNW1kVzVqZEdsdmJpQmpiMjF3WVhKbEtHOXNaRTlpYWl3Z2JtVjNUMkpxS1Z4dWUxeHVJQ0FnSUdsbUlDaHZiR1JQWW1vZ1BUMDlJRzVsZDA5aWFpbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlEQTdYRzRnSUNBZ2FXWWdLRzlzWkU5aWFpQTlQU0J1ZFd4c0tWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z01UdGNiaUFnSUNCcFppQW9ibVYzVDJKcUlEMDlJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBdE1UdGNibHh1SUNBZ0lHTnZibk4wSUNCdmJHUlBZbXBVZVhCbElEMGdkSGx3Wlc5bUtHOXNaRTlpYWlrN1hHNGdJQ0FnWTI5dWMzUWdJRzVsZDA5aWFsUjVjR1VnUFNCMGVYQmxiMllvYm1WM1QySnFLVHRjYmx4dUlDQWdJR2xtSUNodmJHUlBZbXBVZVhCbElDRTlQU0J1WlhkUFltcFVlWEJsS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzNSeWFXNW5RMjl0Y0dGeVpTaHZiR1JQWW1wVWVYQmxMQ0J1WlhkUFltcFVlWEJsS1R0Y2JseHVJQ0FnSUdsbUlDaHZiR1JQWW1wVWVYQmxJRDA5UFNBblltOXZiR1ZoYmljcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXMWlaWEpEYjIxd1lYSmxLRTUxYldKbGNpaHZiR1JQWW1vcExDQk9kVzFpWlhJb2JtVjNUMkpxS1NrN1hHNGdJQ0FnYVdZZ0tHOXNaRTlpYWxSNWNHVWdQVDA5SUNkdWRXMWlaWEluS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5WdFltVnlRMjl0Y0dGeVpTaHZiR1JQWW1vc0lHNWxkMDlpYWlrN1hHNGdJQ0FnYVdZZ0tHOXNaRTlpYWxSNWNHVWdQVDA5SUNkemRISnBibWNuS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzNSeWFXNW5RMjl0Y0dGeVpTaHZiR1JQWW1vc0lHNWxkMDlpYWlrN1hHNWNiaUFnSUNCcFppQW9iMnhrVDJKcVZIbHdaU0FoUFQwZ0oyOWlhbVZqZENjcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBeE8xeHVYRzRnSUNBZ2FXWWdLR2x6S0c5c1pFOWlhaXdnUkdGMFpTa3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtZWFJsUTI5dGNHRnlaU2h2YkdSUFltb3NJRzVsZDA5aWFpazdYRzRnSUNBZ2FXWWdLR2x6S0c5c1pFOWlhaXdnUVhKeVlYa3BLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhsRGIyMXdZWEpsS0c5c1pFOWlhaXdnYm1WM1QySnFMR052YlhCaGNtVXBPMXh1SUNBZ0lHbG1JQ2hwY3lodmJHUlBZbW9zSUU5aWFtVmpkQ2twWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUkRiMjF3WVhKbEtHOXNaRTlpYWl3Z2JtVjNUMkpxTENCamIyMXdZWEpsS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUF3TzF4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMjl0Y0dGeVpUdGNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnTGk5c2FXSXZZMjl0Y0dGeVpTOWpiMjF3WVhKbExtcHpJaXdpTHk5b2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5S1lYWmhVMk55YVhCMEwxSmxabVZ5Wlc1alpTOUhiRzlpWVd4ZlQySnFaV04wY3k5VGRISnBibWN2Ykc5allXeGxRMjl0Y0dGeVpWeHVablZ1WTNScGIyNGdjM1J5YVc1blEyOXRjR0Z5WlNodmJHUldZV3gxWlN3Z2JtVjNWbUZzZFdVc0lHbHpRMkZ6WlZObGJuTnBkR2wyWlNrZ2UxeHVJQ0FnSUdselEyRnpaVk5sYm5OcGRHbDJaU0E5SUhSNWNHVnZaaUJwYzBOaGMyVlRaVzV6YVhScGRtVWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdhWE5EWVhObFUyVnVjMmwwYVhabElEb2dabUZzYzJVN1hHNWNiaUFnSUNCcFppQW9iMnhrVm1Gc2RXVWdQVDBnYm5Wc2JDQW1KaUJ1WlhkV1lXeDFaU0E5UFNCdWRXeHNLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdNRHRjYmlBZ0lDQnBaaUFvYjJ4a1ZtRnNkV1VnUFQwZ2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJREU3WEc0Z0lDQWdhV1lnS0c1bGQxWmhiSFZsSUQwOUlHNTFiR3dwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUF0TVR0Y2JseHVJQ0FnSUdsbUlDaHBjME5oYzJWVFpXNXphWFJwZG1VcElIdGNiaUFnSUNBZ0lDQWdiMnhrVm1Gc2RXVWdQU0JUZEhKcGJtY29iMnhrVm1Gc2RXVXBMblJ2VEc5allXeGxURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0FnSUc1bGQxWmhiSFZsSUQwZ1UzUnlhVzVuS0c1bGQxWmhiSFZsS1M1MGIweHZZMkZzWlV4dmQyVnlRMkZ6WlNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQlRkSEpwYm1jb2IyeGtWbUZzZFdVcExteHZZMkZzWlVOdmJYQmhjbVVvYm1WM1ZtRnNkV1VwTzF4dUlDQWdJR2xtSUNoeVpYTjFiSFFnUENBdE1TbGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdMVEU3WEc0Z0lDQWdaV3h6WlNCcFppQW9jbVZ6ZFd4MElENGdNU2xjYmlBZ0lDQWdJQ0FnY21WemRXeDBJRDBnTVR0Y2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhOMGNtbHVaME52YlhCaGNtVTdYRzVjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMMnhwWWk5amIyMXdZWEpsTDNOMGNtbHVaME52YlhCaGNtVXVhbk1pTENKY2JtWjFibU4wYVc5dUlHNTFiV0psY2tOdmJYQmhjbVVvYjJ4a1ZtRnNkV1VzSUc1bGQxWmhiSFZsS1NCN1hHNWNiaUFnSUNCcFppQW9hWE5PWVU0b2IyeGtWbUZzZFdVcElDWW1JR2x6VG1GT0tHNWxkMVpoYkhWbEtTbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlEQTdYRzRnSUNBZ2FXWWdLR2x6VG1GT0tHOXNaRlpoYkhWbEtTbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ2FXWWdLR2x6VG1GT0tHNWxkMVpoYkhWbEtTbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDMHhPMXh1WEc0Z0lDQWdhV1lnS0c5c1pGWmhiSFZsSUR3Z2JtVjNWbUZzZFdVcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBdE1UdGNiaUFnSUNCcFppQW9iMnhrVm1Gc2RXVWdQaUJ1WlhkV1lXeDFaU2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJREU3WEc0Z0lDQWdjbVYwZFhKdUlEQTdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUc1MWJXSmxja052YlhCaGNtVTdYRzVjYmx4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZJZ0x5OWNiaTh2SUM0dmJHbGlMMk52YlhCaGNtVXZiblZ0WW1WeVEyOXRjR0Z5WlM1cWN5SXNJbHh1Wm5WdVkzUnBiMjRnWkdGMFpVTnZiWEJoY21Vb2IyeGtWbUZzZFdVc0lHNWxkMVpoYkhWbEtTQjdYRzVjYmlBZ0lDQnBaaUFvYjJ4a1ZtRnNkV1VnUFQwOUlHNTFiR3dnSmlZZ2JtVjNWbUZzZFdVZ1BUMDlJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0FnSUdsbUlDaHZiR1JXWVd4MVpTQTlQVDBnYm5Wc2JDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ2FXWWdLRzVsZDFaaGJIVmxJRDA5UFNCdWRXeHNLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdMVEU3WEc1Y2JpQWdJQ0IyWVhJZ0lHOXNaRlJwYldVZ1BTQnZiR1JXWVd4MVpTNW5aWFJVYVcxbEtDazdYRzRnSUNBZ2RtRnlJQ0J1WlhkVWFXMWxJRDBnYm1WM1ZtRnNkV1V1WjJWMFZHbHRaU2dwTzF4dUlDQWdJR2xtSUNodmJHUlVhVzFsSUR3Z2JtVjNWR2x0WlNsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUMweE8xeHVJQ0FnSUdsbUlDaHZiR1JVYVcxbElENGdibVYzVkdsdFpTbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlERTdYRzVjYmlBZ0lDQnBaaUFvYVhOT1lVNG9iMnhrVkdsdFpTa2dKaVlnYVhOT1lVNG9ibVYzVkdsdFpTa3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lHbG1JQ2hwYzA1aFRpaHZiR1JVYVcxbEtTbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ2FXWWdLR2x6VG1GT0tHNWxkMVJwYldVcEtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0xURTdYRzVjYmlBZ0lDQnlaWFIxY200Z01EdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWkdGMFpVTnZiWEJoY21VN1hHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YkdsaUwyTnZiWEJoY21VdlpHRjBaVU52YlhCaGNtVXVhbk1pTENKcGJYQnZjblFnWTI5dGNHRnlaU0JtY205dElDY3VMMk52YlhCaGNtVW5PMXh1WEc1bWRXNWpkR2x2YmlCaGNuSmhlVU52YlhCaGNtVW9iMnhrVDJKcUxDQnVaWGRQWW1vcFhHNTdYRzRnSUNBZ2FXWWdLRzlzWkU5aWFpQTlQVDBnYm1WM1QySnFLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdNRHRjYmlBZ0lDQnBaaUFvYjJ4a1QySnFJRDA5SUc1MWJHd3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQXhPMXh1SUNBZ0lHbG1JQ2h1WlhkUFltb2dQVDBnYm5Wc2JDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDMHhPMXh1WEc0Z0lDQWdiR1YwSUdOdmJYQmhjbWx6YjI1V1lXeDFaVHRjYmlBZ0lDQjJZWElnSUc5c1pFOWlha3hsYm1kMGFDQTlJRzlzWkU5aWFpNXNaVzVuZEdnN1hHNGdJQ0FnZG1GeUlDQnVaWGRQWW1wTVpXNW5kR2dnUFNCdVpYZFBZbW91YkdWdVozUm9PMXh1SUNBZ0lHbG1JQ2h2YkdSUFltcE1aVzVuZEdnZ1BDQnVaWGRQWW1wTVpXNW5kR2dwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUF0TVR0Y2JpQWdJQ0JwWmlBb2IyeGtUMkpxVEdWdVozUm9JRDRnYm1WM1QySnFUR1Z1WjNSb0tWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z01UdGNibHh1SUNBZ0lHWnZjaUFvZG1GeUlDQnBJRDBnTURzZ2FTQThJRzlzWkU5aWFreGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUM4dmNtVmpkWEp6YVhabElHTnZiWEJoY21semIyNGdiMllnWVhKeVlYa2daV3hsYldWdWRITmNiaUFnSUNBZ0lDQWdZMjl0Y0dGeWFYTnZibFpoYkhWbElEMGdZMjl0Y0dGeVpTaHZiR1JQWW1wYmFWMHNJRzVsZDA5aWFsdHBYU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjF3WVhKcGMyOXVWbUZzZFdVZ0lUMGdNQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyMXdZWEpwYzI5dVZtRnNkV1U3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlBd08xeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWVhKeVlYbERiMjF3WVhKbE8xeHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUF1TDJ4cFlpOWpiMjF3WVhKbEwyRnljbUY1UTI5dGNHRnlaUzVxY3lJc0ltbHRjRzl5ZENCamIyMXdZWEpsSUdaeWIyMGdKeTR2WTI5dGNHRnlaU2M3WEc1Y2JtWjFibU4wYVc5dUlHOWlhbVZqZEVOdmJYQmhjbVVvYjJ4a1QySnFMQ0J1WlhkUFltb3BYRzU3WEc0Z0lDQWdhV1lnS0c5c1pFOWlhaUE5UFQwZ2JtVjNUMkpxS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JpQWdJQ0JwWmlBb2IyeGtUMkpxSUQwOUlHNTFiR3dwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUF4TzF4dUlDQWdJR2xtSUNodVpYZFBZbW9nUFQwZ2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQzB4TzF4dVhHNWNiaUFnSUNCc1pYUWdjSEp2Y0R0Y2JpQWdJQ0JtYjNJZ0tIQnliM0FnYVc0Z2IyeGtUMkpxS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnVaWGRQWW1vdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0hKdmNDa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElHTnZiWEJoY21semIyNVdZV3gxWlR0Y2JpQWdJQ0JtYjNJZ0tIQnliM0FnYVc0Z2JtVjNUMkpxS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnZiR1JQWW1vdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0hKdmNDa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTVR0Y2JpQWdJQ0FnSUNBZ0x5OXlaV04xY25OcGRtVWdZMjl0Y0dGeWFYTnZiaUJ2WmlCdlltcGxZM1FnY0hKdmNHVnlkSGxjYmlBZ0lDQWdJQ0FnWTI5dGNHRnlhWE52YmxaaGJIVmxJRDBnWTI5dGNHRnlaU2h2YkdSUFltcGJjSEp2Y0Ywc0lHNWxkMDlpYWx0d2NtOXdYU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjF3WVhKcGMyOXVWbUZzZFdVZ0lUMDlJREFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXRjR0Z5YVhOdmJsWmhiSFZsTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z01EdGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUc5aWFtVmpkRU52YlhCaGNtVTdYRzVjYmx4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZJZ0x5OWNiaTh2SUM0dmJHbGlMMk52YlhCaGNtVXZiMkpxWldOMFEyOXRjR0Z5WlM1cWN5SXNJbWx0Y0c5eWRDQnpkSEpwYm1kRGIyMXdZWEpsSUdaeWIyMGdKeTR2WTI5dGNHRnlaUzl6ZEhKcGJtZERiMjF3WVhKbEoxeHVhVzF3YjNKMElHNTFiV0psY2tOdmJYQmhjbVVnWm5KdmJTQW5MaTlqYjIxd1lYSmxMMjUxYldKbGNrTnZiWEJoY21VblhHNXBiWEJ2Y25RZ1pHRjBaVU52YlhCaGNtVWdabkp2YlNBbkxpOWpiMjF3WVhKbEwyUmhkR1ZEYjIxd1lYSmxKMXh1YVcxd2IzSjBJR0Z5Y21GNVEyOXRjR0Z5WlNCbWNtOXRJQ2N1TDJOdmJYQmhjbVV2WVhKeVlYbERiMjF3WVhKbEoxeHVhVzF3YjNKMElHOWlhbVZqZEVOdmJYQmhjbVVnWm5KdmJTQW5MaTlqYjIxd1lYSmxMMjlpYW1WamRFTnZiWEJoY21VblhHNXBiWEJ2Y25RZ1kyOXRjR0Z5WlNCbWNtOXRJQ2N1TDJOdmJYQmhjbVV2WTI5dGNHRnlaU2RjYm1sdGNHOXlkQ0JrYVdabUlHWnliMjBnSnk0dlpHbG1aaWRjYmx4dVpYaHdiM0owSUh0Y2JpQWdJQ0JrYVdabUlHRnpJR1JsWm1GMWJIUXNYRzRnSUNBZ1kyOXRjR0Z5WlN4Y2JpQWdJQ0J6ZEhKcGJtZERiMjF3WVhKbExGeHVJQ0FnSUc1MWJXSmxja052YlhCaGNtVXNYRzRnSUNBZ1pHRjBaVU52YlhCaGNtVXNYRzRnSUNBZ1lYSnlZWGxEYjIxd1lYSmxMRnh1SUNBZ0lHOWlhbVZqZEVOdmJYQmhjbVZjYm4xY2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTlzYVdJdmFXNWtaWGd1YW5NaUxDSm1kVzVqZEdsdmJpQnBjeWh2WW1vc0lGUjVjR1VwSUh0Y2JpQWdJQ0JwWmlBb2IySnFJRDA5SUc1MWJHd2dmSHdnYjJKcUlEMDlJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvYjJKcUlHbHVjM1JoYm1ObGIyWWdWSGx3WlNsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2FXWWdLRlI1Y0dVZ1BUMDlJRTlpYW1WamRDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltS0c5aWFpa2dQVDA5SUNkemRISnBibWNuS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVkhsd1pTQTlQVDBnVTNSeWFXNW5PMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWW9iMkpxS1NBOVBUMGdKMjUxYldKbGNpY3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlVlWEJsSUQwOVBTQk9kVzFpWlhJN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2Wmlodlltb3BJRDA5UFNBblltOXZiR1ZoYmljcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCVWVYQmxJRDA5UFNCQ2IyOXNaV0Z1TzF4dUlDQWdJR2xtSUNoVWVYQmxJRDA5UFNCQmNuSmhlU2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRUZ5Y21GNUxtbHpRWEp5WVhrb2IySnFLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdhWE03WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklDNHZiR2xpTDJsekxtcHpJaXdpYVcxd2IzSjBJR052YlhCaGNtVWdabkp2YlNBbkxpOWpiMjF3WVhKbEwyTnZiWEJoY21Vbk8xeHVYRzVtZFc1amRHbHZiaUJrYVdabUtHOXNaRlpoYkhWbExDQnVaWGRXWVd4MVpTbDdYRzVjZEdOdmJuTjBJR052YlhCaGNtbHpiMjVXWVd4MVpTQTlJQ0JqYjIxd1lYSmxLRzlzWkZaaGJIVmxMQ0J1WlhkV1lXeDFaU2s3WEc1Y2JseDBhV1lvWTI5dGNHRnlhWE52YmxaaGJIVmxJRDA5UFNBd0tYdGNibHgwWEhSdVpYZFdZV3gxWlNBOUlIVnVaR1ZtYVc1bFpEdGNibHgwZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSHRjYmx4MFhIUndjbVYyT2lCdmJHUldZV3gxWlN4Y2JseDBYSFJqZFhKeVpXNTBPaUJ1WlhkV1lXeDFaVnh1WEhSOU8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JrYVdabU8xeHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUF1TDJ4cFlpOWthV1ptTG1weklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9ub2RlX21vZHVsZXMvZGlmZi9saWIvZGlmZi5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsImltcG9ydCBGdW5jdGlvbnMgZnJvbSAnZnVuY3Rpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcmVJRCBleHRlbmRzIEZ1bmN0aW9uc3tcblx0Y29uc3RydWN0b3IoaWQsIGxpc3RlbmVyc0V4ZWN1dGVkTm90aWZpZXIpe1xuXHRcdHN1cGVyKGxpc3RlbmVyc0V4ZWN1dGVkTm90aWZpZXIpO1xuXHRcdGlmKGlkID09PSB1bmRlZmluZWQgfHwgaWQgPT09IG51bGwpe1xuXHRcdFx0dGhpcy5pZCA9ICBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG5cdFx0fSBlbHNle1xuXHRcdFx0dGhpcy5pZCA9IGlkO1xuXHRcdH1cblx0XHR0aGlzLnBhcmVudElkID0gbnVsbDtcblx0XHR0aGlzLmxpbmtlZElkcyA9IG51bGw7XG5cblx0XHR0aGlzLmxpbmtQYXJlbnRJZCA9IHRoaXMubGlua1BhcmVudElkLmJpbmQodGhpcyk7XG5cdFx0dGhpcy51bkxpbmtQYXJlbnRJZCA9IHRoaXMudW5MaW5rUGFyZW50SWQuYmluZCh0aGlzKTtcblx0XHR0aGlzLmxpbmtJZCA9IHRoaXMubGlua0lkLmJpbmQodGhpcyk7XG5cdFx0dGhpcy51bkxpbmtJZCA9IHRoaXMudW5MaW5rSWQuYmluZCh0aGlzKTtcblx0XHR0aGlzLmFzSnNvbiA9IHRoaXMuYXNKc29uLmJpbmQodGhpcyk7XG5cdH1cblxuXHRsaW5rUGFyZW50SWQoaWQpe1xuXHRcdHRoaXMucGFyZW50SWQgPSBpZDtcblx0fTtcblxuXHR1bkxpbmtQYXJlbnRJZCgpe1xuXHRcdHRoaXMucGFyZW50SWQgPSBudWxsO1xuXHR9O1xuXG5cdGxpbmtJZChpZCl7XG5cdFx0aWYoIXRoaXMubGlua2VkSWRzKXtcblx0XHRcdHRoaXMubGlua2VkSWRzID0gW11cblx0XHR9XG5cblx0XHRpZih0aGlzLmxpbmtlZElkcy5pbmRleE9mKGlkKSA+IC0xKXtcblx0XHRcdHRoaXMubGlua2VkSWRzLnB1c2goaWQpXG5cdFx0fVxuXHR9O1xuXG5cblx0dW5MaW5rSWQoaWQpe1xuXG5cdH07XG5cblx0YXNKc29uKCl7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGlkOiB0aGlzLmlkLFxuXHRcdFx0cGFyZW50SWQ6IHRoaXMucGFyZW50SWQsXG5cdFx0XHRsaW5rZWRJZHM6IHRoaXMubGlua2VkSWRzXG5cdFx0fTtcblx0fTtcbn1cblxuXG5cblxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvU3RvcmVJRC5qcyIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiZnVuY3Rpb25zXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImZ1bmN0aW9uc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJmdW5jdGlvbnNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHRydWUpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcInRpY2tlclwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ0aWNrZXJcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1widGlja2VyXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1RpY2tFbnRyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfVGlja0VudHJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RpY2tFbnRyeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9UaWNrRW50cnkyLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX01hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX01hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIHRvRG86IHN1cHBvcnQgYm90aCBjYWxsYmFjayBhbmQgcHJvbWlzZVxudmFyIFRpY2tFbnRyeSA9XG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IC0gVGhlIFwidGhpc1wiIGFyZ3VtZW50IGZvciB0aGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lci5cbiAqL1xuZnVuY3Rpb24gVGlja0VudHJ5KGNvbnRleHQsIGxpc3RlbmVyKSB7XG5cdHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcblx0dmFyIHByaW9yaXR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwO1xuXG5cdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaWNrRW50cnkpO1xuXG5cdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG5cdHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcblx0dGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuXHR0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG59O1xuXG4vKi0tLS0gUHVibGljfFByb3RvdHlwZSBNZXRob2RzIC0tLSovXG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRpY2tFbnRyeTtcblRpY2tFbnRyeS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5jb250ZXh0ID0gbnVsbDtcblx0dGhpcy5saXN0ZW5lciA9IG51bGw7XG5cdHRoaXMuY2FsbGJhY2sgPSBudWxsO1xuXHR0aGlzLnByaW9yaXR5ID0gbnVsbDtcbn07XG5cblRpY2tFbnRyeS5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uICgpIHtcblx0X01hbmFnZXIyLmRlZmF1bHQuYWRkKHRoaXMpO1xufTtcblxuVGlja0VudHJ5LnByb3RvdHlwZS5nZXRNYXhQcmlvcml0eSA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIF9NYW5hZ2VyMi5kZWZhdWx0LmdldE1heFByaW9yaXR5KCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gTmFOO1xudmFyIHByaW9yaXR5RW50cmllcyA9IFtudWxsLCBudWxsLCBudWxsLCBudWxsXTtcblxuZnVuY3Rpb24gb25UaWNrKCkge1xuXHRmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgcHJpb3JpdHlFbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdHZhciB0aWNrRW50cmllcyA9IHByaW9yaXR5RW50cmllc1tpbmRleF07XG5cdFx0aWYgKHRpY2tFbnRyaWVzICYmIHRpY2tFbnRyaWVzLmxlbmd0aCA+IDApIHtcblx0XHRcdGV4ZWN1dGVUaWNrRW50cmllcyh0aWNrRW50cmllcyk7XG5cdFx0XHQvL0NsZWFyIHRoZW0gb25jZSBleGVjdXRlZFxuXHRcdFx0cHJpb3JpdHlFbnRyaWVzW2luZGV4XSA9IG51bGw7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVUaWNrRW50cmllcyh0aWNrRW50cmllcykge1xuXHQvLyBpbXBvcnRhbnQgdG8gdXNlIGZvci1sb29wXG5cdC8vIHRpY2tFbnRyaWVzIGdyb3dzIGR5bmFtaWNhbGx5IGJ5IG9uZSBvZiBpdHMgZW50cnlcblx0Ly8gZm9yIGV4YW1wbGU6IGxldCBzYXkgd2UgaGF2ZSBvbmUgZW50cnksIGFuZCBleGVjdXRpbmcgdGhhdCBlbnRyeSBtaWdodCBhZGRzIGFub3RoZXIgZW50cnlcblx0Ly8gd2l0aCBtYXAgZnVuY3Rpb24gd2UgY2FudCBleGVjdXRlIGR5bmFtaWNhbGx5IGdyb3dpbmcgZW50cmllcy5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aWNrRW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0aWNrRW50cnkgPSB0aWNrRW50cmllc1tpXTtcblx0XHR0aWNrRW50cnkubGlzdGVuZXIuY2FsbCh0aWNrRW50cnkuY29udGV4dCB8fCB0aWNrRW50cnkubGlzdGVuZXJbJ3RoaXMnXSk7XG5cdFx0aWYgKHRpY2tFbnRyeS5jYWxsYmFjaykge1xuXHRcdFx0dGlja0VudHJ5LmNhbGxiYWNrLmNhbGwodGlja0VudHJ5LmNhbGxiYWNrWyd0aGlzJ10pO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBpc0FkZGVkQWxyZWFkeShlbnRyeSwgdGlja0VudHJpZXMpIHtcblx0Ly8gaW1wb3J0YW50IHRvIHVzZSBmb3ItbG9vcFxuXHQvLyB0aWNrRW50cmllcyBncm93cyBkeW5hbWljYWxseSBieSBvbmUgb2YgaXRzIGVudHJ5XG5cdC8vIGZvciBleGFtcGxlOiBsZXQgc2F5IHdlIGhhdmUgb25lIGVudHJ5LCBhbmQgZXhlY3V0aW5nIHRoYXQgZW50cnkgbWlnaHQgYWRkcyBhbm90aGVyIGVudHJ5XG5cdC8vIHdpdGggbWFwIGZ1bmN0aW9uIHdlIGNhbnQgZXhlY3V0ZSBkeW5hbWljYWxseSBncm93aW5nIGVudHJpZXMuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdGlja0VudHJpZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGlja0VudHJ5ID0gdGlja0VudHJpZXNbaV07XG5cdFx0aWYgKGVudHJ5LmNvbnRleHQgPT09IHRpY2tFbnRyeS5jb250ZXh0ICYmIGVudHJ5Lmxpc3RlbmVyID09PSB0aWNrRW50cnkubGlzdGVuZXIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RBbmltYXRpb25GcmFtZUNhbGxiYWNrKCkge1xuXHRvblRpY2soKTtcblx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlcXVlc3RBbmltYXRpb25GcmFtZUNhbGxiYWNrKTtcbn1cblxudmFyIFRpY2tNYW5hZ2VyID0gZnVuY3Rpb24gVGlja01hbmFnZXIoKSB7XG5cdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaWNrTWFuYWdlcik7XG5cblx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSAwOyAvLyBmb3IgV2luZG93cyBFbnZcblx0dGhpcy5zdGFydCgpO1xufTtcblxuVGlja01hbmFnZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0aWNrRW50cnkpIHtcblx0dmFyIHByaW9yaXR5ID0gdGlja0VudHJ5LnByaW9yaXR5LFxuXHQgICAgY2FsbGJhY2sgPSB0aWNrRW50cnkuY2FsbGJhY2s7XG5cblx0aWYgKCFwcmlvcml0eUVudHJpZXNbcHJpb3JpdHldKSB7XG5cdFx0cHJpb3JpdHlFbnRyaWVzW3ByaW9yaXR5XSA9IFtdO1xuXHRcdHZhciBfdGlja0VudHJpZXMgPSBwcmlvcml0eUVudHJpZXNbcHJpb3JpdHldO1xuXHRcdF90aWNrRW50cmllcy5wdXNoKHRpY2tFbnRyeSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciB0aWNrRW50cmllcyA9IHByaW9yaXR5RW50cmllc1twcmlvcml0eV07XG5cdGlmIChpc0FkZGVkQWxyZWFkeSh0aWNrRW50cnksIHRpY2tFbnRyaWVzKSkge1xuXHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrKHRydWUpO1xuXHR9IGVsc2Uge1xuXHRcdHRpY2tFbnRyaWVzLnB1c2godGlja0VudHJ5KTtcblx0fVxufTtcblxuLy8gVG9kbzogU3VwcG9ydCBmb3IgTm9kZUpTIFxuVGlja01hbmFnZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRpZiAod2luZG93KSB7XG5cdFx0Ly8gd2lsbCByZWNlaXZlcyB0aW1lc3RhbXAgYXMgYXJndW1lbnRcblx0XHQvL3RvZG86IExlYXJuOiAgdGhlIHB1cnBvc2Ugb2YgdGltZXN0YW1wXG5cdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlcXVlc3RBbmltYXRpb25GcmFtZUNhbGxiYWNrKTtcblx0fVxufTtcblxuVGlja01hbmFnZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICh3aW5kb3cpIHtcblx0XHR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpO1xuXHR9XG59O1xuXG5UaWNrTWFuYWdlci5wcm90b3R5cGUuZ2V0TWF4UHJpb3JpdHkgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBwcmlvcml0eUVudHJpZXMubGVuZ3RoIC0gMTtcbn07XG5cbnZhciBzaW5nbGV0b25JbnN0YW5jZSA9IG5ldyBUaWNrTWFuYWdlcigpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzaW5nbGV0b25JbnN0YW5jZTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpZDJWaWNHRmphem92THk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NBd1pXTTVNRGxtWkRGalptVXpNVGxtWmpVMU5TSXNJbmRsWW5CaFkyczZMeTh2TGk5c2FXSXZhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmJHbGlMMVJwWTJ0RmJuUnllUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTlzYVdJdlRXRnVZV2RsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpVYVdOclJXNTBjbmtpTENKamIyNTBaWGgwSWl3aWJHbHpkR1Z1WlhJaUxDSmpZV3hzWW1GamF5SXNJbkJ5YVc5eWFYUjVJaXdpY0hKdmRHOTBlWEJsSWl3aVpHbHpjRzl6WlNJc0ltVjRaV04xZEdVaUxDSmhaR1FpTENKblpYUk5ZWGhRY21sdmNtbDBlU0lzSW5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpVbGtJaXdpVG1GT0lpd2ljSEpwYjNKcGRIbEZiblJ5YVdWeklpd2liMjVVYVdOcklpd2lhVzVrWlhnaUxDSnNaVzVuZEdnaUxDSjBhV05yUlc1MGNtbGxjeUlzSW1WNFpXTjFkR1ZVYVdOclJXNTBjbWxsY3lJc0lta2lMQ0owYVdOclJXNTBjbmtpTENKallXeHNJaXdpYVhOQlpHUmxaRUZzY21WaFpIa2lMQ0psYm5SeWVTSXNJbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlVOaGJHeGlZV05ySWl3aWQybHVaRzkzSWl3aWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxJaXdpVkdsamEwMWhibUZuWlhJaUxDSnpkR0Z5ZENJc0luQjFjMmdpTENKemRHOXdJaXdpWTJGdVkyVnNRVzVwYldGMGFXOXVSbkpoYldVaUxDSnphVzVuYkdWMGIyNUpibk4wWVc1alpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXp0QlFVTkVMRTg3UVVOV1FUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN08wRkJSMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1lVRkJTenRCUVVOTU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2JVTkJRVEpDTERCQ1FVRXdRaXhGUVVGRk8wRkJRM1pFTEhsRFFVRnBReXhsUVVGbE8wRkJRMmhFTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxEaEVRVUZ6UkN3clJFRkJLMFE3TzBGQlJYSklPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdPenM3T3pzN096czdPenM3UVVNM1JFRTdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CUVRzN096czdPenM3UVVGRlFUdEpRVU54UWtFc1V6dEJRVVZ3UWpzN096dEJRVWxCTEcxQ1FVRlpReXhQUVVGYUxFVkJRWEZDUXl4UlFVRnlRaXhGUVVOQk8wRkJRVUVzUzBGRUswSkRMRkZCUXk5Q0xIVkZRVVF3UXl4SlFVTXhRenRCUVVGQkxFdEJSR2RFUXl4UlFVTm9SQ3gxUlVGRU1rUXNRMEZETTBRN08wRkJRVUU3TzBGQlEwTXNUVUZCUzBnc1QwRkJUQ3hIUVVGbFFTeFBRVUZtTzBGQlEwRXNUVUZCUzBNc1VVRkJUQ3hIUVVGblFrRXNVVUZCYUVJN1FVRkRRU3hOUVVGTFF5eFJRVUZNTEVkQlFXZENRU3hSUVVGb1FqdEJRVU5CTEUxQlFVdERMRkZCUVV3c1IwRkJaMEpCTEZGQlFXaENPMEZCUTBFc1F6czdRVUZKUmpzN2EwSkJhRUp4UWtvc1V6dEJRV3RDY2tKQkxGVkJRVlZMTEZOQlFWWXNRMEZCYjBKRExFOUJRWEJDTEVkQlFUaENMRmxCUVZVN1FVRkRka01zVFVGQlMwd3NUMEZCVEN4SFFVRmxMRWxCUVdZN1FVRkRRU3hOUVVGTFF5eFJRVUZNTEVkQlFXZENMRWxCUVdoQ08wRkJRMEVzVFVGQlMwTXNVVUZCVEN4SFFVRm5RaXhKUVVGb1FqdEJRVU5CTEUxQlFVdERMRkZCUVV3c1IwRkJaMElzU1VGQmFFSTdRVUZEUVN4RFFVeEVPenRCUVU5QlNpeFZRVUZWU3l4VFFVRldMRU5CUVc5Q1JTeFBRVUZ3UWl4SFFVRTRRaXhaUVVGVk8wRkJRM1pETEcxQ1FVRlJReXhIUVVGU0xFTkJRVmtzU1VGQldqdEJRVU5CTEVOQlJrUTdPMEZCU1VGU0xGVkJRVlZMTEZOQlFWWXNRMEZCYjBKSkxHTkJRWEJDTEVkQlFYRkRMRmxCUVZVN1FVRkRPVU1zVVVGQlR5eHJRa0ZCVVVFc1kwRkJVaXhGUVVGUU8wRkJRMEVzUTBGR1JDeERPenM3T3pzN096czdPenM3T3pzN1FVTXZRa0VzU1VGQlNVTXNNRUpCUVRCQ1F5eEhRVUU1UWp0QlFVTkJMRWxCUVUxRExHdENRVUZyUWl4RFFVRkRMRWxCUVVRc1JVRkJUeXhKUVVGUUxFVkJRV0VzU1VGQllpeEZRVUZ0UWl4SlFVRnVRaXhEUVVGNFFqczdRVUZGUVN4VFFVRlRReXhOUVVGVUxFZEJRV2xDTzBGQlEyaENMRTFCUVVrc1NVRkJTVU1zVVVGQlVTeERRVUZvUWl4RlFVRnZRa0VzVVVGQlVVWXNaMEpCUVdkQ1J5eE5RVUUxUXl4RlFVRnZSRVFzVDBGQmNFUXNSVUZCTkVRN1FVRkRNMFFzVFVGQlNVVXNZMEZCWTBvc1owSkJRV2RDUlN4TFFVRm9RaXhEUVVGc1FqdEJRVU5CTEUxQlFVZEZMR1ZCUVdWQkxGbEJRVmxFTEUxQlFWb3NSMEZCY1VJc1EwRkJka01zUlVGQk1FTTdRVUZEZWtORkxITkNRVUZ0UWtRc1YwRkJia0k3UVVGRFFUdEJRVU5CU2l4dFFrRkJaMEpGTEV0QlFXaENMRWxCUVhsQ0xFbEJRWHBDTzBGQlEwRTdRVUZEUkR0QlFVTkVPenRCUVVWRUxGTkJRVk5ITEd0Q1FVRlVMRU5CUVRSQ1JDeFhRVUUxUWl4RlFVRjNRenRCUVVOMlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTFCUVVrc1NVRkJTVVVzU1VGQlNTeERRVUZhTEVWQlFXVkJMRWxCUVVsR0xGbEJRVmxFTEUxQlFTOUNMRVZCUVhWRFJ5eEhRVUYyUXl4RlFVRXlRenRCUVVNeFF5eE5RVUZOUXl4WlFVRlpTQ3haUVVGWlJTeERRVUZhTEVOQlFXeENPMEZCUTBGRExGbEJRVlZxUWl4UlFVRldMRU5CUVcxQ2EwSXNTVUZCYmtJc1EwRkJkMEpFTEZWQlFWVnNRaXhQUVVGV0xFbEJRWEZDYTBJc1ZVRkJWV3BDTEZGQlFWWXNRMEZCYlVJc1RVRkJia0lzUTBGQk4wTTdRVUZEUVN4TlFVRkphVUlzVlVGQlZXaENMRkZCUVdRc1JVRkJkMEk3UVVGRGRrSm5RaXhoUVVGVmFFSXNVVUZCVml4RFFVRnRRbWxDTEVsQlFXNUNMRU5CUVhkQ1JDeFZRVUZWYUVJc1VVRkJWaXhEUVVGdFFpeE5RVUZ1UWl4RFFVRjRRanRCUVVOQk8wRkJRMFE3UVVGRFJEczdRVUZGUkN4VFFVRlRhMElzWTBGQlZDeERRVUYzUWtNc1MwRkJlRUlzUlVGQk9FSk9MRmRCUVRsQ0xFVkJRVEJETzBGQlEzcERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlNTeEpRVUZKUlN4SlFVRkpMRU5CUVZvc1JVRkJaVUVzU1VGQlNVWXNXVUZCV1VRc1RVRkJMMElzUlVGQmRVTkhMRWRCUVhaRExFVkJRVEpETzBGQlF6RkRMRTFCUVUxRExGbEJRVmxJTEZsQlFWbEZMRU5CUVZvc1EwRkJiRUk3UVVGRFFTeE5RVUZIU1N4TlFVRk5ja0lzVDBGQlRpeExRVUZyUW10Q0xGVkJRVlZzUWl4UFFVRTFRaXhKUVVGMVEzRkNMRTFCUVUxd1FpeFJRVUZPTEV0QlFXMUNhVUlzVlVGQlZXcENMRkZCUVhaRkxFVkJRV2RHTzBGQlF5OUZMRlZCUVU4c1NVRkJVRHRCUVVOQk8wRkJRMFE3UVVGRFJDeFJRVUZQTEV0QlFWQTdRVUZEUVRzN1FVRkZSQ3hUUVVGVGNVSXNOa0pCUVZRc1IwRkJkME03UVVGRGRrTldPMEZCUTBGSUxESkNRVUV3UW1Nc1QwRkJUME1zY1VKQlFWQXNRMEZCTmtKR0xEWkNRVUUzUWl4RFFVRXhRanRCUVVOQk96dEpRVVZMUnl4WExFZEJRMHdzZFVKQlFXRTdRVUZCUVRzN1FVRkRUbWhDTERKQ1FVRXdRaXhEUVVFeFFpeERRVVJOTEVOQlEzVkNPMEZCUXpkQ0xFMUJRVXRwUWl4TFFVRk1PMEZCUTA0c1F6czdRVUZKUmtRc1dVRkJXWEpDTEZOQlFWb3NRMEZCYzBKSExFZEJRWFJDTEVkQlFUUkNMRlZCUVZWWExGTkJRVllzUlVGQmNVSTdRVUZCUVN4TFFVTjRRMllzVVVGRWQwTXNSMEZEYWtKbExGTkJSR2xDTEVOQlEzaERaaXhSUVVSM1F6dEJRVUZCTEV0QlF6bENSQ3hSUVVRNFFpeEhRVU5xUW1kQ0xGTkJSR2xDTEVOQlF6bENhRUlzVVVGRU9FSTdPMEZCUldoRUxFdEJRVWNzUTBGQlExTXNaMEpCUVdkQ1VpeFJRVUZvUWl4RFFVRktMRVZCUVRoQ08wRkJRemRDVVN4clFrRkJaMEpTTEZGQlFXaENMRWxCUVRSQ0xFVkJRVFZDTzBGQlEwRXNUVUZCVFZrc1pVRkJZMG9zWjBKQlFXZENVaXhSUVVGb1FpeERRVUZ3UWp0QlFVTkJXU3hsUVVGWldTeEpRVUZhTEVOQlFXbENWQ3hUUVVGcVFqdEJRVU5CTzBGQlEwRTdRVUZEUkN4TFFVRk5TQ3hqUVVGalNpeG5Ra0ZCWjBKU0xGRkJRV2hDTEVOQlFYQkNPMEZCUTBFc1MwRkJSMmxDTEdWQlFXVkdMRk5CUVdZc1JVRkJlVUpJTEZkQlFYcENMRU5CUVVnc1JVRkJlVU03UVVGRGVFTmlMR05CUVZsQkxGTkJRVk1zU1VGQlZDeERRVUZhTzBGQlEwRXNSVUZHUkN4TlFVVlBPMEZCUTA1aExHTkJRVmxaTEVsQlFWb3NRMEZCYVVKVUxGTkJRV3BDTzBGQlEwRTdRVUZEUkN4RFFXUkVPenRCUVdsQ1FUdEJRVU5CVHl4WlFVRlpja0lzVTBGQldpeERRVUZ6UW5OQ0xFdEJRWFJDTEVkQlFUaENMRmxCUVZrN1FVRkRla01zUzBGQlIwZ3NUVUZCU0N4RlFVRlZPMEZCUTFRN1FVRkRRVHRCUVVOQlpDdzBRa0ZCTUVKakxFOUJRVTlETEhGQ1FVRlFMRU5CUVRaQ1JpdzJRa0ZCTjBJc1EwRkJNVUk3UVVGRFFUdEJRVU5FTEVOQlRrUTdPMEZCVTBGSExGbEJRVmx5UWl4VFFVRmFMRU5CUVhOQ2QwSXNTVUZCZEVJc1IwRkJOa0lzV1VGQldUdEJRVU40UXl4TFFVRkhUQ3hOUVVGSUxFVkJRVlU3UVVGRFZFRXNVMEZCVDAwc2IwSkJRVkFzUTBGQk5FSndRaXgxUWtGQk5VSTdRVUZEUVR0QlFVTkVMRU5CU2tRN08wRkJUVUZuUWl4WlFVRlpja0lzVTBGQldpeERRVUZ6UWtrc1kwRkJkRUlzUjBGQmRVTXNXVUZCV1R0QlFVTnNSQ3hSUVVGUFJ5eG5Ra0ZCWjBKSExFMUJRV2hDTEVkQlFYbENMRU5CUVdoRE8wRkJRMEVzUTBGR1JEczdRVUZKUVN4SlFVRk5aMElzYjBKQlFXOUNMRWxCUVVsTUxGZEJRVW9zUlVGQk1VSTdPMnRDUVVWbFN5eHBRaUlzSW1acGJHVWlPaUpzYVdJdmRHbGphMlZ5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVJSGRsWW5CaFkydFZibWwyWlhKellXeE5iMlIxYkdWRVpXWnBibWwwYVc5dUtISnZiM1FzSUdaaFkzUnZjbmtwSUh0Y2JseDBhV1lvZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCdGIyUjFiR1VnUFQwOUlDZHZZbXBsWTNRbktWeHVYSFJjZEcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm1GamRHOXllU2dwTzF4dVhIUmxiSE5sSUdsbUtIUjVjR1Z2WmlCa1pXWnBibVVnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnWkdWbWFXNWxMbUZ0WkNsY2JseDBYSFJrWldacGJtVW9YQ0owYVdOclpYSmNJaXdnVzEwc0lHWmhZM1J2Y25rcE8xeHVYSFJsYkhObElHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeWxjYmx4MFhIUmxlSEJ2Y25Selcxd2lkR2xqYTJWeVhDSmRJRDBnWm1GamRHOXllU2dwTzF4dVhIUmxiSE5sWEc1Y2RGeDBjbTl2ZEZ0Y0luUnBZMnRsY2x3aVhTQTlJR1poWTNSdmNua29LVHRjYm4wcEtIUm9hWE1zSUdaMWJtTjBhVzl1S0NrZ2UxeHVjbVYwZFhKdUlGeHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUIzWldKd1lXTnJMM1Z1YVhabGNuTmhiRTF2WkhWc1pVUmxabWx1YVhScGIyNGlMQ0lnWEhRdkx5QlVhR1VnYlc5a2RXeGxJR05oWTJobFhHNGdYSFIyWVhJZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsY3lBOUlIdDlPMXh1WEc0Z1hIUXZMeUJVYUdVZ2NtVnhkV2x5WlNCbWRXNWpkR2x2Ymx4dUlGeDBablZ1WTNScGIyNGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWh0YjJSMWJHVkpaQ2tnZTF4dVhHNGdYSFJjZEM4dklFTm9aV05ySUdsbUlHMXZaSFZzWlNCcGN5QnBiaUJqWVdOb1pWeHVJRngwWEhScFppaHBibk4wWVd4c1pXUk5iMlIxYkdWelcyMXZaSFZzWlVsa1hTa2dlMXh1SUZ4MFhIUmNkSEpsZEhWeWJpQnBibk4wWVd4c1pXUk5iMlIxYkdWelcyMXZaSFZzWlVsa1hTNWxlSEJ2Y25Sek8xeHVJRngwWEhSOVhHNGdYSFJjZEM4dklFTnlaV0YwWlNCaElHNWxkeUJ0YjJSMWJHVWdLR0Z1WkNCd2RYUWdhWFFnYVc1MGJ5QjBhR1VnWTJGamFHVXBYRzRnWEhSY2RIWmhjaUJ0YjJSMWJHVWdQU0JwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYU0E5SUh0Y2JpQmNkRngwWEhScE9pQnRiMlIxYkdWSlpDeGNiaUJjZEZ4MFhIUnNPaUJtWVd4elpTeGNiaUJjZEZ4MFhIUmxlSEJ2Y25Sek9pQjdmVnh1SUZ4MFhIUjlPMXh1WEc0Z1hIUmNkQzh2SUVWNFpXTjFkR1VnZEdobElHMXZaSFZzWlNCbWRXNWpkR2x2Ymx4dUlGeDBYSFJ0YjJSMWJHVnpXMjF2WkhWc1pVbGtYUzVqWVd4c0tHMXZaSFZzWlM1bGVIQnZjblJ6TENCdGIyUjFiR1VzSUcxdlpIVnNaUzVsZUhCdmNuUnpMQ0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS1R0Y2JseHVJRngwWEhRdkx5QkdiR0ZuSUhSb1pTQnRiMlIxYkdVZ1lYTWdiRzloWkdWa1hHNGdYSFJjZEcxdlpIVnNaUzVzSUQwZ2RISjFaVHRjYmx4dUlGeDBYSFF2THlCU1pYUjFjbTRnZEdobElHVjRjRzl5ZEhNZ2IyWWdkR2hsSUcxdlpIVnNaVnh1SUZ4MFhIUnlaWFIxY200Z2JXOWtkV3hsTG1WNGNHOXlkSE03WEc0Z1hIUjlYRzVjYmx4dUlGeDBMeThnWlhod2IzTmxJSFJvWlNCdGIyUjFiR1Z6SUc5aWFtVmpkQ0FvWDE5M1pXSndZV05yWDIxdlpIVnNaWE5mWHlsY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YlNBOUlHMXZaSFZzWlhNN1hHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bElHTmhZMmhsWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbU1nUFNCcGJuTjBZV3hzWldSTmIyUjFiR1Z6TzF4dVhHNGdYSFF2THlCa1pXWnBibVVnWjJWMGRHVnlJR1oxYm1OMGFXOXVJR1p2Y2lCb1lYSnRiMjU1SUdWNGNHOXlkSE5jYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVaQ0E5SUdaMWJtTjBhVzl1S0dWNGNHOXlkSE1zSUc1aGJXVXNJR2RsZEhSbGNpa2dlMXh1SUZ4MFhIUnBaaWdoWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dktHVjRjRzl5ZEhNc0lHNWhiV1VwS1NCN1hHNGdYSFJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRzVoYldVc0lIdGNiaUJjZEZ4MFhIUmNkR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z1hIUmNkRngwWEhSbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlGeDBYSFJjZEZ4MFoyVjBPaUJuWlhSMFpYSmNiaUJjZEZ4MFhIUjlLVHRjYmlCY2RGeDBmVnh1SUZ4MGZUdGNibHh1SUZ4MEx5OGdaMlYwUkdWbVlYVnNkRVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm1iM0lnWTI5dGNHRjBhV0pwYkdsMGVTQjNhWFJvSUc1dmJpMW9ZWEp0YjI1NUlHMXZaSFZzWlhOY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YmlBOUlHWjFibU4wYVc5dUtHMXZaSFZzWlNrZ2UxeHVJRngwWEhSMllYSWdaMlYwZEdWeUlEMGdiVzlrZFd4bElDWW1JRzF2WkhWc1pTNWZYMlZ6VFc5a2RXeGxJRDljYmlCY2RGeDBYSFJtZFc1amRHbHZiaUJuWlhSRVpXWmhkV3gwS0NrZ2V5QnlaWFIxY200Z2JXOWtkV3hsV3lka1pXWmhkV3gwSjEwN0lIMGdPbHh1SUZ4MFhIUmNkR1oxYm1OMGFXOXVJR2RsZEUxdlpIVnNaVVY0Y0c5eWRITW9LU0I3SUhKbGRIVnliaUJ0YjJSMWJHVTdJSDA3WEc0Z1hIUmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNoblpYUjBaWElzSUNkaEp5d2daMlYwZEdWeUtUdGNiaUJjZEZ4MGNtVjBkWEp1SUdkbGRIUmxjanRjYmlCY2RIMDdYRzVjYmlCY2RDOHZJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiRnh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0J3Y205d1pYSjBlU2tnZXlCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFtVmpkQ3dnY0hKdmNHVnlkSGtwT3lCOU8xeHVYRzRnWEhRdkx5QmZYM2RsWW5CaFkydGZjSFZpYkdsalgzQmhkR2hmWDF4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV3SUQwZ1hDSmNJanRjYmx4dUlGeDBMeThnVEc5aFpDQmxiblJ5ZVNCdGIyUjFiR1VnWVc1a0lISmxkSFZ5YmlCbGVIQnZjblJ6WEc0Z1hIUnlaWFIxY200Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aGZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbk1nUFNBd0tUdGNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlCM1pXSndZV05yTDJKdmIzUnpkSEpoY0NBd1pXTTVNRGxtWkRGalptVXpNVGxtWmpVMU5TSXNJbWx0Y0c5eWRDQlVhV05yWlhJZ1puSnZiU0FuTGk5VWFXTnJSVzUwY25rbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlVhV05yWlhJN1hHNWNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnTGk5c2FXSXZhVzVrWlhndWFuTWlMQ0pwYlhCdmNuUWdiV0Z1WVdkbGNpQm1jbTl0SUNjdUwwMWhibUZuWlhJbk8xeHVYRzR2THlCMGIwUnZPaUJ6ZFhCd2IzSjBJR0p2ZEdnZ1kyRnNiR0poWTJzZ1lXNWtJSEJ5YjIxcGMyVmNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZScFkydEZiblJ5ZVZ4dWUxeHVYSFF2S2lwY2JseDBJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR052Ym5SbGVIUWdMU0JVYUdVZ1hDSjBhR2x6WENJZ1lYSm5kVzFsYm5RZ1ptOXlJSFJvWlNCc2FYTjBaVzVsY2lCbWRXNWpkR2x2Ymk1Y2JseDBJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnYkdsemRHVnVaWEl1WEc1Y2RDQXFMMXh1WEhSamIyNXpkSEoxWTNSdmNpaGpiMjUwWlhoMExDQnNhWE4wWlc1bGNpd2dZMkZzYkdKaFkyc2dQU0J1ZFd4c0xDQndjbWx2Y21sMGVTQTlJREFwWEc1Y2RIdGNibHgwWEhSMGFHbHpMbU52Ym5SbGVIUWdQU0JqYjI1MFpYaDBPMXh1WEhSY2RIUm9hWE11YkdsemRHVnVaWElnUFNCc2FYTjBaVzVsY2p0Y2JseDBYSFIwYUdsekxtTmhiR3hpWVdOcklEMGdZMkZzYkdKaFkyczdYRzVjZEZ4MGRHaHBjeTV3Y21sdmNtbDBlU0E5SUhCeWFXOXlhWFI1TzF4dVhIUjlYRzVjYm4xY2JseHVMeW90TFMwdElGQjFZbXhwWTN4UWNtOTBiM1I1Y0dVZ1RXVjBhRzlrY3lBdExTMHFMMXh1WEc1VWFXTnJSVzUwY25rdWNISnZkRzkwZVhCbExtUnBjM0J2YzJVZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1WEhSMGFHbHpMbU52Ym5SbGVIUWdQU0J1ZFd4c08xeHVYSFIwYUdsekxteHBjM1JsYm1WeUlEMGdiblZzYkR0Y2JseDBkR2hwY3k1allXeHNZbUZqYXlBOUlHNTFiR3c3WEc1Y2RIUm9hWE11Y0hKcGIzSnBkSGtnUFNCdWRXeHNPMXh1ZlR0Y2JseHVWR2xqYTBWdWRISjVMbkJ5YjNSdmRIbHdaUzVsZUdWamRYUmxJRDBnWm5WdVkzUnBiMjRvS1h0Y2JseDBiV0Z1WVdkbGNpNWhaR1FvZEdocGN5azdYRzU5TzF4dVhHNVVhV05yUlc1MGNua3VjSEp2ZEc5MGVYQmxMbWRsZEUxaGVGQnlhVzl5YVhSNUlEMGdablZ1WTNScGIyNG9LWHRjYmx4MGNtVjBkWEp1SUcxaGJtRm5aWEl1WjJWMFRXRjRVSEpwYjNKcGRIa29LVHRjYm4wN1hHNWNibHh1WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklDNHZiR2xpTDFScFkydEZiblJ5ZVM1cWN5SXNJbHh1YkdWMElISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaVWxrSUQwZ1RtRk9PMXh1WTI5dWMzUWdjSEpwYjNKcGRIbEZiblJ5YVdWeklEMGdXMjUxYkd3c0lHNTFiR3dzSUc1MWJHd3NJRzUxYkd4ZE8xeHVYRzVtZFc1amRHbHZiaUJ2YmxScFkyc29LWHRjYmx4MFptOXlLR3hsZENCcGJtUmxlQ0E5SURBZ095QnBibVJsZUNBOElIQnlhVzl5YVhSNVJXNTBjbWxsY3k1c1pXNW5kR2c3SUdsdVpHVjRLeXNwZTF4dVhIUmNkR3hsZENCMGFXTnJSVzUwY21sbGN5QTlJSEJ5YVc5eWFYUjVSVzUwY21sbGMxdHBibVJsZUYwN1hHNWNkRngwYVdZb2RHbGphMFZ1ZEhKcFpYTWdKaVlnZEdsamEwVnVkSEpwWlhNdWJHVnVaM1JvSUQ0Z01Da2dlMXh1WEhSY2RGeDBaWGhsWTNWMFpWUnBZMnRGYm5SeWFXVnpLSFJwWTJ0RmJuUnlhV1Z6S1R0Y2JseDBYSFJjZEM4dlEyeGxZWElnZEdobGJTQnZibU5sSUdWNFpXTjFkR1ZrWEc1Y2RGeDBYSFJ3Y21sdmNtbDBlVVZ1ZEhKcFpYTmJhVzVrWlhoZElEMGdiblZzYkR0Y2JseDBYSFI5WEc1Y2RIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pYaGxZM1YwWlZScFkydEZiblJ5YVdWektIUnBZMnRGYm5SeWFXVnpLWHRjYmx4MEx5OGdhVzF3YjNKMFlXNTBJSFJ2SUhWelpTQm1iM0l0Ykc5dmNGeHVYSFF2THlCMGFXTnJSVzUwY21sbGN5Qm5jbTkzY3lCa2VXNWhiV2xqWVd4c2VTQmllU0J2Ym1VZ2IyWWdhWFJ6SUdWdWRISjVYRzVjZEM4dklHWnZjaUJsZUdGdGNHeGxPaUJzWlhRZ2MyRjVJSGRsSUdoaGRtVWdiMjVsSUdWdWRISjVMQ0JoYm1RZ1pYaGxZM1YwYVc1bklIUm9ZWFFnWlc1MGNua2diV2xuYUhRZ1lXUmtjeUJoYm05MGFHVnlJR1Z1ZEhKNVhHNWNkQzh2SUhkcGRHZ2diV0Z3SUdaMWJtTjBhVzl1SUhkbElHTmhiblFnWlhobFkzVjBaU0JrZVc1aGJXbGpZV3hzZVNCbmNtOTNhVzVuSUdWdWRISnBaWE11WEc1Y2RHWnZjaWhzWlhRZ2FTQTlJREE3SUdrZ1BDQjBhV05yUlc1MGNtbGxjeTVzWlc1bmRHZzdJR2tyS3lsN1hHNWNkRngwWTI5dWMzUWdkR2xqYTBWdWRISjVJRDBnZEdsamEwVnVkSEpwWlhOYmFWMDdYRzVjZEZ4MGRHbGphMFZ1ZEhKNUxteHBjM1JsYm1WeUxtTmhiR3dvZEdsamEwVnVkSEo1TG1OdmJuUmxlSFFnZkh3Z2RHbGphMFZ1ZEhKNUxteHBjM1JsYm1WeVd5ZDBhR2x6SjEwcE8xeHVYSFJjZEdsbUlDaDBhV05yUlc1MGNua3VZMkZzYkdKaFkyc3BJSHRjYmx4MFhIUmNkSFJwWTJ0RmJuUnllUzVqWVd4c1ltRmpheTVqWVd4c0tIUnBZMnRGYm5SeWVTNWpZV3hzWW1GamExc25kR2hwY3lkZEtUdGNibHgwWEhSOVhHNWNkSDFjYm4xY2JseHVablZ1WTNScGIyNGdhWE5CWkdSbFpFRnNjbVZoWkhrb1pXNTBjbmtzZEdsamEwVnVkSEpwWlhNcGUxeHVYSFF2THlCcGJYQnZjblJoYm5RZ2RHOGdkWE5sSUdadmNpMXNiMjl3WEc1Y2RDOHZJSFJwWTJ0RmJuUnlhV1Z6SUdkeWIzZHpJR1I1Ym1GdGFXTmhiR3g1SUdKNUlHOXVaU0J2WmlCcGRITWdaVzUwY25sY2JseDBMeThnWm05eUlHVjRZVzF3YkdVNklHeGxkQ0J6WVhrZ2QyVWdhR0YyWlNCdmJtVWdaVzUwY25rc0lHRnVaQ0JsZUdWamRYUnBibWNnZEdoaGRDQmxiblJ5ZVNCdGFXZG9kQ0JoWkdSeklHRnViM1JvWlhJZ1pXNTBjbmxjYmx4MEx5OGdkMmwwYUNCdFlYQWdablZ1WTNScGIyNGdkMlVnWTJGdWRDQmxlR1ZqZFhSbElHUjVibUZ0YVdOaGJHeDVJR2R5YjNkcGJtY2daVzUwY21sbGN5NWNibHgwWm05eUtHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhScFkydEZiblJ5YVdWekxteGxibWQwYURzZ2FTc3JLWHRjYmx4MFhIUmpiMjV6ZENCMGFXTnJSVzUwY25rZ1BTQjBhV05yUlc1MGNtbGxjMXRwWFR0Y2JseDBYSFJwWmlobGJuUnllUzVqYjI1MFpYaDBJRDA5UFNCMGFXTnJSVzUwY25rdVkyOXVkR1Y0ZENBbUppQmxiblJ5ZVM1c2FYTjBaVzVsY2lBOVBUMGdkR2xqYTBWdWRISjVMbXhwYzNSbGJtVnlLWHRjYmx4MFhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUmNkSDFjYmx4MGZWeHVYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpVTmhiR3hpWVdOcktDbDdYRzVjZEc5dVZHbGpheWdwTzF4dVhIUnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1ZKWkNBOUlIZHBibVJ2ZHk1eVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW9jbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsUTJGc2JHSmhZMnNwTzF4dWZWeHVYRzVqYkdGemN5QlVhV05yVFdGdVlXZGxjaUI3WEc1Y2RHTnZibk4wY25WamRHOXlLQ2w3WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpVbGtJRDBnTURzZ0x5OGdabTl5SUZkcGJtUnZkM01nUlc1MlhHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGNuUW9LVHRjYmx4MGZWeHVmVnh1WEc1Y2JsUnBZMnROWVc1aFoyVnlMbkJ5YjNSdmRIbHdaUzVoWkdRZ1BTQm1kVzVqZEdsdmJpQW9kR2xqYTBWdWRISjVLU0I3WEc1Y2RHTnZibk4wSUhzZ2NISnBiM0pwZEhrc0lHTmhiR3hpWVdOcklIMGdQU0IwYVdOclJXNTBjbms3WEc1Y2RHbG1LQ0Z3Y21sdmNtbDBlVVZ1ZEhKcFpYTmJjSEpwYjNKcGRIbGRLWHRjYmx4MFhIUndjbWx2Y21sMGVVVnVkSEpwWlhOYmNISnBiM0pwZEhsZElEMGdXMTA3WEc1Y2RGeDBZMjl1YzNRZ2RHbGphMFZ1ZEhKcFpYTWdQU0J3Y21sdmNtbDBlVVZ1ZEhKcFpYTmJjSEpwYjNKcGRIbGRPMXh1WEhSY2RIUnBZMnRGYm5SeWFXVnpMbkIxYzJnb2RHbGphMFZ1ZEhKNUtUdGNibHgwWEhSeVpYUjFjbTQ3WEc1Y2RIMWNibHgwWTI5dWMzUWdkR2xqYTBWdWRISnBaWE1nUFNCd2NtbHZjbWwwZVVWdWRISnBaWE5iY0hKcGIzSnBkSGxkTzF4dVhIUnBaaWhwYzBGa1pHVmtRV3h5WldGa2VTaDBhV05yUlc1MGNua3NkR2xqYTBWdWRISnBaWE1wS1h0Y2JseDBYSFJqWVd4c1ltRmpheUFtSmlCallXeHNZbUZqYXloMGNuVmxLVHRjYmx4MGZTQmxiSE5sSUh0Y2JseDBYSFIwYVdOclJXNTBjbWxsY3k1d2RYTm9LSFJwWTJ0RmJuUnllU2s3WEc1Y2RIMWNibjA3WEc1Y2JseHVMeThnVkc5a2J6b2dVM1Z3Y0c5eWRDQm1iM0lnVG05a1pVcFRJRnh1VkdsamEwMWhibUZuWlhJdWNISnZkRzkwZVhCbExuTjBZWEowSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhScFppaDNhVzVrYjNjcGUxeHVYSFJjZEM4dklIZHBiR3dnY21WalpXbDJaWE1nZEdsdFpYTjBZVzF3SUdGeklHRnlaM1Z0Wlc1MFhHNWNkRngwTHk5MGIyUnZPaUJNWldGeWJqb2dJSFJvWlNCd2RYSndiM05sSUc5bUlIUnBiV1Z6ZEdGdGNGeHVYSFJjZEhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpVbGtJRDBnZDJsdVpHOTNMbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNoeVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVkRZV3hzWW1GamF5azdYRzVjZEgxY2JuMDdYRzVjYmx4dVZHbGphMDFoYm1GblpYSXVjSEp2ZEc5MGVYQmxMbk4wYjNBZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RHbG1LSGRwYm1SdmR5bDdYRzVjZEZ4MGQybHVaRzkzTG1OaGJtTmxiRUZ1YVcxaGRHbHZia1p5WVcxbEtISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaVWxrS1R0Y2JseDBmVnh1ZlR0Y2JseHVWR2xqYTAxaGJtRm5aWEl1Y0hKdmRHOTBlWEJsTG1kbGRFMWhlRkJ5YVc5eWFYUjVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJ5WlhSMWNtNGdjSEpwYjNKcGRIbEZiblJ5YVdWekxteGxibWQwYUNBdElERTdYRzU5TzF4dVhHNWpiMjV6ZENCemFXNW5iR1YwYjI1SmJuTjBZVzVqWlNBOUlHNWxkeUJVYVdOclRXRnVZV2RsY2lncE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnphVzVuYkdWMGIyNUpibk4wWVc1alpUdGNibHh1WEc1Y2JseHVYRzVjYmx4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YkdsaUwwMWhibUZuWlhJdWFuTWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZnVuY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9mdW5jdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnVuY3Rpb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2Z1bmN0aW9uczIuZGVmYXVsdDtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9lbnRyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZW50cnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW50cnkpO1xuXG52YXIgX3RpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfdGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RpY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBGdW5jdGlvbnMgPSBmdW5jdGlvbiBGdW5jdGlvbnModHJpZ2dlckRvbmVOb3RpZmllcikge1xuXHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnVuY3Rpb25zKTtcblxuXHR0aGlzLmVudHJpZXMgPSBbXTtcblx0dGhpcy5mcmFtZUVudHJpZXMgPSBbXTtcblx0dGhpcy5leGVjdXRpbmdMYXRlckluTmV4dFRpY2tDb3VudCA9IDA7XG5cdHRoaXMudHJpZ2dlckRvbmVOb3RpZmllciA9IHRyaWdnZXJEb25lTm90aWZpZXI7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBGdW5jdGlvbnM7XG5cblxuRnVuY3Rpb25zLnByb3RvdHlwZS5zZXRUcmlnZ2VyRG9uZU5vdGlmaWVyID0gZnVuY3Rpb24gKHRyaWdnZXJEb25lTm90aWZpZXIpIHtcblx0dGhpcy50cmlnZ2VyRG9uZU5vdGlmaWVyID0gdHJpZ2dlckRvbmVOb3RpZmllcjtcbn07XG5cbkZ1bmN0aW9ucy5wcm90b3R5cGUucmVtb3ZlVHJpZ2dlckRvbmVOb3RpZmllciA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy50cmlnZ2VyRG9uZU5vdGlmaWVyID0gbnVsbDtcbn07XG5cbi8vIHRoZSBmdW5jdGlvbiB0aGF0IHJlc3BvbnNpYmxlIGZvciBpbml0aWF0aW5nIHRyaWdnZXJcbi8vIGlmIGNhbGxlZCB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpbGwgbWFrZSBhIHN5bmNlZCBlZmZlY3Qgb2YgZXhlY3V0aW9uXG5GdW5jdGlvbnMucHJvdG90eXBlLmV4ZWN1dGVUcmlnZ2VyZXIgPSBmdW5jdGlvbiAoY29udGV4dCwgZnVuYywgdHJpZ2dlcmVyQ2FsbGJhY2spIHtcblx0dmFyIF90aGlzID0gdGhpcztcblxuXHR2YXIgX2V4ZWN1dGVUcmlnZ2VyZXIgPSBmdW5jdGlvbiBfZXhlY3V0ZVRyaWdnZXJlcigpIHtcblx0XHR2YXIgdHJpZ2dlcmVkQWdhaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG5cdFx0dmFyIHRpY2tlciA9IHZvaWQgMDtcblx0XHRpZiAoX3RoaXMuZXhlY3V0aW5nTGF0ZXJJbk5leHRUaWNrQ291bnQgPT09IDApIHtcblx0XHRcdGZ1bmMuY2FsbChjb250ZXh0KTtcblx0XHRcdGlmICh0cmlnZ2VyZXJDYWxsYmFjaykge1xuXHRcdFx0XHRpZiAoX3RoaXMuZXhlY3V0aW5nTGF0ZXJJbk5leHRUaWNrQ291bnQgPT09IDApIHtcblx0XHRcdFx0XHR0cmlnZ2VyZXJDYWxsYmFjayAmJiB0cmlnZ2VyZXJDYWxsYmFjayh0cmlnZ2VyZWRBZ2Fpbik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGlja2VyID0gbmV3IF90aWNrZXIyLmRlZmF1bHQoX3RoaXMsIHRyaWdnZXJlckNhbGxiYWNrLCBudWxsLCAzKTtcblx0XHRcdFx0XHR0aWNrZXIuZXhlY3V0ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRpY2tlciA9IG5ldyBfdGlja2VyMi5kZWZhdWx0KF90aGlzLCBfZXhlY3V0ZVRyaWdnZXJlciwgdHJpZ2dlcmVyQ2FsbGJhY2ssIDMpO1xuXHRcdFx0dGlja2VyLmV4ZWN1dGUoKTtcblx0XHR9XG5cdH07XG5cdF9leGVjdXRlVHJpZ2dlcmVyKCk7XG59O1xuXG5GdW5jdGlvbnMucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gKGNvbnRleHQsIGZ1bmMpIHtcblx0dmFyIGV4ZWN1dGVMYXRlckluTmV4dFRpY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG5cdHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdHZhciBwcmlvcml0eSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcblx0dmFyIGxpc3RlbmVyQ2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IG51bGw7XG5cblx0dmFyIGVudHJ5ID0gdm9pZCAwO1xuXHRpZiAoZXhlY3V0ZUxhdGVySW5OZXh0VGljaykge1xuXG5cdFx0dmFyIHRpY2tlckNhbGxiYWNrID0gZnVuY3Rpb24gdGlja2VyQ2FsbGJhY2soKSB7XG5cdFx0XHR2YXIgdHJpZ2dlcmVkQWdhaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG5cdFx0XHRfdGhpczIuZXhlY3V0aW5nTGF0ZXJJbk5leHRUaWNrQ291bnQgPSBfdGhpczIuZXhlY3V0aW5nTGF0ZXJJbk5leHRUaWNrQ291bnQgLSAxO1xuXHRcdFx0aWYgKGxpc3RlbmVyQ2FsbGJhY2spIHtcblx0XHRcdFx0bGlzdGVuZXJDYWxsYmFjay5jYWxsKGxpc3RlbmVyQ2FsbGJhY2tbJ3RoaXMnXSwgdHJpZ2dlcmVkQWdhaW4pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKF90aGlzMi5leGVjdXRpbmdMYXRlckluTmV4dFRpY2tDb3VudCA9PT0gMCkge1xuXHRcdFx0XHRfdGhpczIudHJpZ2dlckRvbmVOb3RpZmllciAmJiBfdGhpczIudHJpZ2dlckRvbmVOb3RpZmllcigpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0dmFyIHRpY2tlciA9IG5ldyBfdGlja2VyMi5kZWZhdWx0KGNvbnRleHQsIGZ1bmMsIHRpY2tlckNhbGxiYWNrLCBwcmlvcml0eSk7XG5cdFx0ZW50cnkgPSBuZXcgX2VudHJ5Mi5kZWZhdWx0KHRpY2tlciwgdGlja2VyLmV4ZWN1dGUpO1xuXHRcdHRoaXMuZnJhbWVFbnRyaWVzLnB1c2goZW50cnkpO1xuXHR9IGVsc2Uge1xuXHRcdGVudHJ5ID0gbmV3IF9lbnRyeTIuZGVmYXVsdChjb250ZXh0LCBmdW5jKTtcblx0XHR0aGlzLmVudHJpZXMucHVzaChlbnRyeSk7XG5cdH1cbn07XG5cbkZ1bmN0aW9ucy5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAoY29udGV4dCwgZnVuYykge1xuXHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHR2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG5cblx0dmFyIGVudHJ5ID0gdm9pZCAwLFxuXHQgICAgaSA9IHZvaWQgMDtcblx0dmFyIGZyYW1lRW50cmllcyA9IHRoaXMuZnJhbWVFbnRyaWVzLFxuXHQgICAgZW50cmllcyA9IHRoaXMuZW50cmllcztcblxuXHR2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcblx0XHR2YXIgZnJhbWVFbnRyeSA9IGZyYW1lRW50cmllc1tpXTtcblx0XHRlbnRyeSA9IGZyYW1lRW50cnkuY29udGV4dDtcblx0XHRpZiAoZW50cnkuY29udGV4dCA9PT0gY29udGV4dCAmJiBlbnRyeS5saXN0ZW5lciA9PT0gZnVuYykge1xuXHRcdFx0aWYgKF90aGlzMy5leGVjdXRpbmdMYXRlckluTmV4dFRpY2tDb3VudCA9PT0gMCkge1xuXHRcdFx0XHRmcmFtZUVudHJ5LmRpc3Bvc2UoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIGZyYW1lIHRyaWdnZXIgTGlzdGVuZXJzIGFyZSBzdGlsbCBydW5uaW5nXG5cdFx0XHRcdHZhciB0aWNrZXJFbnRyeSA9IHZvaWQgMDtcblx0XHRcdFx0dmFyIGRpc3Bvc2VEb25lTm90aWZpZXIgPSBmdW5jdGlvbiBkaXNwb3NlRG9uZU5vdGlmaWVyKCkge1xuXHRcdFx0XHRcdHZhciB0cmlnZ2VyZWRBZ2FpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoX3RoaXMzLmV4ZWN1dGluZ0xhdGVySW5OZXh0VGlja0NvdW50ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayAmJiBjYWxsYmFjayh0cmlnZ2VyZWRBZ2Fpbik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRpY2tlckVudHJ5ID0gbmV3IF90aWNrZXIyLmRlZmF1bHQoZnJhbWVFbnRyeSwgZnJhbWVFbnRyeS5kaXNwb3NlLCBkaXNwb3NlRG9uZU5vdGlmaWVyLCAzKTtcblx0XHRcdFx0XHRcdHRpY2tlckVudHJ5LmV4ZWN1dGUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRpY2tlckVudHJ5ID0gbmV3IF90aWNrZXIyLmRlZmF1bHQoZnJhbWVFbnRyeSwgZnJhbWVFbnRyeS5kaXNwb3NlLCBkaXNwb3NlRG9uZU5vdGlmaWVyLCAzKTtcblx0XHRcdFx0dGlja2VyRW50cnkuZXhlY3V0ZSgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0djogdm9pZCAwXG5cdFx0XHR9O1xuXHRcdH1cblx0fTtcblxuXHRmb3IgKGkgPSAwOyBpIDwgZnJhbWVFbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIF9yZXQgPSBfbG9vcCgpO1xuXG5cdFx0aWYgKCh0eXBlb2YgX3JldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3JldCkpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuXHR9XG5cblx0Zm9yIChpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcblx0XHRlbnRyeSA9IGVudHJpZXNbaV07XG5cdFx0aWYgKGVudHJ5LmNvbnRleHQgPT09IGNvbnRleHQgJiYgZW50cnkubGlzdGVuZXIgPT09IGZ1bmMpIHtcblx0XHRcdGVudHJ5LmRpc3Bvc2UoKTtcblx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG59O1xuXG5GdW5jdGlvbnMucHJvdG90eXBlLnRyaWdnZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBlbnRyaWVzSW5kZXhUb0Rpc3Bvc2UgPSBbXTtcblxuXHR0aGlzLmVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnksIGluZGV4KSB7XG5cdFx0aWYgKGVudHJ5Lmxpc3RlbmVyKSB7XG5cdFx0XHRlbnRyeS5saXN0ZW5lci5hcHBseShlbnRyeS5jb250ZXh0IHx8IGVudHJ5Lmxpc3RlbmVyWyd0aGlzJ10pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbnRyaWVzSW5kZXhUb0Rpc3Bvc2UucHVzaChpbmRleCk7XG5cdFx0fVxuXHR9KTtcblx0ZW50cmllc0luZGV4VG9EaXNwb3NlLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5SW5kZXgpIHtcblx0XHR0aGlzLmVudHJpZXMuc3BsaWNlKGVudHJ5SW5kZXgsIDEpO1xuXHR9LCB0aGlzKTtcblxuXHRpZiAodGhpcy5mcmFtZUVudHJpZXMubGVuZ3RoID4gMCkge1xuXHRcdHRoaXMuZnJhbWVFbnRyaWVzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5LCBpbmRleCkge1xuXHRcdFx0aWYgKGVudHJ5Lmxpc3RlbmVyKSB7XG5cdFx0XHRcdHRoaXMuZXhlY3V0aW5nTGF0ZXJJbk5leHRUaWNrQ291bnQgPSB0aGlzLmV4ZWN1dGluZ0xhdGVySW5OZXh0VGlja0NvdW50ICsgMTtcblx0XHRcdFx0ZW50cnkubGlzdGVuZXIuYXBwbHkoZW50cnkuY29udGV4dCB8fCBlbnRyeS5saXN0ZW5lclsndGhpcyddKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVudHJpZXNJbmRleFRvRGlzcG9zZS5wdXNoKGluZGV4KTtcblx0XHRcdH1cblx0XHR9LCB0aGlzKTtcblx0XHRlbnRyaWVzSW5kZXhUb0Rpc3Bvc2UuZm9yRWFjaChmdW5jdGlvbiAoZW50cnlJbmRleCkge1xuXHRcdFx0dGhpcy5mcmFtZUVudHJpZXMuc3BsaWNlKGVudHJ5SW5kZXgsIDEpO1xuXHRcdH0sIHRoaXMpO1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHJpZ2dlckRvbmVOb3RpZmllciAmJiB0aGlzLnRyaWdnZXJEb25lTm90aWZpZXIoKTtcblx0fVxufTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90aWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3RpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90aWNrZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRW50cnkgPSBmdW5jdGlvbiBFbnRyeShjb250ZXh0LCBmdW5jKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVudHJ5KTtcblxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5saXN0ZW5lciA9IGZ1bmM7XG59O1xuXG4vLyBNZXRob2QgYXZhaWxhYmxlIG9ubHkgb24gRW50cnkgaW5zdGFuY2Ugbm90IGluIENsYXNzXG5cblxuZXhwb3J0cy5kZWZhdWx0ID0gRW50cnk7XG5FbnRyeS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5jb250ZXh0IGluc3RhbmNlb2YgX3RpY2tlcjIuZGVmYXVsdCkge1xuICAgICAgICB0aGlzLmNvbnRleHQuZGlzcG9zZSgpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXIgPSBudWxsO1xufTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpZDJWaWNHRmphem92THk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NCbVl6TXdOalUyTW1WbVptVmpaVGxrTkRVell5SXNJbmRsWW5CaFkyczZMeTh2TGk0dmJtOWtaVjl0YjJSMWJHVnpMM1JwWTJ0bGNpOXNhV0l2ZEdsamEyVnlMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMnhwWWk5cGJtUmxlQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTlzYVdJdlpuVnVZM1JwYjI1ekxtcHpJaXdpZDJWaWNHRmphem92THk4dUwyeHBZaTlsYm5SeWVTNXFjeUpkTENKdVlXMWxjeUk2V3lKR2RXNWpkR2x2Ym5NaUxDSjBjbWxuWjJWeVJHOXVaVTV2ZEdsbWFXVnlJaXdpWlc1MGNtbGxjeUlzSW1aeVlXMWxSVzUwY21sbGN5SXNJbVY0WldOMWRHbHVaMHhoZEdWeVNXNU9aWGgwVkdsamEwTnZkVzUwSWl3aWNISnZkRzkwZVhCbElpd2ljMlYwVkhKcFoyZGxja1J2Ym1WT2IzUnBabWxsY2lJc0luSmxiVzkyWlZSeWFXZG5aWEpFYjI1bFRtOTBhV1pwWlhJaUxDSmxlR1ZqZFhSbFZISnBaMmRsY21WeUlpd2lZMjl1ZEdWNGRDSXNJbVoxYm1NaUxDSjBjbWxuWjJWeVpYSkRZV3hzWW1GamF5SXNJbDlsZUdWamRYUmxWSEpwWjJkbGNtVnlJaXdpZEhKcFoyZGxjbVZrUVdkaGFXNGlMQ0owYVdOclpYSWlMQ0pqWVd4c0lpd2laWGhsWTNWMFpTSXNJbUZrWkV4cGMzUmxibVZ5SWl3aVpYaGxZM1YwWlV4aGRHVnlTVzVPWlhoMFZHbGpheUlzSW5CeWFXOXlhWFI1SWl3aWJHbHpkR1Z1WlhKRFlXeHNZbUZqYXlJc0ltVnVkSEo1SWl3aWRHbGphMlZ5UTJGc2JHSmhZMnNpTENKd2RYTm9JaXdpY21WdGIzWmxUR2x6ZEdWdVpYSWlMQ0pqWVd4c1ltRmpheUlzSW1raUxDSm1jbUZ0WlVWdWRISjVJaXdpYkdsemRHVnVaWElpTENKa2FYTndiM05sSWl3aWRHbGphMlZ5Ulc1MGNua2lMQ0prYVhOd2IzTmxSRzl1WlU1dmRHbG1hV1Z5SWl3aWJHVnVaM1JvSWl3aWRISnBaMmRsY2t4cGMzUmxibVZ5Y3lJc0ltVnVkSEpwWlhOSmJtUmxlRlJ2UkdsemNHOXpaU0lzSW1admNrVmhZMmdpTENKcGJtUmxlQ0lzSW1Gd2NHeDVJaXdpWlc1MGNubEpibVJsZUNJc0luTndiR2xqWlNJc0lrVnVkSEo1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRc1R6dEJRMVpCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h0UTBGQk1rSXNNRUpCUVRCQ0xFVkJRVVU3UVVGRGRrUXNlVU5CUVdsRExHVkJRV1U3UVVGRGFFUTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzT0VSQlFYTkVMQ3RFUVVFclJEczdRVUZGY2tnN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3pzN096czdPMEZETjBSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJDeHZRMEZCYjBNN1FVRkRjRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVdFN1FVRkRZanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4dFEwRkJiVU1zTUVKQlFUQkNMRVZCUVVVN1FVRkRMMFFzZVVOQlFYbERMR1ZCUVdVN1FVRkRlRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRGhFUVVFNFJDd3JSRUZCSzBRN1FVRkROMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1ZVRkJWVHRCUVVOV08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenM3UVVGSFFUdEJRVU5CTzBGQlEwRXNRMEZCUXpzN1FVRkZSRHM3UVVGRlFUczdRVUZGUVN4elEwRkJjME1zZFVOQlFYVkRMR2RDUVVGblFqczdRVUZGTjBZN08wRkJSVUVzVDBGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN096dEJRVWRCTzBGQlEwRTdRVUZEUVN4RFFVRkRPenRCUVVWRU96dEJRVVZCT3p0QlFVVkJMSE5EUVVGelF5eDFRMEZCZFVNc1owSkJRV2RDT3p0QlFVVTNSaXhwUkVGQmFVUXNNRU5CUVRCRExEQkVRVUV3UkN4RlFVRkZPenRCUVVWMlNqdEJRVU5CTzBGQlEwRTdRVUZEUVN4WFFVRlhMRTlCUVU4N1FVRkRiRUlzVjBGQlZ5eFRRVUZUTzBGQlEzQkNPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hQUVVGUE8wRkJRMUE3UVVGRFFUczdRVUZGUVRzN08wRkJSMEU3UVVGRFFUdEJRVU5CTEVOQlFVTTdPMEZCUlVRc2FVUkJRV2xFTERCRFFVRXdReXd3UkVGQk1FUXNSVUZCUlRzN1FVRkZka283UVVGRFFUczdRVUZGUVR0QlFVTkJMRzlDUVVGdlFpeG5RMEZCWjBNN1FVRkRjRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEhkQ1FVRjNRanRCUVVONFF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEhkQ1FVRjNRanRCUVVONFF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTERaQ1FVRTJRanRCUVVNM1FqdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEZRVUZGTzBGQlEwWTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUVzVDBGQlR6dEJRVU5RTzBGQlEwRXNRMEZCUXp0QlFVTkVMREpEUVVFeVF5eGpRVUZqTEcxeVlUczdPenM3T3pzN096czdPenRCUTNCUmVrUTdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTBGQk96czdPMEZCUTBFN096czdPenM3TzBsQlJYRkNRU3hUTEVkQlEycENMRzFDUVVGWlF5eHRRa0ZCV2l4RlFVRnBRenRCUVVGQk96dEJRVU0zUWl4TlFVRkxReXhQUVVGTUxFZEJRV1VzUlVGQlpqdEJRVU5CTEUxQlFVdERMRmxCUVV3c1IwRkJiMElzUlVGQmNFSTdRVUZEUVN4TlFVRkxReXcyUWtGQlRDeEhRVUZ4UXl4RFFVRnlRenRCUVVOQkxFMUJRVXRJTEcxQ1FVRk1MRWRCUVRKQ1FTeHRRa0ZCTTBJN1FVRkRTQ3hET3p0clFrRk9aMEpFTEZNN096dEJRVk55UWtFc1ZVRkJWVXNzVTBGQlZpeERRVUZ2UWtNc2MwSkJRWEJDTEVkQlFUWkRMRlZCUVZOTUxHMUNRVUZVTEVWQlFUWkNPMEZCUTNwRkxFMUJRVXRCTEcxQ1FVRk1MRWRCUVRKQ1FTeHRRa0ZCTTBJN1FVRkRRU3hEUVVaRU96dEJRVWxCUkN4VlFVRlZTeXhUUVVGV0xFTkJRVzlDUlN4NVFrRkJjRUlzUjBGQlowUXNXVUZCVlR0QlFVTjZSQ3hOUVVGTFRpeHRRa0ZCVEN4SFFVRXlRaXhKUVVFelFqdEJRVU5CTEVOQlJrUTdPMEZCU1VFN1FVRkRRVHRCUVVOQlJDeFZRVUZWU3l4VFFVRldMRU5CUVc5Q1J5eG5Ra0ZCY0VJc1IwRkJkVU1zVlVGQlUwTXNUMEZCVkN4RlFVRnJRa01zU1VGQmJFSXNSVUZCZDBKRExHbENRVUY0UWl4RlFVRXdRenRCUVVGQk96dEJRVU5vUml4TFFVRk5ReXh2UWtGQmIwSXNVMEZCY0VKQkxHbENRVUZ2UWl4SFFVRXdRanRCUVVGQkxFMUJRWHBDUXl4alFVRjVRaXgxUlVGQlVpeExRVUZST3p0QlFVTnVSQ3hOUVVGSlF5eGxRVUZLTzBGQlEwRXNUVUZCUnl4TlFVRkxWaXcyUWtGQlRDeExRVUYxUXl4RFFVRXhReXhGUVVFMFF6dEJRVU16UTAwc1VVRkJTMHNzU1VGQlRDeERRVUZWVGl4UFFVRldPMEZCUTBFc1QwRkJSMFVzYVVKQlFVZ3NSVUZCY1VJN1FVRkRjRUlzVVVGQlJ5eE5RVUZMVUN3MlFrRkJUQ3hMUVVGMVF5eERRVUV4UXl4RlFVRTBRenRCUVVNelEwOHNNRUpCUVhGQ1FTeHJRa0ZCYTBKRkxHTkJRV3hDTEVOQlFYSkNPMEZCUTBFc1MwRkdSQ3hOUVVWUE8wRkJRMDVETEdOQlFWTXNORUpCUVdsQ1NDeHBRa0ZCYWtJc1JVRkJiME1zU1VGQmNFTXNSVUZCTUVNc1EwRkJNVU1zUTBGQlZEdEJRVU5CUnl4WlFVRlBSU3hQUVVGUU8wRkJRMEU3UVVGRFJEdEJRVU5FTEVkQlZrUXNUVUZWVHp0QlFVTk9SaXhaUVVGVExEUkNRVUZwUWtZc2FVSkJRV3BDTEVWQlFXOURSQ3hwUWtGQmNFTXNSVUZCZFVRc1EwRkJka1FzUTBGQlZEdEJRVU5CUnl4VlFVRlBSU3hQUVVGUU8wRkJRMEU3UVVGRFJDeEZRV2hDUkR0QlFXbENRVW83UVVGRFFTeERRVzVDUkRzN1FVRnhRa0ZhTEZWQlFWVkxMRk5CUVZZc1EwRkJiMEpaTEZkQlFYQkNMRWRCUVd0RExGVkJRVk5TTEU5QlFWUXNSVUZCYTBKRExFbEJRV3hDTEVWQlFUaEdPMEZCUVVFc1MwRkJkRVZSTEhOQ1FVRnpSU3gxUlVGQk4wTXNTMEZCTmtNN08wRkJRVUU3TzBGQlFVRXNTMEZCZEVORExGRkJRWE5ETEhWRlFVRXpRaXhEUVVFeVFqdEJRVUZCTEV0QlFYaENReXhuUWtGQmQwSXNkVVZCUVV3c1NVRkJTenM3UVVGRE5VZ3NTMEZCU1VNc1kwRkJTanRCUVVOQkxFdEJRVWxJTEhOQ1FVRktMRVZCUVRKQ096dEJRVVY2UWl4TlFVRk5TU3hwUWtGQmFVSXNVMEZCYWtKQkxHTkJRV2xDTEVkQlFUUkNPMEZCUVVFc1QwRkJNMEpVTEdOQlFUSkNMSFZGUVVGV0xFdEJRVlU3TzBGQlEyNUVMRlZCUVV0VUxEWkNRVUZNTEVkQlFYRkRMRTlCUVV0QkxEWkNRVUZNTEVkQlFYRkRMRU5CUVRGRk8wRkJRMEVzVDBGQlIyZENMR2RDUVVGSUxFVkJRVzlDTzBGQlEyNUNRU3h4UWtGQmFVSk1MRWxCUVdwQ0xFTkJRWE5DU3l4cFFrRkJhVUlzVFVGQmFrSXNRMEZCZEVJc1JVRkJaMFJRTEdOQlFXaEVPMEZCUTBFN1FVRkRSQ3hQUVVGSkxFOUJRVXRVTERaQ1FVRk1MRXRCUVhWRExFTkJRVE5ETEVWQlFUWkRPMEZCUXpWRExGZEJRVXRJTEcxQ1FVRk1MRWxCUVRaQ0xFOUJRVXRCTEcxQ1FVRk1MRVZCUVRkQ08wRkJRMEU3UVVGRFJDeEhRVkpCTzBGQlUwVXNUVUZCVFdFc1UwRkJVeXh4UWtGQlYwd3NUMEZCV0N4RlFVRnZRa01zU1VGQmNFSXNSVUZCTUVKWkxHTkJRVEZDTEVWQlFUQkRTQ3hSUVVFeFF5eERRVUZtTzBGQlEwaEZMRlZCUVZFc2IwSkJRVlZRTEUxQlFWWXNSVUZCYTBKQkxFOUJRVTlGTEU5QlFYcENMRU5CUVZJN1FVRkRSeXhQUVVGTFlpeFpRVUZNTEVOQlFXdENiMElzU1VGQmJFSXNRMEZCZFVKR0xFdEJRWFpDTzBGQlEwZ3NSVUZrUkN4TlFXTlBPMEZCUTBoQkxGVkJRVkVzYjBKQlFWVmFMRTlCUVZZc1JVRkJiVUpETEVsQlFXNUNMRU5CUVZJN1FVRkRRU3hQUVVGTFVpeFBRVUZNTEVOQlFXRnhRaXhKUVVGaUxFTkJRV3RDUml4TFFVRnNRanRCUVVOSU8wRkJRMG9zUTBGd1FrUTdPMEZCYzBKQmNrSXNWVUZCVlVzc1UwRkJWaXhEUVVGdlFtMUNMR05CUVhCQ0xFZEJRWEZETEZWQlFWTm1MRTlCUVZRc1JVRkJhVUpETEVsQlFXcENMRVZCUVhWRE8wRkJRVUU3TzBGQlFVRXNTMEZCYUVKbExGRkJRV2RDTEhWRlFVRk1MRWxCUVVzN08wRkJRek5GTEV0QlFVbEtMR05CUVVvN1FVRkJRU3hMUVVGWFN5eFZRVUZZTzBGQlJESkZMRXRCUlhCRmRrSXNXVUZHYjBVc1IwRkZNME1zU1VGR01rTXNRMEZGY0VWQkxGbEJSbTlGTzBGQlFVRXNTMEZGZEVSRUxFOUJSbk5FTEVkQlJUTkRMRWxCUmpKRExFTkJSWFJFUVN4UFFVWnpSRHM3UVVGQlFUdEJRVXQyUlN4TlFVRk5lVUlzWVVGQlkzaENMR0ZCUVdGMVFpeERRVUZpTEVOQlFYQkNPMEZCUTBoTUxGVkJRVkZOTEZkQlFWZHNRaXhQUVVGdVFqdEJRVU5CTEUxQlFVZFpMRTFCUVUxYUxFOUJRVTRzUzBGQmEwSkJMRTlCUVd4Q0xFbEJRVFpDV1N4TlFVRk5UeXhSUVVGT0xFdEJRVzFDYkVJc1NVRkJia1FzUlVGQmQwUTdRVUZEZGtRc1QwRkJSeXhQUVVGTFRpdzJRa0ZCVEN4TFFVRjFReXhEUVVFeFF5eEZRVUUwUXp0QlFVTXpRM1ZDTEdWQlFWZEZMRTlCUVZnN1FVRkRRU3hKUVVaRUxFMUJSVTg3UVVGQlJUdEJRVU5TTEZGQlFVbERMRzlDUVVGS08wRkJRMEVzVVVGQlRVTXNjMEpCUVhOQ0xGTkJRWFJDUVN4dFFrRkJjMElzUjBGQk5FSTdRVUZCUVN4VFFVRXpRbXhDTEdOQlFUSkNMSFZGUVVGV0xFdEJRVlU3TzBGQlEzWkVMRk5CUVVrc1QwRkJTMVFzTmtKQlFVd3NTMEZCZFVNc1EwRkJNME1zUlVGQk9FTTdRVUZETjBOeFFpeHJRa0ZCV1VFc1UwRkJVMW9zWTBGQlZDeERRVUZhTzBGQlEwRXNUVUZHUkN4TlFVVk5PMEZCUTB4cFFpeHZRa0ZCWXl4eFFrRkJWMGdzVlVGQldDeEZRVUZ6UWtFc1YwRkJWMFVzVDBGQmFrTXNSVUZCTUVORkxHMUNRVUV4UXl4RlFVRXJSQ3hEUVVFdlJDeERRVUZrTzBGQlEwRkVMR3RDUVVGWlpDeFBRVUZhTzBGQlEwRTdRVUZEUkN4TFFWQkVPMEZCVVVGakxHdENRVUZqTEhGQ1FVRlhTQ3hWUVVGWUxFVkJRWE5DUVN4WFFVRlhSU3hQUVVGcVF5eEZRVUV3UTBVc2JVSkJRVEZETEVWQlFTdEVMRU5CUVM5RUxFTkJRV1E3UVVGRFFVUXNaMEpCUVZsa0xFOUJRVm83UVVGRFFUdEJRVU5FTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCZUVKNVJUczdRVUZKTTBVc1RVRkJTVlVzU1VGQlNTeERRVUZTTEVWQlFWZEJMRWxCUVVsMlFpeGhRVUZoTmtJc1RVRkJOVUlzUlVGQmIwTk9MRWRCUVhCRExFVkJRWGRETzBGQlFVRTdPMEZCUVVFN1FVRnhRblpET3p0QlFVVkVMRTFCUVVsQkxFbEJRVWtzUTBGQlVpeEZRVUZYUVN4SlFVRkplRUlzVVVGQlVUaENMRTFCUVhaQ0xFVkJRU3RDVGl4SFFVRXZRaXhGUVVGdFF6dEJRVU5zUTB3c1ZVRkJVVzVDTEZGQlFWRjNRaXhEUVVGU0xFTkJRVkk3UVVGRFFTeE5RVUZIVEN4TlFVRk5XaXhQUVVGT0xFdEJRV3RDUVN4UFFVRnNRaXhKUVVFMlFsa3NUVUZCVFU4c1VVRkJUaXhMUVVGdFFteENMRWxCUVc1RUxFVkJRWGRFTzBGQlEzWkVWeXhUUVVGTlVTeFBRVUZPTzBGQlEwRktMR1ZCUVZsQkxGVkJRVm83UVVGRFFUdEJRVU5CTzBGQlEwUTdRVUZEUkN4RFFXNURSRHM3UVVGeFEwRjZRaXhWUVVGVlN5eFRRVUZXTEVOQlFXOUNORUlzWjBKQlFYQkNMRWRCUVhWRExGbEJRVlU3UVVGRE4wTXNTMEZCVFVNc2QwSkJRWGRDTEVWQlFUbENPenRCUVVWSUxFMUJRVXRvUXl4UFFVRk1MRU5CUVdGcFF5eFBRVUZpTEVOQlFYRkNMRlZCUVZOa0xFdEJRVlFzUlVGQlowSmxMRXRCUVdoQ0xFVkJRWE5DTzBGQlEzQkRMRTFCUVVsbUxFMUJRVTFQTEZGQlFWWXNSVUZCYjBJN1FVRkRhRUpRTEZOQlFVMVBMRkZCUVU0c1EwRkJaVk1zUzBGQlppeERRVUZ4UW1oQ0xFMUJRVTFhTEU5QlFVNHNTVUZCYVVKWkxFMUJRVTFQTEZGQlFVNHNRMEZCWlN4TlFVRm1MRU5CUVhSRE8wRkJRMGdzUjBGR1JDeE5RVVZQTzBGQlEwaE5MSGxDUVVGelFsZ3NTVUZCZEVJc1EwRkJNa0poTEV0QlFUTkNPMEZCUTBnN1FVRkRTaXhGUVU1S08wRkJUMGRHTEhWQ1FVRnpRa01zVDBGQmRFSXNRMEZCT0VJc1ZVRkJVMGNzVlVGQlZDeEZRVUZ2UWp0QlFVTTVReXhQUVVGTGNFTXNUMEZCVEN4RFFVRmhjVU1zVFVGQllpeERRVUZ2UWtRc1ZVRkJjRUlzUlVGQkswSXNRMEZCTDBJN1FVRkRTQ3hGUVVaRUxFVkJSVWNzU1VGR1NEczdRVUZMU0N4TFFVRkhMRXRCUVV0dVF5eFpRVUZNTEVOQlFXdENOa0lzVFVGQmJFSXNSMEZCTWtJc1EwRkJPVUlzUlVGQlowTTdRVUZETDBJc1QwRkJTemRDTEZsQlFVd3NRMEZCYTBKblF5eFBRVUZzUWl4RFFVRXdRaXhWUVVGVFpDeExRVUZVTEVWQlFXZENaU3hMUVVGb1FpeEZRVUZ6UWp0QlFVTXZReXhQUVVGSlppeE5RVUZOVHl4UlFVRldMRVZCUVc5Q08wRkJRMjVDTEZOQlFVdDRRaXcyUWtGQlRDeEhRVUZ4UXl4TFFVRkxRU3cyUWtGQlRDeEhRVUZ4UXl4RFFVRXhSVHRCUVVOQmFVSXNWVUZCVFU4c1VVRkJUaXhEUVVGbFV5eExRVUZtTEVOQlFYRkNhRUlzVFVGQlRWb3NUMEZCVGl4SlFVRnBRbGtzVFVGQlRVOHNVVUZCVGl4RFFVRmxMRTFCUVdZc1EwRkJkRU03UVVGRFFTeEpRVWhFTEUxQlIwODdRVUZEVGswc01FSkJRWE5DV0N4SlFVRjBRaXhEUVVFeVFtRXNTMEZCTTBJN1FVRkRRVHRCUVVORUxFZEJVRVFzUlVGUFJ5eEpRVkJJTzBGQlVVRkdMSGRDUVVGelFrTXNUMEZCZEVJc1EwRkJPRUlzVlVGQlUwY3NWVUZCVkN4RlFVRnZRanRCUVVOcVJDeFJRVUZMYmtNc1dVRkJUQ3hEUVVGclFtOURMRTFCUVd4Q0xFTkJRWGxDUkN4VlFVRjZRaXhGUVVGdlF5eERRVUZ3UXp0QlFVTkJMRWRCUmtRc1JVRkZSeXhKUVVaSU8wRkJSMEVzUlVGYVJDeE5RVmxQTzBGQlEwNHNUMEZCUzNKRExHMUNRVUZNTEVsQlFUUkNMRXRCUVV0QkxHMUNRVUZNTEVWQlFUVkNPMEZCUTBFN1FVRkRSQ3hEUVRsQ1JDeERPenM3T3pzN096czdPenM3TzBGRGRFZEJPenM3T3pzN096dEpRVVZ4UW5WRExFc3NSMEZEYWtJc1pVRkJXUzlDTEU5QlFWb3NSVUZCY1VKRExFbEJRWEpDTEVWQlFUQkNPMEZCUVVFN08wRkJRM1JDTEZOQlFVdEVMRTlCUVV3c1IwRkJaVUVzVDBGQlpqdEJRVU5CTEZOQlFVdHRRaXhSUVVGTUxFZEJRV2RDYkVJc1NVRkJhRUk3UVVGRFNDeERPenRCUVVkTU96czdhMEpCVUhGQ09FSXNTenRCUVZGeVFrRXNUVUZCVFc1RExGTkJRVTRzUTBGQlowSjNRaXhQUVVGb1FpeEhRVUV3UWl4WlFVRlhPMEZCUTJwRExGRkJRVWNzUzBGQlMzQkNMRTlCUVV3c05FSkJRVWdzUlVGQmEwTTdRVUZET1VJc1lVRkJTMEVzVDBGQlRDeERRVUZoYjBJc1QwRkJZanRCUVVOSU8wRkJRMFFzVTBGQlMzQkNMRTlCUVV3c1IwRkJaU3hKUVVGbU8wRkJRMEVzVTBGQlMyMUNMRkZCUVV3c1IwRkJaMElzU1VGQmFFSTdRVUZEU0N4RFFVNUVMRU1pTENKbWFXeGxJam9pYkdsaUwyWjFibU4wYVc5dWN5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCM1pXSndZV05yVlc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaWh5YjI5MExDQm1ZV04wYjNKNUtTQjdYRzVjZEdsbUtIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiVzlrZFd4bElEMDlQU0FuYjJKcVpXTjBKeWxjYmx4MFhIUnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWmhZM1J2Y25rb0tUdGNibHgwWld4elpTQnBaaWgwZVhCbGIyWWdaR1ZtYVc1bElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHUmxabWx1WlM1aGJXUXBYRzVjZEZ4MFpHVm1hVzVsS0Z3aVpuVnVZM1JwYjI1elhDSXNJRnRkTENCbVlXTjBiM0o1S1R0Y2JseDBaV3h6WlNCcFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MFpYaHdiM0owYzF0Y0ltWjFibU4wYVc5dWMxd2lYU0E5SUdaaFkzUnZjbmtvS1R0Y2JseDBaV3h6WlZ4dVhIUmNkSEp2YjNSYlhDSm1kVzVqZEdsdmJuTmNJbDBnUFNCbVlXTjBiM0o1S0NrN1hHNTlLU2gwYUdsekxDQm1kVzVqZEdsdmJpZ3BJSHRjYm5KbGRIVnliaUJjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z2QyVmljR0ZqYXk5MWJtbDJaWEp6WVd4TmIyUjFiR1ZFWldacGJtbDBhVzl1SWl3aUlGeDBMeThnVkdobElHMXZaSFZzWlNCallXTm9aVnh1SUZ4MGRtRnlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTWdQU0I3ZlR0Y2JseHVJRngwTHk4Z1ZHaGxJSEpsY1hWcGNtVWdablZ1WTNScGIyNWNiaUJjZEdaMWJtTjBhVzl1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b2JXOWtkV3hsU1dRcElIdGNibHh1SUZ4MFhIUXZMeUJEYUdWamF5QnBaaUJ0YjJSMWJHVWdhWE1nYVc0Z1kyRmphR1ZjYmlCY2RGeDBhV1lvYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjBwSUh0Y2JpQmNkRngwWEhSeVpYUjFjbTRnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjB1Wlhod2IzSjBjenRjYmlCY2RGeDBmVnh1SUZ4MFhIUXZMeUJEY21WaGRHVWdZU0J1WlhjZ2JXOWtkV3hsSUNoaGJtUWdjSFYwSUdsMElHbHVkRzhnZEdobElHTmhZMmhsS1Z4dUlGeDBYSFIyWVhJZ2JXOWtkV3hsSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwZ1BTQjdYRzRnWEhSY2RGeDBhVG9nYlc5a2RXeGxTV1FzWEc0Z1hIUmNkRngwYkRvZ1ptRnNjMlVzWEc0Z1hIUmNkRngwWlhod2IzSjBjem9nZTMxY2JpQmNkRngwZlR0Y2JseHVJRngwWEhRdkx5QkZlR1ZqZFhSbElIUm9aU0J0YjJSMWJHVWdablZ1WTNScGIyNWNiaUJjZEZ4MGJXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdVkyRnNiQ2h0YjJSMWJHVXVaWGh3YjNKMGN5d2diVzlrZFd4bExDQnRiMlIxYkdVdVpYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5azdYRzVjYmlCY2RGeDBMeThnUm14aFp5QjBhR1VnYlc5a2RXeGxJR0Z6SUd4dllXUmxaRnh1SUZ4MFhIUnRiMlIxYkdVdWJDQTlJSFJ5ZFdVN1hHNWNiaUJjZEZ4MEx5OGdVbVYwZFhKdUlIUm9aU0JsZUhCdmNuUnpJRzltSUhSb1pTQnRiMlIxYkdWY2JpQmNkRngwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVJRngwZlZ4dVhHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bGN5QnZZbXBsWTNRZ0tGOWZkMlZpY0dGamExOXRiMlIxYkdWelgxOHBYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtMGdQU0J0YjJSMWJHVnpPMXh1WEc0Z1hIUXZMeUJsZUhCdmMyVWdkR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1aklEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdaR1ZtYVc1bElHZGxkSFJsY2lCbWRXNWpkR2x2YmlCbWIzSWdhR0Z5Ylc5dWVTQmxlSEJ2Y25SelhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1RZ1BTQm1kVzVqZEdsdmJpaGxlSEJ2Y25SekxDQnVZVzFsTENCblpYUjBaWElwSUh0Y2JpQmNkRngwYVdZb0lWOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieWhsZUhCdmNuUnpMQ0J1WVcxbEtTa2dlMXh1SUZ4MFhIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCdVlXMWxMQ0I3WEc0Z1hIUmNkRngwWEhSamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExGeHVJRngwWEhSY2RGeDBaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUJjZEZ4MFhIUmNkR2RsZERvZ1oyVjBkR1Z5WEc0Z1hIUmNkRngwZlNrN1hHNGdYSFJjZEgxY2JpQmNkSDA3WEc1Y2JpQmNkQzh2SUdkbGRFUmxabUYxYkhSRmVIQnZjblFnWm5WdVkzUnBiMjRnWm05eUlHTnZiWEJoZEdsaWFXeHBkSGtnZDJsMGFDQnViMjR0YUdGeWJXOXVlU0J0YjJSMWJHVnpYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtNGdQU0JtZFc1amRHbHZiaWh0YjJSMWJHVXBJSHRjYmlCY2RGeDBkbUZ5SUdkbGRIUmxjaUE5SUcxdlpIVnNaU0FtSmlCdGIyUjFiR1V1WDE5bGMwMXZaSFZzWlNBL1hHNGdYSFJjZEZ4MFpuVnVZM1JwYjI0Z1oyVjBSR1ZtWVhWc2RDZ3BJSHNnY21WMGRYSnVJRzF2WkhWc1pWc25aR1ZtWVhWc2RDZGRPeUI5SURwY2JpQmNkRngwWEhSbWRXNWpkR2x2YmlCblpYUk5iMlIxYkdWRmVIQnZjblJ6S0NrZ2V5QnlaWFIxY200Z2JXOWtkV3hsT3lCOU8xeHVJRngwWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUW9aMlYwZEdWeUxDQW5ZU2NzSUdkbGRIUmxjaWs3WEc0Z1hIUmNkSEpsZEhWeWJpQm5aWFIwWlhJN1hHNGdYSFI5TzF4dVhHNGdYSFF2THlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd4Y2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YnlBOUlHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2NISnZjR1Z5ZEhrcElIc2djbVYwZFhKdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZZbXBsWTNRc0lIQnliM0JsY25SNUtUc2dmVHRjYmx4dUlGeDBMeThnWDE5M1pXSndZV05yWDNCMVlteHBZMTl3WVhSb1gxOWNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWNDQTlJRndpWENJN1hHNWNiaUJjZEM4dklFeHZZV1FnWlc1MGNua2diVzlrZFd4bElHRnVaQ0J5WlhSMWNtNGdaWGh3YjNKMGMxeHVJRngwY21WMGRYSnVJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eklEMGdNU2s3WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdkMlZpY0dGamF5OWliMjkwYzNSeVlYQWdabU16TURZMU5qSmxabVpsWTJVNVpEUTFNMk1pTENJb1puVnVZM1JwYjI0Z2QyVmljR0ZqYTFWdWFYWmxjbk5oYkUxdlpIVnNaVVJsWm1sdWFYUnBiMjRvY205dmRDd2dabUZqZEc5eWVTa2dlMXh1WEhScFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY2dKaVlnZEhsd1pXOW1JRzF2WkhWc1pTQTlQVDBnSjI5aWFtVmpkQ2NwWEc1Y2RGeDBiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1ZV04wYjNKNUtDazdYRzVjZEdWc2MyVWdhV1lvZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQmtaV1pwYm1VdVlXMWtLVnh1WEhSY2RHUmxabWx1WlNoY0luUnBZMnRsY2x3aUxDQmJYU3dnWm1GamRHOXllU2s3WEc1Y2RHVnNjMlVnYVdZb2RIbHdaVzltSUdWNGNHOXlkSE1nUFQwOUlDZHZZbXBsWTNRbktWeHVYSFJjZEdWNGNHOXlkSE5iWENKMGFXTnJaWEpjSWwwZ1BTQm1ZV04wYjNKNUtDazdYRzVjZEdWc2MyVmNibHgwWEhSeWIyOTBXMXdpZEdsamEyVnlYQ0pkSUQwZ1ptRmpkRzl5ZVNncE8xeHVmU2tvZEdocGN5d2dablZ1WTNScGIyNG9LU0I3WEc1eVpYUjFjbTRnTHlvcUtpb3FLaThnS0daMWJtTjBhVzl1S0cxdlpIVnNaWE1wSUhzZ0x5OGdkMlZpY0dGamEwSnZiM1J6ZEhKaGNGeHVMeW9xS2lvcUtpOGdYSFF2THlCVWFHVWdiVzlrZFd4bElHTmhZMmhsWEc0dktpb3FLaW9xTHlCY2RIWmhjaUJwYm5OMFlXeHNaV1JOYjJSMWJHVnpJRDBnZTMwN1hHNHZLaW9xS2lvcUwxeHVMeW9xS2lvcUtpOGdYSFF2THlCVWFHVWdjbVZ4ZFdseVpTQm1kVzVqZEdsdmJseHVMeW9xS2lvcUtpOGdYSFJtZFc1amRHbHZiaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0cxdlpIVnNaVWxrS1NCN1hHNHZLaW9xS2lvcUwxeHVMeW9xS2lvcUtpOGdYSFJjZEM4dklFTm9aV05ySUdsbUlHMXZaSFZzWlNCcGN5QnBiaUJqWVdOb1pWeHVMeW9xS2lvcUtpOGdYSFJjZEdsbUtHbHVjM1JoYkd4bFpFMXZaSFZzWlhOYmJXOWtkV3hsU1dSZEtTQjdYRzR2S2lvcUtpb3FMeUJjZEZ4MFhIUnlaWFIxY200Z2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdVpYaHdiM0owY3p0Y2JpOHFLaW9xS2lvdklGeDBYSFI5WEc0dktpb3FLaW9xTHlCY2RGeDBMeThnUTNKbFlYUmxJR0VnYm1WM0lHMXZaSFZzWlNBb1lXNWtJSEIxZENCcGRDQnBiblJ2SUhSb1pTQmpZV05vWlNsY2JpOHFLaW9xS2lvdklGeDBYSFIyWVhJZ2JXOWtkV3hsSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwZ1BTQjdYRzR2S2lvcUtpb3FMeUJjZEZ4MFhIUnBPaUJ0YjJSMWJHVkpaQ3hjYmk4cUtpb3FLaW92SUZ4MFhIUmNkR3c2SUdaaGJITmxMRnh1THlvcUtpb3FLaThnWEhSY2RGeDBaWGh3YjNKMGN6b2dlMzFjYmk4cUtpb3FLaW92SUZ4MFhIUjlPMXh1THlvcUtpb3FLaTljYmk4cUtpb3FLaW92SUZ4MFhIUXZMeUJGZUdWamRYUmxJSFJvWlNCdGIyUjFiR1VnWm5WdVkzUnBiMjVjYmk4cUtpb3FLaW92SUZ4MFhIUnRiMlIxYkdWelcyMXZaSFZzWlVsa1hTNWpZV3hzS0cxdlpIVnNaUzVsZUhCdmNuUnpMQ0J0YjJSMWJHVXNJRzF2WkhWc1pTNWxlSEJ2Y25SekxDQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLVHRjYmk4cUtpb3FLaW92WEc0dktpb3FLaW9xTHlCY2RGeDBMeThnUm14aFp5QjBhR1VnYlc5a2RXeGxJR0Z6SUd4dllXUmxaRnh1THlvcUtpb3FLaThnWEhSY2RHMXZaSFZzWlM1c0lEMGdkSEoxWlR0Y2JpOHFLaW9xS2lvdlhHNHZLaW9xS2lvcUx5QmNkRngwTHk4Z1VtVjBkWEp1SUhSb1pTQmxlSEJ2Y25SeklHOW1JSFJvWlNCdGIyUjFiR1ZjYmk4cUtpb3FLaW92SUZ4MFhIUnlaWFIxY200Z2JXOWtkV3hsTG1WNGNHOXlkSE03WEc0dktpb3FLaW9xTHlCY2RIMWNiaThxS2lvcUtpb3ZYRzR2S2lvcUtpb3FMMXh1THlvcUtpb3FLaThnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pYTWdiMkpxWldOMElDaGZYM2RsWW5CaFkydGZiVzlrZFd4bGMxOWZLVnh1THlvcUtpb3FLaThnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtMGdQU0J0YjJSMWJHVnpPMXh1THlvcUtpb3FLaTljYmk4cUtpb3FLaW92SUZ4MEx5OGdaWGh3YjNObElIUm9aU0J0YjJSMWJHVWdZMkZqYUdWY2JpOHFLaW9xS2lvdklGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVqSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsY3p0Y2JpOHFLaW9xS2lvdlhHNHZLaW9xS2lvcUx5QmNkQzh2SUdSbFptbHVaU0JuWlhSMFpYSWdablZ1WTNScGIyNGdabTl5SUdoaGNtMXZibmtnWlhod2IzSjBjMXh1THlvcUtpb3FLaThnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUWdQU0JtZFc1amRHbHZiaWhsZUhCdmNuUnpMQ0J1WVcxbExDQm5aWFIwWlhJcElIdGNiaThxS2lvcUtpb3ZJRngwWEhScFppZ2hYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV2S0dWNGNHOXlkSE1zSUc1aGJXVXBLU0I3WEc0dktpb3FLaW9xTHlCY2RGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z2JtRnRaU3dnZTF4dUx5b3FLaW9xS2k4Z1hIUmNkRngwWEhSamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExGeHVMeW9xS2lvcUtpOGdYSFJjZEZ4MFhIUmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVMeW9xS2lvcUtpOGdYSFJjZEZ4MFhIUm5aWFE2SUdkbGRIUmxjbHh1THlvcUtpb3FLaThnWEhSY2RGeDBmU2s3WEc0dktpb3FLaW9xTHlCY2RGeDBmVnh1THlvcUtpb3FLaThnWEhSOU8xeHVMeW9xS2lvcUtpOWNiaThxS2lvcUtpb3ZJRngwTHk4Z1oyVjBSR1ZtWVhWc2RFVjRjRzl5ZENCbWRXNWpkR2x2YmlCbWIzSWdZMjl0Y0dGMGFXSnBiR2wwZVNCM2FYUm9JRzV2Ymkxb1lYSnRiMjU1SUcxdlpIVnNaWE5jYmk4cUtpb3FLaW92SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXVJRDBnWm5WdVkzUnBiMjRvYlc5a2RXeGxLU0I3WEc0dktpb3FLaW9xTHlCY2RGeDBkbUZ5SUdkbGRIUmxjaUE5SUcxdlpIVnNaU0FtSmlCdGIyUjFiR1V1WDE5bGMwMXZaSFZzWlNBL1hHNHZLaW9xS2lvcUx5QmNkRngwWEhSbWRXNWpkR2x2YmlCblpYUkVaV1poZFd4MEtDa2dleUJ5WlhSMWNtNGdiVzlrZFd4bFd5ZGtaV1poZFd4MEoxMDdJSDBnT2x4dUx5b3FLaW9xS2k4Z1hIUmNkRngwWm5WdVkzUnBiMjRnWjJWMFRXOWtkV3hsUlhod2IzSjBjeWdwSUhzZ2NtVjBkWEp1SUcxdlpIVnNaVHNnZlR0Y2JpOHFLaW9xS2lvdklGeDBYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1Rb1oyVjBkR1Z5TENBbllTY3NJR2RsZEhSbGNpazdYRzR2S2lvcUtpb3FMeUJjZEZ4MGNtVjBkWEp1SUdkbGRIUmxjanRjYmk4cUtpb3FLaW92SUZ4MGZUdGNiaThxS2lvcUtpb3ZYRzR2S2lvcUtpb3FMeUJjZEM4dklFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JGeHVMeW9xS2lvcUtpOGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG04Z1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lIQnliM0JsY25SNUtTQjdJSEpsZEhWeWJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxWldOMExDQndjbTl3WlhKMGVTazdJSDA3WEc0dktpb3FLaW9xTDF4dUx5b3FLaW9xS2k4Z1hIUXZMeUJmWDNkbFluQmhZMnRmY0hWaWJHbGpYM0JoZEdoZlgxeHVMeW9xS2lvcUtpOGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5BZ1BTQmNJbHdpTzF4dUx5b3FLaW9xS2k5Y2JpOHFLaW9xS2lvdklGeDBMeThnVEc5aFpDQmxiblJ5ZVNCdGIyUjFiR1VnWVc1a0lISmxkSFZ5YmlCbGVIQnZjblJ6WEc0dktpb3FLaW9xTHlCY2RISmxkSFZ5YmlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjeUE5SURBcE8xeHVMeW9xS2lvcUtpOGdmU2xjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNHZLaW9xS2lvcUx5QW9XMXh1THlvZ01DQXFMMXh1THlvcUtpOGdLR1oxYm1OMGFXOXVLRzF2WkhWc1pTd2daWGh3YjNKMGN5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWtnZTF4dVhHNWNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVYRzUyWVhJZ1gxUnBZMnRGYm5SeWVTQTlJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTVNrN1hHNWNiblpoY2lCZlZHbGphMFZ1ZEhKNU1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gxUnBZMnRGYm5SeWVTazdYRzVjYm1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9iMkpxS1NCN0lISmxkSFZ5YmlCdlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVWdQeUJ2WW1vZ09pQjdJR1JsWm1GMWJIUTZJRzlpYWlCOU95QjlYRzVjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5VWFXTnJSVzUwY25reUxtUmxabUYxYkhRN1hHNWNiaThxS2lvdklIMHBMRnh1THlvZ01TQXFMMXh1THlvcUtpOGdLR1oxYm1OMGFXOXVLRzF2WkhWc1pTd2daWGh3YjNKMGN5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWtnZTF4dVhHNWNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JseDBkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVYRzUyWVhJZ1gwMWhibUZuWlhJZ1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRElwTzF4dVhHNTJZWElnWDAxaGJtRm5aWEl5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmVFdGdVlXZGxjaWs3WEc1Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3SUdSbFptRjFiSFE2SUc5aWFpQjlPeUI5WEc1Y2JtWjFibU4wYVc5dUlGOWpiR0Z6YzBOaGJHeERhR1ZqYXlocGJuTjBZVzVqWlN3Z1EyOXVjM1J5ZFdOMGIzSXBJSHNnYVdZZ0tDRW9hVzV6ZEdGdVkyVWdhVzV6ZEdGdVkyVnZaaUJEYjI1emRISjFZM1J2Y2lrcElIc2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0JqWVd4c0lHRWdZMnhoYzNNZ1lYTWdZU0JtZFc1amRHbHZibHdpS1RzZ2ZTQjlYRzVjYmk4dklIUnZSRzg2SUhOMWNIQnZjblFnWW05MGFDQmpZV3hzWW1GamF5QmhibVFnY0hKdmJXbHpaVnh1ZG1GeUlGUnBZMnRGYm5SeWVTQTlYRzR2S2lwY2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmpiMjUwWlhoMElDMGdWR2hsSUZ3aWRHaHBjMXdpSUdGeVozVnRaVzUwSUdadmNpQjBhR1VnYkdsemRHVnVaWElnWm5WdVkzUnBiMjR1WEc0Z0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQnNhWE4wWlc1bGNpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1ZHbGphMFZ1ZEhKNUtHTnZiblJsZUhRc0lHeHBjM1JsYm1WeUtTQjdYRzVjZEhaaGNpQmpZV3hzWW1GamF5QTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF5SUNZbUlHRnlaM1Z0Wlc1MGMxc3lYU0FoUFQwZ2RXNWtaV1pwYm1Wa0lEOGdZWEpuZFcxbGJuUnpXekpkSURvZ2JuVnNiRHRjYmx4MGRtRnlJSEJ5YVc5eWFYUjVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURNZ0ppWWdZWEpuZFcxbGJuUnpXek5kSUNFOVBTQjFibVJsWm1sdVpXUWdQeUJoY21kMWJXVnVkSE5iTTEwZ09pQXdPMXh1WEc1Y2RGOWpiR0Z6YzBOaGJHeERhR1ZqYXloMGFHbHpMQ0JVYVdOclJXNTBjbmtwTzF4dVhHNWNkSFJvYVhNdVkyOXVkR1Y0ZENBOUlHTnZiblJsZUhRN1hHNWNkSFJvYVhNdWJHbHpkR1Z1WlhJZ1BTQnNhWE4wWlc1bGNqdGNibHgwZEdocGN5NWpZV3hzWW1GamF5QTlJR05oYkd4aVlXTnJPMXh1WEhSMGFHbHpMbkJ5YVc5eWFYUjVJRDBnY0hKcGIzSnBkSGs3WEc1OU8xeHVYRzR2S2kwdExTMGdVSFZpYkdsamZGQnliM1J2ZEhsd1pTQk5aWFJvYjJSeklDMHRMU292WEc1Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlGUnBZMnRGYm5SeWVUdGNibFJwWTJ0RmJuUnllUzV3Y205MGIzUjVjR1V1WkdsemNHOXpaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNibHgwZEdocGN5NWpiMjUwWlhoMElEMGdiblZzYkR0Y2JseDBkR2hwY3k1c2FYTjBaVzVsY2lBOUlHNTFiR3c3WEc1Y2RIUm9hWE11WTJGc2JHSmhZMnNnUFNCdWRXeHNPMXh1WEhSMGFHbHpMbkJ5YVc5eWFYUjVJRDBnYm5Wc2JEdGNibjA3WEc1Y2JsUnBZMnRGYm5SeWVTNXdjbTkwYjNSNWNHVXVaWGhsWTNWMFpTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYMDFoYm1GblpYSXlMbVJsWm1GMWJIUXVZV1JrS0hSb2FYTXBPMXh1ZlR0Y2JseHVWR2xqYTBWdWRISjVMbkJ5YjNSdmRIbHdaUzVuWlhSTllYaFFjbWx2Y21sMGVTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBjbVYwZFhKdUlGOU5ZVzVoWjJWeU1pNWtaV1poZFd4MExtZGxkRTFoZUZCeWFXOXlhWFI1S0NrN1hHNTlPMXh1WEc0dktpb3FMeUI5S1N4Y2JpOHFJRElnS2k5Y2JpOHFLaW92SUNobWRXNWpkR2x2YmlodGIyUjFiR1VzSUdWNGNHOXlkSE1zSUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4cElIdGNibHh1WENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzVjZEhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYmx4dVpuVnVZM1JwYjI0Z1gyTnNZWE56UTJGc2JFTm9aV05yS0dsdWMzUmhibU5sTENCRGIyNXpkSEoxWTNSdmNpa2dleUJwWmlBb0lTaHBibk4wWVc1alpTQnBibk4wWVc1alpXOW1JRU52Ym5OMGNuVmpkRzl5S1NrZ2V5QjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJR05oYkd3Z1lTQmpiR0Z6Y3lCaGN5QmhJR1oxYm1OMGFXOXVYQ0lwT3lCOUlIMWNibHh1ZG1GeUlISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaVWxrSUQwZ1RtRk9PMXh1ZG1GeUlIQnlhVzl5YVhSNVJXNTBjbWxsY3lBOUlGdHVkV3hzTENCdWRXeHNMQ0J1ZFd4c0xDQnVkV3hzWFR0Y2JseHVablZ1WTNScGIyNGdiMjVVYVdOcktDa2dlMXh1WEhSbWIzSWdLSFpoY2lCcGJtUmxlQ0E5SURBN0lHbHVaR1Y0SUR3Z2NISnBiM0pwZEhsRmJuUnlhV1Z6TG14bGJtZDBhRHNnYVc1a1pYZ3JLeWtnZTF4dVhIUmNkSFpoY2lCMGFXTnJSVzUwY21sbGN5QTlJSEJ5YVc5eWFYUjVSVzUwY21sbGMxdHBibVJsZUYwN1hHNWNkRngwYVdZZ0tIUnBZMnRGYm5SeWFXVnpJQ1ltSUhScFkydEZiblJ5YVdWekxteGxibWQwYUNBK0lEQXBJSHRjYmx4MFhIUmNkR1Y0WldOMWRHVlVhV05yUlc1MGNtbGxjeWgwYVdOclJXNTBjbWxsY3lrN1hHNWNkRngwWEhRdkwwTnNaV0Z5SUhSb1pXMGdiMjVqWlNCbGVHVmpkWFJsWkZ4dVhIUmNkRngwY0hKcGIzSnBkSGxGYm5SeWFXVnpXMmx1WkdWNFhTQTlJRzUxYkd3N1hHNWNkRngwZlZ4dVhIUjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHVjRaV04xZEdWVWFXTnJSVzUwY21sbGN5aDBhV05yUlc1MGNtbGxjeWtnZTF4dVhIUXZMeUJwYlhCdmNuUmhiblFnZEc4Z2RYTmxJR1p2Y2kxc2IyOXdYRzVjZEM4dklIUnBZMnRGYm5SeWFXVnpJR2R5YjNkeklHUjVibUZ0YVdOaGJHeDVJR0o1SUc5dVpTQnZaaUJwZEhNZ1pXNTBjbmxjYmx4MEx5OGdabTl5SUdWNFlXMXdiR1U2SUd4bGRDQnpZWGtnZDJVZ2FHRjJaU0J2Ym1VZ1pXNTBjbmtzSUdGdVpDQmxlR1ZqZFhScGJtY2dkR2hoZENCbGJuUnllU0J0YVdkb2RDQmhaR1J6SUdGdWIzUm9aWElnWlc1MGNubGNibHgwTHk4Z2QybDBhQ0J0WVhBZ1puVnVZM1JwYjI0Z2QyVWdZMkZ1ZENCbGVHVmpkWFJsSUdSNWJtRnRhV05oYkd4NUlHZHliM2RwYm1jZ1pXNTBjbWxsY3k1Y2JseDBabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYVdOclJXNTBjbWxsY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1WEhSY2RIWmhjaUIwYVdOclJXNTBjbmtnUFNCMGFXTnJSVzUwY21sbGMxdHBYVHRjYmx4MFhIUjBhV05yUlc1MGNua3ViR2x6ZEdWdVpYSXVZMkZzYkNoMGFXTnJSVzUwY25rdVkyOXVkR1Y0ZENCOGZDQjBhV05yUlc1MGNua3ViR2x6ZEdWdVpYSmJKM1JvYVhNblhTazdYRzVjZEZ4MGFXWWdLSFJwWTJ0RmJuUnllUzVqWVd4c1ltRmpheWtnZTF4dVhIUmNkRngwZEdsamEwVnVkSEo1TG1OaGJHeGlZV05yTG1OaGJHd29kR2xqYTBWdWRISjVMbU5oYkd4aVlXTnJXeWQwYUdsekoxMHBPMXh1WEhSY2RIMWNibHgwZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzBGa1pHVmtRV3h5WldGa2VTaGxiblJ5ZVN3Z2RHbGphMFZ1ZEhKcFpYTXBJSHRjYmx4MEx5OGdhVzF3YjNKMFlXNTBJSFJ2SUhWelpTQm1iM0l0Ykc5dmNGeHVYSFF2THlCMGFXTnJSVzUwY21sbGN5Qm5jbTkzY3lCa2VXNWhiV2xqWVd4c2VTQmllU0J2Ym1VZ2IyWWdhWFJ6SUdWdWRISjVYRzVjZEM4dklHWnZjaUJsZUdGdGNHeGxPaUJzWlhRZ2MyRjVJSGRsSUdoaGRtVWdiMjVsSUdWdWRISjVMQ0JoYm1RZ1pYaGxZM1YwYVc1bklIUm9ZWFFnWlc1MGNua2diV2xuYUhRZ1lXUmtjeUJoYm05MGFHVnlJR1Z1ZEhKNVhHNWNkQzh2SUhkcGRHZ2diV0Z3SUdaMWJtTjBhVzl1SUhkbElHTmhiblFnWlhobFkzVjBaU0JrZVc1aGJXbGpZV3hzZVNCbmNtOTNhVzVuSUdWdWRISnBaWE11WEc1Y2RHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkR2xqYTBWdWRISnBaWE11YkdWdVozUm9PeUJwS3lzcElIdGNibHgwWEhSMllYSWdkR2xqYTBWdWRISjVJRDBnZEdsamEwVnVkSEpwWlhOYmFWMDdYRzVjZEZ4MGFXWWdLR1Z1ZEhKNUxtTnZiblJsZUhRZ1BUMDlJSFJwWTJ0RmJuUnllUzVqYjI1MFpYaDBJQ1ltSUdWdWRISjVMbXhwYzNSbGJtVnlJRDA5UFNCMGFXTnJSVzUwY25rdWJHbHpkR1Z1WlhJcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCMGNuVmxPMXh1WEhSY2RIMWNibHgwZlZ4dVhIUnlaWFIxY200Z1ptRnNjMlU3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlVOaGJHeGlZV05yS0NrZ2UxeHVYSFJ2YmxScFkyc29LVHRjYmx4MGNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxTV1FnUFNCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaVU5oYkd4aVlXTnJLVHRjYm4xY2JseHVkbUZ5SUZScFkydE5ZVzVoWjJWeUlEMGdablZ1WTNScGIyNGdWR2xqYTAxaGJtRm5aWElvS1NCN1hHNWNkRjlqYkdGemMwTmhiR3hEYUdWamF5aDBhR2x6TENCVWFXTnJUV0Z1WVdkbGNpazdYRzVjYmx4MGNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxTV1FnUFNBd095QXZMeUJtYjNJZ1YybHVaRzkzY3lCRmJuWmNibHgwZEdocGN5NXpkR0Z5ZENncE8xeHVmVHRjYmx4dVZHbGphMDFoYm1GblpYSXVjSEp2ZEc5MGVYQmxMbUZrWkNBOUlHWjFibU4wYVc5dUlDaDBhV05yUlc1MGNua3BJSHRjYmx4MGRtRnlJSEJ5YVc5eWFYUjVJRDBnZEdsamEwVnVkSEo1TG5CeWFXOXlhWFI1TEZ4dVhIUWdJQ0FnWTJGc2JHSmhZMnNnUFNCMGFXTnJSVzUwY25rdVkyRnNiR0poWTJzN1hHNWNibHgwYVdZZ0tDRndjbWx2Y21sMGVVVnVkSEpwWlhOYmNISnBiM0pwZEhsZEtTQjdYRzVjZEZ4MGNISnBiM0pwZEhsRmJuUnlhV1Z6VzNCeWFXOXlhWFI1WFNBOUlGdGRPMXh1WEhSY2RIWmhjaUJmZEdsamEwVnVkSEpwWlhNZ1BTQndjbWx2Y21sMGVVVnVkSEpwWlhOYmNISnBiM0pwZEhsZE8xeHVYSFJjZEY5MGFXTnJSVzUwY21sbGN5NXdkWE5vS0hScFkydEZiblJ5ZVNrN1hHNWNkRngwY21WMGRYSnVPMXh1WEhSOVhHNWNkSFpoY2lCMGFXTnJSVzUwY21sbGN5QTlJSEJ5YVc5eWFYUjVSVzUwY21sbGMxdHdjbWx2Y21sMGVWMDdYRzVjZEdsbUlDaHBjMEZrWkdWa1FXeHlaV0ZrZVNoMGFXTnJSVzUwY25rc0lIUnBZMnRGYm5SeWFXVnpLU2tnZTF4dVhIUmNkR05oYkd4aVlXTnJJQ1ltSUdOaGJHeGlZV05yS0hSeWRXVXBPMXh1WEhSOUlHVnNjMlVnZTF4dVhIUmNkSFJwWTJ0RmJuUnlhV1Z6TG5CMWMyZ29kR2xqYTBWdWRISjVLVHRjYmx4MGZWeHVmVHRjYmx4dUx5OGdWRzlrYnpvZ1UzVndjRzl5ZENCbWIzSWdUbTlrWlVwVElGeHVWR2xqYTAxaGJtRm5aWEl1Y0hKdmRHOTBlWEJsTG5OMFlYSjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJwWmlBb2QybHVaRzkzS1NCN1hHNWNkRngwTHk4Z2QybHNiQ0J5WldObGFYWmxjeUIwYVcxbGMzUmhiWEFnWVhNZ1lYSm5kVzFsYm5SY2JseDBYSFF2TDNSdlpHODZJRXhsWVhKdU9pQWdkR2hsSUhCMWNuQnZjMlVnYjJZZ2RHbHRaWE4wWVcxd1hHNWNkRngwY21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbFNXUWdQU0IzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsS0hKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpVTmhiR3hpWVdOcktUdGNibHgwZlZ4dWZUdGNibHh1VkdsamEwMWhibUZuWlhJdWNISnZkRzkwZVhCbExuTjBiM0FnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEdsbUlDaDNhVzVrYjNjcElIdGNibHgwWEhSM2FXNWtiM2N1WTJGdVkyVnNRVzVwYldGMGFXOXVSbkpoYldVb2NtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxTV1FwTzF4dVhIUjlYRzU5TzF4dVhHNVVhV05yVFdGdVlXZGxjaTV3Y205MGIzUjVjR1V1WjJWMFRXRjRVSEpwYjNKcGRIa2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNWNkSEpsZEhWeWJpQndjbWx2Y21sMGVVVnVkSEpwWlhNdWJHVnVaM1JvSUMwZ01UdGNibjA3WEc1Y2JuWmhjaUJ6YVc1bmJHVjBiMjVKYm5OMFlXNWpaU0E5SUc1bGR5QlVhV05yVFdGdVlXZGxjaWdwTzF4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQnphVzVuYkdWMGIyNUpibk4wWVc1alpUdGNibHh1THlvcUtpOGdmU2xjYmk4cUtpb3FLaW92SUYwcE8xeHVmU2s3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WTJoaGNuTmxkRDExZEdZdE9EdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNucGlNMVo1V1RKV2VrbHFjR0pKYm1Sc1dXNUNhRmt5Y3paTWVUaDJaREpXYVdOSFJtcGhlVGt4WW0xc01scFlTbnBaVjNoT1lqSlNNV0pIVmtWYVYxcHdZbTFzTUdGWE9YVkphWGRwWkRKV2FXTkhSbXBoZW05MlRIazVNMXBYU25kWlYwNXlUREpLZG1JelVucGtTRXBvWTBOQmQxcFhUVFZOUkd4dFdrUkdhbHB0VlhwTlZHeHRXbXBWTVU1VFNYTkpibVJzV1c1Q2FGa3ljelpNZVRoMlRHazVjMkZYU1haaFZ6VnJXbGhuZFdGdVRXbE1RMG96V2xkS2QxbFhUbkpQYVRoMlRIazBkbUpIYkdsTU1WSndXVEowUm1KdVVubGxVelZ4WTNsSmMwbHVaR3haYmtKb1dUSnpOa3g1T0haTWFUbHpZVmRKZGxSWFJuVlpWMlJzWTJrMWNXTjVTbVJNUTBwMVdWY3hiR041U1RaWGVVcFZZVmRPY2xKWE5UQmpibXRwVEVOS2FtSXlOVEJhV0dnd1NXbDNhV0pIYkhwa1IxWjFXbGhKYVV4RFNtcFpWM2h6V1cxR2FtRjVTWE5KYmtKNVlWYzVlV0ZZVWpWSmFYZHBZMGhLZG1SSE9UQmxXRUpzU1dsM2FWcEhiSHBqUnpsNldsTkpjMGx0VmpSYVYwNHhaRWRWYVV4RFNtaGFSMUZwVEVOS2JscFlVazVaV0doUlkyMXNkbU50YkRCbFUwbHpTVzVLYkdOWVZteGpNMUpDWW0xc2RGbFlVbkJpTWpWSFkyMUdkRnBWYkd0SmFYZHBWRzFHVDBscGQybGpTRXB3WWpOS2NHUkliRVppYmxKNVlWZFdla2xwZDJsaU1qVlZZVmRPY2tscGQybGhWelZyV2xobmFVeERTbk5hVnpWdVpFZG5hVXhEU2pCaFYwNXlVbGMxTUdOdGJHeGplVWx6U1cxV05GcFhUakZrUjFaVllWZE9jbEpYTlRCamJXeHNZM2xKYzBsdGEybE1RMG93WVZkT2NsSlhOVEJqYm10cFRFTkthbGxYZUhOSmFYZHBZVmhPUWxwSFVteGFSVVp6WTIxV2FGcElhMmxNUTBwc1ltNVNlV1ZUU1hOSmJrcHNZMWhXYkdNelVrSmliV3gwV1ZoU2NHSXlOVWRqYlVaMFdsVk9hR0pIZUdsWlYwNXlTV2wzYVdReWJIVmFSemt6U1dsM2FXTnRWbmhrVjFaNlpFVkdkV0ZYTVdoa1IyeDJZbXRhZVZsWE1XeEphWGRwVmtkc2FtRXdNV2hpYlVadVdsaEphVXhEU25wa1IwWjVaRU5KYzBsdVFqRmpNbWRwVEVOS2VtUkhPWGRKYVhkcFdUSkdkVmt5Vm5OUlZ6VndZbGRHTUdGWE9YVlNia3BvWWxkVmFVeERTbnBoVnpWdVlrZFdNR0l5TlVwaWJrNHdXVmMxYWxwVFNtUk1RMHAwV1ZoQ2QyRlhOVzVqZVVrMlNXdEdRbEZWUlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSWE5STUVaQ1VYcDBRbEZWVGtWTVJUZzNVVlZPVjFGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMDh3UmtKU1ZVVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOTZkRUpSVlZaQ1R6QkdRbEV3UlRkUlZVWkVVVlJ6TjA4d1JrSlNNRVUzVVZWR1JGRlVjemRSVlVaR1VWUjBRbEZWVGtKUGVuUkNVVlZXUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRmMxbFZSa0pUZW5SQ1VWVk9UVTh3UmtKUk1FVTNUekJHUWxKVlJUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZjMkpWVGtKUlZFcERURVJDUTFGVlJYZFJhWGhHVVZWR1JrOHdSa0pSTTFwRlRFaHNSRkZWUm5CUmVYaHNVVlZHYkU4d1JrSlJNbWhGVHpCR1FsRXdSVGRSVlVaRVVWUnpOMUZWUmtaUlZIUkNVVlZPUWt4RWFFVlJWVVo2VWtOM2NsSkZSa0pMTUZFM1R6QkdRbEpZU2tsUE1FWkNVVEJGTjA4d1JrSlNWVVUzVVZWR1JGRlVjemRQZW5NM1QzcHpOMDk2Y3pkUGVuTTNVVlZOTTFKRlJUZFBlbk0zVDNwek4wOTZjemRQZW5NM1QzcHpOMDk2Y3pkUlZVNUNVVlJ6TjA5NmN6ZFBlbk0zVVZWR1JsRlVkRXBSVlU1NFVXdEZjMVY2ZEVKUlZWWjNVV3B6TjA5NmRFSlJWV3hDVEVjeFExRlZSbHBSZVhoUVVWVkdZVXhGVmtKUldFWkRVWGw0VWxGVlJubFJhWGhHVVZWT1FrOHdSa0pSVlVWelV6QkdSVXN3U2tSTVJrWkNVWGs1UTB4SVZrWlJWVkYzVVhsNFNsRlZUWGhSZW5SQ1VWVkdRa3hGZEVKU1IyUkZVWGw0VWxGVlRtOVNRM2d4VWxWR1JVMXJVWE5STUVaRVRUQlJOMDh3UmtKUlZVVTNUekJHUWxFd1RYTlVWVVpDVXpCbmMxUXdSa0pVUTNoSVVWVkdiRkZUZUZCUlZVWnRUekJHUWxFd1JYTlVWVVpDVXpCTmMxVlZSa0pVUTNoSVVWVkdibEZyUlhOVlZVWkNZVVZKTjFGVlJrUlJVM2hPVVZWR1RGRjVlRkpSVlVaTlRFVmtRbEZYWkVOUlUzaFNVVlZHYjFGcWRFSlJWVTVDVEVVeFFsRlZkRVJNUmtaQ1VWVjNjMUl3UmtKYU1FcENURVpHUWxGWGFFTlBNRVpDVVRCRmMxRjZjemRSVlVaS1VtcHpOMkV3U2tKaFJVcDRVV3R2YzFWNmRFSlJWM1JEWTJ0S1FreEdWa0pSVmxaTVRFWk9RbEZXV1hOUk1FWkNZakJLUkV4Rk9VSlJXRUpEVEVWa1FsRlVhRU5NUm14Q1VWWlZOMUZWUmtSa2EwMXpWRlZHUWxNd2QzTlVNRVpDVkVONFNGRlZSbXhNUld4Q1VWZFpOMUZWUmtSUlUzaE9VVlZHVEZGNWVGSlJWVVpOVEVWa1FsRlhaRU5NUld4Q1VWZG9RMDh3UmtKUk1FVnpWRlZHUWxNd1RYTlZWVVpDVkVONFNGRlZSbTVSYVhoS1VWVkdiMUZxZEVKUlZVNUNURVV4UWxGVmRFUk1Sa1pDVVZWM2MxSXdSa0phTUVselUxVkdRbUZGU1RkUlZVWkVVVk40UkZGVmVFVlBlblJDVVZVNVFsTnBlRlpSVlVaV1UzbDRWRkZWUmxkTVJVNUNVVmM1UTFKVGVGQlJWVVozVVdsNFNGRlZSVFJSYVhoYVVWVkdWazh3UmtKUk0xcEVURWN4UTFGVlJsSlJlWGhJVVZWR1UweEZUa0pSVm10elUxVkdRbGRxZEVKUlZVNUNURVZPUWxKclVUZFBNRVpDVTFWR1UweEdWa0pSVmxaTVRFWk9RbEZXV1hOUk1FWkNZakJLU2t4SFRrSlJXRUpEVEVWa1FsRllSa1JNUm14Q1VWWlZOMUZWUmtSUFZVMXpWVlZHUWxSNWVISlJhMFpDVlZWRmMxa3dSa0pWYVhoR1VWVkdVVTh3UmtKUk1FVnpVVEJHUjFKRGVFUlBlbk0zVDNwek4wOTZjemRQZW5NM1QzcHpOMUZWVFhaUmEwVnpVMVZHUWxOVlRYTk5SVXBDVVZSQ1ExRjVlRWhSVlVVMVVXcDBRbEZWVGtKTVJXeENVVlV4UkV4SGRFTlJWVVp5VVdsNFJGRlZSa1JNUld4Q1VWVlJjMUpWUmtKVWVYaEtVVlZHVVV4RlZrSlJWMFZ6VTFWR1FsbHBlRVpSVlVaMFVXbDRTbEZWUm5WUmFYaEVVVlZHTkZGcWN6ZFJWVVpHVVZONFZGRlZSbFJSZVhoT1VWVkdWVXhGWkVKUlYyeERUekJHUWxFeWFFTk1SVEZDVVZWcmMxTlZSa0pUVlUxelZWVkdRbFZUZUVSUlZVWnZVV2w0UmxGVlJuWlJhMFZ6VlZWR1FsVlZXWE5hTUVwQ1VWZGtRMUo1ZUU1UlZVVXhVWGw0UmxGVlJuWlNSVkZ6VkRCR1FtTkZVWE5TVlVaQ1RrVlJOMUZWUmtSTk1GRnpWRlZHUWxOVlZYTlpNRVpDV1RCdmMxb3dTa0pSVjJSRFVsTjRURkZWUm05UmFYaEVVVlZHYzFGcWRFSlJWVTVDVEVVeFFsRlZaRVpNUjFaQ1VWZFdRa3hHYkVKUlZteEZURVV4UWxGV2IzTlNNRVpDWTFWSmMxRXdSa0prYTAxelVsVkdRazFGVFRkUlZVWkVaV3RPUmt4SVRrTlJWVVowVVd0UmMxWXdSa0ppYTBrM1VWVkdSRkZVZEVKUlZVNUNVMmw0ZEZGclJrSmFNRXBHVEVWMFFsRlhhRU5NUld4Q1VWaHNRMHhGYkVKUldIQkRUekJHUWxFd1JUZFJWVVpFVWtSMFFsRlZUa1ZQZW5SQ1VWVldSVXhHVGtKUlZrNUlURWQwUTFGVlJsVk1SVTVDVVZSU1ExSkRlRmhSVlVVeFVXbDRSbEZWUmpOUmVuUkNVVlZPTWxGNmRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKTVJURkNVVlZyYzFOVlJrSlRWVlZ6VTFWR1FsTlRlRVJSVlVaaFRFVldRbEZYVmtKTVJXeENVVlZzUjB4R2JFSlJWbXhGVEVVeFFsRlRPVU5NUlZaQ1VWaFdSRko1ZUVoUlZVWXlVWGw0UmxGVlJYbFJlblJDVVZWTmVGRjVlRTVSVlVaT1VYbDRXbEZWUmxwVFEzaGFVVlZHV2xKVGVFUlJWVVpoVEVWT1FsRlhlRU5QTUVaQ1VUQkdSRXhHYkVKUlZsWnhVV2w0VWxGVlJsZE1SVTVDVVZjeFEyRXdTWE5UVlVaQ1ltdEpjMUV3UmtKa01FcEZURVpXUWxGV1ZuTlJhWGhRVVZWR1YweEZiRUpSV0VaRFlUQkpjMVpWUmtKV1YzQkRURVpHUWxGV1dYTlJNRVpDWWxWSmMxUlZSa0ppYTBselVUQkdRazR3VFRkUlZVWkVVVk40VGxGVlJrcGhWVWx6VmxWR1FsWlhhRU5NUmtaQ1VWZFJjMUpWUmtKa01FazNVVlZHUkdSclNtNVJhWGhvVVZWR1ZtRkZTWE5WVlVaQ1ZtbDRSRkZWUm5SUmJXeERURVZzUWxGWE5VTk1SVTVDVVZoa1ExSkRlRlpSVlVaV1lVVkpjMVZWUmtKV2FYaEVVVlZHZEZGcGVFNVJWVVoxVVdsNFJGRlZSalJSYW5SQ1VWVk9Razh3UmtKUk1GRTNVVlZHUkZKRWN6ZFJWVVpHVWtONFZGRlZSbFJoTUVseldUQkdRbFpEZUVSUlZVWXpVV3ROYzFNd1JrSmxSVWx6VWxWR1FrOUZTazlNUm1SQ1VWUnNRMHhGVmtKUlZFSkVUekJHUWxFemNFUlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVnpWRlZHUWxOVGVFcFJWVVpLVWxONFNsRlZSa3BNUlU1Q1VWWnZjMUpWUmtKYVZVVnpVMVZHUWxOVldYTlhWVVpDVjFWUmMxUlZSa0pNTUVselVsVkdRbVJWVGtoTVJXUkNVVmhhUkV4RlZrSlJWRXBFVHpCR1FsRjZSa1JNUlRGQ1VWVXhSRXhHYkVKUlZteEpURVpzUWxGV2JFWk1SVTVDVVZadmMxRXdSa0ppUlVrM1VWVkdSRkZUZUU1UlZVWklVMU40VGxGVlJrNWphMGx6VkRCR1FsUnBlRXhSVlVaeVVXMTBRMHhHVmtKUlZsWnpVV2w0VUZGVlJURlJhWGhLVVZWR01WRXpSa05NUlRGQ1VWVXhkMUZwZUZKUlZVWlBURVYwUWxGWE1VTmhWVWx6VmxWR1FsWlhjRU5NUmtaQ1VWaGFSa3hGVmtKUlYyUkhUekJHUWxGNU9VWk1SbFpDVVZVNGMxTlZSa0pWUkhSQ1VWVk9Razh3UmtKUk1GRTNVVlZHUkZKRGVGSlJWVVpRVEVWMFFsRldRVGRSVlVaRVVWUnpOMUZWUmtaU1EzaFVVVlZHVkdOVlNYTk9hMHBDVVZaUmMxSXdSa0prTUUwM1VWVkdSR1JyVGxkUE1FWkNVVEJHU1V4RVNrTlJWVVYzVVcxTmMxUXdSa0pVTUUxelkxVktRbEZXUVhOUk1FWkNUbXRLUjB4RVdrTlJWVVV6VVdsNFJGRlZSWGhSYW5SQ1VWVk9Razk2ZEVwUlZWWk1Vbmw0V0V4RlpFSlJNSGR6WkZWS1FsRlhSVGRSVlVaQ1VWUnpOMUZWUmtSVWJXaERURVJLUTFGVlJYZFJhWGhFVVZWRmVGRnBlRVJSVlZKT1RFVk9RbEV6VmtOUE1FWkNVWHBrUTB4Rk1VSlJWWFJ3VVdsNFRGRlZSazFQTUVaQ1VUQTBjMUY2Y3pkUlZVWktVbXRSYzFkVlJrSlhXRXBEVEVaT1FsRldiM05STUVaQ1l6QktTRXhGWkVKUldGSkRURVZrUWxGVVVrTk1SbFpDVVZaV1dFeEdUa0pSVmxselVsVkdRbU5WU1RkUlZVWkNVVk40VEZGVlRqUlJNbGx6VlZWR1JXUXdUWE5TTUVaRVlXdEtiRXhHVGtKU1IyeERURVZPUWxFemFFUmFhWGhTVVZWU00xRjZkRUpSVlVaQ1RFVjBRbEY2YkVOU1EzaFNVVlZSTkZGcGVFaFJWVTV4VVcxa1EweEdUa0pTUjJ4RFRFVk9RbEY2YkVOaFJVbHpWVlZHUlU5RlNUZFBNRVpDVWxkb1JVeEZkRUpSVldOelVUQkdRbEV4VFhOYU1FcENVVmRrUTFWcGVGSlJWVVp2VVdsNFJGRlZSa3RNUlZaQ1VWUm9RMDh3UmtKUmVtUkRWVk40Y2xGclJrSmFNRXBUVEVaR1FsRlhhRU5NUld4Q1VWUlNRMHhGVmtKUlZGWkRUekJHUWxFd1JYTlVWVVpDVkZacmMxcFZSa0paTUc5eldqQktRbEZYWkVOVmFYaFNVVlZHYjFGcGVFUlJWVVozVVdwMFFsRlZUa0pYVTNoc1VWVkdXbGRUZUVwUlZVWmhURVZPUWxGWGJFTldRM2hVVVZWR2NWRnFkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVa040VEZGVlJrNVRRM2hxVVZWR2FsTnBlRzVSYTBaQ1dqQktVMHhHUmtKUlYyaERURVZPUWxGWVFrTlBNRVpDVVRCRmMxTXdSa0pTTW14RFRFZFdRbEZYVmtkTVJrNUNVVmRaYzFKVlJrSmxWVXBKVEVaa1FsRlljRU5NUlU1Q1VWVm5jMUpWUmtKbFZVMDNVVlZHUkdWRlRtbE1SMDVDVVZac1FreEdUa0pSVmsxelUxVkdRbFpEZUVSUlZVWmhUekJHUWxFd1JYTlNWVVpIVWtONFRsRlZWbEJQTUVaQ1VUQTFhRXhIVGtKUlZteGFURVZzUWxGV2IzTlJNRVpDWVZWS1ZVeEdUa0pSVjNCRFR6QkdRbEV3UlRkUlZVWkVVa040UkZGWFVrVlBlblJDVVZkc1ExRlVkRUpSVlU1Q1ZIbDRXbEZWUmxwamEwbHpWVEJHUWxkcGVFUlJWVVo2VVc1T1EweEZkRUpSV0ZKRFRFVmtRbEZVYUVOTVJteENVVlpyTjFGVlJrUmxhMDF6VXpCR1FsSXdaM05VVlVaQ1UwTjRSbEZWUmxaUE1FWkNVVEZSTjFGVlJrUlJWSFJDVVZWT1FscERkekJSYTBaQ1RVVktha3hGT1VKUlZUbEVURWhHUTFGVlJsRk1SVTVDVVZSYVExSnBkekpSYTBaQ1RqQkpjMUV3UmtKTlZVazNVVlZHUkZGVWRFSlJWVTVGVEVWT1FsUnJVVGRQTUVaQ1ZUQkdTRXhHYkVKUlZteDVVV2w0VkZGVlJtRk1SVTVDVVZoT1EyUXdTWE5UVlVaQ1pFVkpjMUl3UmtKT2EwbHpWMVZHUWxkVWRFSlJWVTQwVVhsNFRGRlZSa2hVUTNoT1VWVkdTVXhGVmtKUlZsVTNVVlZHUkZaRlJYTlZNRVpDVkRBd2MySXdTa0pSVmtGelVUQkdRazVGU25kUmFYZ3hVV3RHUWs1VlNUZFJWVVpFVVZSMFFsRlZUa1ZNUlU1Q1UydFJOMDh3UmtKVVZVWnVVV2w0V2xGVlJscGphMGx6VlRCR1FsZHBlRVJSVlVaNlVXdHJjMWt3UmtKa1JVbHpVakJHUW1SVlRYTlhWVVpDVjFSMFFsRlZUbk5TUTNoU1VWVkdVRko1ZUc1UmEwWkNXakJLU0V4Rk1VSlJWMmhEVEVWa1FsRlliRU5NUlU1Q1VWZG9SRTh3UmtKUk1FVnpVVEJHUjFKRWN6ZFJWVVpLVVZONFNsRlZSazVhTUVsellqQktRbEZYT1VOTVJXeENVVlZzVFV4R1pFSlJWVzl6VWxWR1FrMVZTVGRQTW5SRFVWVldiRk41ZUhCUmFVbHpTVzFhY0dKSFZXbFBhVXB6WVZkSmRtUkhiR3BoTWxaNVRHMXdla2xwZDJsak1qa3hZMjFPYkdNd1RuWmlibEpzWW01UmFVOXNjMmxMUjFveFltMU9NR0ZYT1hWSlNHUnNXVzVDYUZreWRGWmliV3d5V2xoS2VsbFhlRTVpTWxJeFlrZFdSVnBYV25CaWJXd3dZVmM1ZFV0SVNuWmlNMUZ6U1VkYWFGa3pVblpqYm10d1NVaDBZMkpzZURCaFYxbHZaRWhzZDFwWE9XMUpSMVkwWTBjNWVXUklUV2RRVkRBNVNVTmtkbGx0Y0d4Wk0xRnVTVU5aYlVsSVVqVmpSMVoyV21sQ2RHSXlVakZpUjFWblVGUXdPVWxEWkhaWmJYQnNXVE5SYmt0V2VIVllTRkpqWkVjeGRscElWbk5hVXpWc1pVaENkbU51VW5wSlJEQm5XbTFHYW1SSE9YbGxVMmR3VHpGNGRWaElVbXhpU0U1c1NVZHNiVXRJVWpWalIxWjJXbWxDYTFwWFduQmliVlZuVUZRd09VbERaRzFrVnpWcVpFZHNkbUpwWTJkS2FWbG5Xa2RXYldGWE5XeE1iVVowV2tOc1kySnNlREJZU0ZKcldsZGFjR0p0Vlc5WVEwb3dZVmRPY2xwWVNtTkphWGRuVnpFd2MwbEhXbWhaTTFKMlkyNXJjRTh4ZUhWWVNGSnNZa2hPYkVsSGJHMUxTRkkxWTBkV2RscHBRbXhsU0VKMlkyNVNla2xFTURsUVUwRnVZakpLY1ZwWFRqQktlV3hqWW14NE1GaElVbXhsU0VKMlkyNVNlbGN4ZDJsa1IyeHFZVEpXZVZoRFNtUkpSREJuV20xR2FtUkhPWGxsVTJkd1R6RjRkVmhJVW14aVNFNXNXRWMxWTJSR2VEQmpiVGwyWkVaMFkwbHVVbkJaTW5Sc1kyeDNhVmhUUVRsSlIxcG9XVE5TZG1OdWEyOUxWSFJqWW00d2NFdElVbTloV0UxelNVZGFNV0p0VGpCaFZ6bDFTME5yWjJVeGVIVmpiVll3WkZoS2RVbEdlSFZZUnpWalltazRka2xHWkVaUmJFSkNVVEJ6WjFKck9WQldSVlpUU1VNNGRsaEhOSFpNZVVJeldsZEtkMWxYVG5KTU0xWjFZVmhhYkdOdVRtaGlSVEYyV2toV2MxcFZVbXhhYld4MVlWaFNjR0l5TkdsTVEwbG5XRWhSZGt4NVFsVmhSMVZuWWxjNWEyUlhlR3hKUjA1b1dUSm9iRmhITkdkWVNGSXlXVmhKWjJGWE5YcGtSMFp6WWtkV2ExUlhPV3RrVjNoc1kzbEJPVWxJZERsUE1YaDFXRWMwWjFoSVVYWk1lVUpWWVVkVloyTnRWbmhrVjJ4NVdsTkNiV1JYTldwa1IyeDJZbXg0ZFVsR2VEQmFibFoxV1ROU2NHSXlOR2RZTVRreldsZEtkMWxYVG5KWU0wcHNZMWhXY0dOdFZtWlllV2gwWWpKU01XSkhWa3BhUTJ0blpURjRkVmhITkdkWVNGSmpaRU00ZGtsRlRtOWFWMDV5U1Vkc2JVbEhNWFphU0ZaeldsTkNjR041UW5CaWFVSnFXVmRPYjFwV2VIVkpSbmd3V0VoU2NGcHBhSEJpYms0d1dWZDRjMXBYVWs1aU1sSXhZa2RXZWxjeU1YWmFTRlp6V2xWc2ExaFRhMmRsTVhoMVNVWjRNRmhJVW1Oa1NFcHNaRWhXZVdKcFFuQmliazR3V1ZkNGMxcFhVazVpTWxJeFlrZFdlbGN5TVhaYVNGWnpXbFZzYTFoVE5XeGxTRUoyWTI1U2VrOHhlSFZKUm5nd1dFaFNPVmhITkdkWVNGSmpaRU00ZGtsRlRubGFWMFl3V2xOQ2FFbEhOV3hrZVVKMFlqSlNNV0pIVldkTFIwWjFXa05DZDJSWVVXZGhXRkZuWVZjMU1HSjVRakJoUjFWbldUSkdhbUZIVlhCWVJ6Um5XRWhTWTJSSVdtaGphVUowWWpKU01XSkhWV2RRVTBKd1ltNU9NRmxYZUhOYVYxSk9ZakpTTVdKSFZucFhNakYyV2toV2MxcFZiR3RZVTBFNVNVaDBZMkpwUW1Oa1JuZ3dXRWhTY0U5cFFuUmlNbEl4WWtkV1NscERlR05pYVVKalpFWjRNRmhJVW5OUGFVSnRXVmQ0ZWxwVGVHTmlhVUpqWkVaNE1GaElVbXhsU0VKMlkyNVNlazlwUWpkbVZuaDFTVVo0TUZoSVVqbFBNWGgxV0VjMFoxaElVbU5rUXpoMlNVVldORnBYVGpGa1IxVm5aRWRvYkVsSE1YWmFTRlp6V2xOQ2JXUlhOV3BrUjJ4MllteDRkVWxHZURCWVNGSjBZakpTTVdKSFZucFhNakYyV2toV2MxcFZiR3RZVXpWcVdWZDRjMHRITVhaYVNGWnpXbE0xYkdWSVFuWmpibEo2VEVOQ2RHSXlVakZpUjFWelNVY3hkbHBJVm5OYVV6VnNaVWhDZG1OdVVucE1RMEptV0ROa2JGbHVRbWhaTW5SbVkyMVdlR1JYYkhsYVZqbG1TMVIwWTJKc2VIVkpSbmd3V0VoUmRreDVRa2RpUjBadVNVaFNiMXBUUW5SaU1sSXhZa2RWWjFsWVRXZGlSemxvV2tkV2ExaEhOR2RZU0ZKalpFY3hkbHBJVm5OYVV6VnpTVVF3WjJSSVNqRmFWSFJqWW14NGRVbEdlREJZU0ZGMlRIbENVMXBZVWpGamJUUm5aRWRvYkVsSFZqUmpSemw1WkVoTloySXlXV2RrUjJoc1NVY3hkbHBJVm5OYVZuaDFTVVo0TUZoSVVubGFXRkl4WTIwMFoySlhPV3RrVjNoc1RHMVdOR05IT1hsa1NFMDNXRWMwWjFoSVVqbFlSelZqWW14NGRVbEdlREJNZVRobldsaG9kMkl6VG14SlNGSnZXbE5DZEdJeVVqRmlSMVo2U1VjNWFXRnRWbXBrUTBGdldERTVNMXBYU25kWlYwNXlXREl4ZGxwSVZuTmFXRTVtV0hsc1kySnBRbU5rUmpsbVpESldhV05IUm1waE1UbDVXbGhHTVdGWVNteFlNVGgxWWxOQk9VbEhNWFphU0ZaeldsaE5OMWhITldOaWFVSmpaRU00ZGtsSFZqUmpSemw2V2xOQ01HRkhWV2RpVnpsclpGZDRiRWxIVG1oWk1taHNXRWMwWjFoSVVtWllNMlJzV1c1Q2FGa3lkR1pqYlZaNFpGZHNlVnBXT1daTWJVMW5VRk5DY0dKdVRqQlpWM2h6V2xkU1RtSXlVakZpUjFaNlR6RjRkVmhITkdkWVNGRjJUSGxDYTFwWFduQmliVlZuV2pKV01HUkhWbmxKUjFveFltMU9NR0ZYT1hWSlIxcDJZMmxDYjFsWVNuUmlNalUxU1VkV05HTkhPWGxrU0U1alltbENZMlJHT1daa01sWnBZMGRHYW1FeE9YbGFXRVl4WVZoS2JGZ3hPSFZhUTBFNVNVZGFNV0p0VGpCaFZ6bDFTMGRXTkdOSE9YbGtTRTF6U1VjMWFHSlhWWE5KUjJSc1pFaFNiR05wYTJkbE1YaDFTVVo0TUZoSVVuQmFhV2RvV0RFNU0xcFhTbmRaVjA1eVdETktiR05ZVm5CamJWWm1XSGsxZGt0SFZqUmpSemw1WkVoTmMwbEhOV2hpVjFWd1MxTkNOMWhITkdkWVNGSmpaRVo0TUZReVNuRmFWMDR3VEcxU2JGcHRiSFZhVmtKNVlqTkNiR051VWpWTFIxWTBZMGM1ZVdSSVRYTkpSelZvWWxkVmMwbElkR05pYVVKalpFWjRNRmhJVW1Oa1IwNTJZbTFhY0ZvelZubFpWMHB6V2xSdloxcHRSbk5qTWxWeldFYzBaMWhJVW1Oa1JuZ3dXRWhTYkdKdVZuUmFXRXBvV1cxNGJFOXBRakJqYmxac1RFWjRkVWxHZURCWVNGSmpaRVo0TUZveVZqQlBhVUp1V2xoU01GcFlTbU5pYVVKalpFWjRNRmhJVWpsTFZIUmpZbWxDWTJSR2VEQm1WbmgxU1VaNE1HWlVkR05pYkhoMVNVWjRNRXg1T0dkYU1sWXdVa2RXYlZsWVZuTmtSVlkwWTBjNWVXUkRRbTFrVnpWcVpFZHNkbUpwUW0xaU0wbG5XVEk1ZEdOSFJqQmhWMHB3WWtkc01HVlRRak5oV0ZKdlNVYzFkbUpwTVc5WldFcDBZakkxTlVsSE1YWmFTRlp6V2xoT1kySnBRbU5rUmpsbVpESldhV05IUm1waE1UbDVXbGhHTVdGWVNteFlNVGgxWW1sQk9VbEhXakZpYlU0d1lWYzVkVXRITVhaYVNGWnpXbE5yWjJVeGVIVkpSbmd3V0VoU01sbFlTV2RhTWxZd1pFZFdlVWxFTUdkaVZ6bHJaRmQ0YkVsRFdXMUpSekYyV2toV2MxcFROV1pZTWxaNlZGYzVhMlJYZUd4SlJEbGpZbWxDWTJSR2VEQllTRkp0WkZjMWFtUkhiSFppYVVKdVdsaFNSVnBYV21oa1YzZ3dTME5yWjJWNVFubGFXRkl4WTIwMFoySlhPV3RrVjNoc1YzbGthMXBYV21oa1YzZ3dTakV3TjBsSU1HZFBiSGgxU1VaNE1GaElVbU5rUjFveFltMU9NR0ZYT1hWSlIyUnNaRVV4ZGxwSVZuTmFWVlkwWTBjNWVXUklUVzlMVTBJM1NVaEtiR1JJVm5saWFVSjBZakpTTVdKSFZUZEpTREEzV0VjMFoxaElVbU5rUmpsbVpESldhV05IUm1waE1UbDVXbGhHTVdGWVNteFlNVGgxV2tOb2JscFlVakJhV0VselNVTmthRXA1ZDJkYU1sWXdaRWRXZVV0VWRHTmlhVUpqWkVaNE1HTnRWakJrV0VwMVNVZGtiR1JJVW14amFuUmpZbWxDWTJSSU1EZFlSelZqWW1sQ1kyUkRPSFpKUlRscFlXMVdhbVJETlhkamJUa3dZak5TTldOSFZYVmhSMFo2VkROa2RWVklTblpqUjFaNVpFaHJkVmt5Um5OaVJuaDFTVVo0TUZneE9UTmFWMHAzV1ZkT2NsZ3pTbXhqV0Zad1kyMVdabGg1TlhaSlJEQm5XbTVXZFZrelVuQmlNalJ2WWpKS2NWcFhUakJNUTBKM1kyMDVkMXBZU2pCbFUydG5aWGxDZVZwWVVqRmpiVFJuVkRKS2NWcFhUakJNYmtKNVlqTlNkbVJJYkhkYVV6VnZXVmhPVUdReU5WRmpiVGwzV2xoS01HVlROV3BaVjNoelMwYzVhV0Z0Vm1wa1EzZG5ZMGhLZG1OSFZubGtTR3R3VDNsQ09VOHhlSFZZUnpSbldFaFJka3g1UW1aWU0yUnNXVzVDYUZreWRHWmpTRlpwWWtkc2FsZ3pRbWhrUjJobVdERjRkVWxHZURCWU1Ua3pXbGRLZDFsWFRuSllNMHBzWTFoV2NHTnRWbVpZZVRWM1NVUXdaMWhEU21OSmFuUmpZbXg0ZFVsR2VEQk1lVGhuVkVjNWFGcERRbXhpYmxKNVpWTkNkR0l5VWpGaVIxVm5XVmMxYTBsSVNteGtTRlo1WW1sQ2JHVklRblpqYmxKNldFYzBaMWhJVW5sYVdGSXhZMjAwWjFneE9UTmFWMHAzV1ZkT2NsZ3pTbXhqV0Zad1kyMVdabGg1YUdaWU0yUnNXVzVDYUZreWRHWmpiVlo0WkZkc2VWcFdPV1pNYmsxblVGTkJkMHRVZEdOaWJIaDFXRWMxWTJKcE9IWkpSbVJHVVd4Q1FsRXdjMmRTYXpsUVZrVldVMGxET0haWVJ6UjJUSGxDTTFwWFNuZFpWMDV5VERKS2RtSXpVbnBrU0Vwb1kwTkJkMXBYVFRWTlJHeHRXa1JHYWxwdFZYcE5WR3h0V21wVk1VNVRTWE5KYld4MFkwYzVlV1JEUWxWaFYwNXlXbGhKWjFwdVNuWmlVMEZ1VEdrNVZXRlhUbkpTVnpVd1kyNXJiazh4ZUhWWVJ6VnNaVWhDZG1OdVVXZGFSMVp0V1ZoV2MyUkRRbFZoVjA1eVdsaEpOMWhITldOaWJIaDFXRWMwZGt4NVFsaFNWVXBSVVZWT1RFbEZXbEJVTVZKR1ZXbEJka3d4ZUhWTWVUaG5UR2s1YzJGWFNYWmhWelZyV2xobmRXRnVUV2xNUTBwd1lsaENkbU51VVdkaVYwWjFXVmRrYkdOcFFtMWpiVGwwU1VOamRVd3dNV2hpYlVadVdsaEpiazh4ZUhWWVJ6UjJUSGxDTUdJd1VuWlBhVUo2WkZoQ2QySXpTakJKUjBwMlpFZG5aMWt5Um5OaVIwcG9XVEp6WjFsWE5XdEpTRUo1WWpJeGNHTXlWbU5pYlZZMFkwYzVlV1JEUW10YVYxcG9aRmQ0TUVsSFRuTlpXRTU2U1VaU2NGa3lkRVppYmxKNVpWWjRkV1V4ZUhWWVNGRjJTMmx3WTJKc2VEQkpRMjluVVVoQ2FHTnRSblJKU0hSMldXMXdiRmt6VWpsSlIwNTJZbTVTYkdWSVVXZE1VMEpWWVVkVloxaERTakJoUjJ4NldFTkpaMWxZU201a1Z6RnNZbTVSWjFwdE9YbEpTRkp2V2xOQ2MyRllUakJhVnpWc1kybENiV1JYTldwa1IyeDJZbWsxWTJKc2VEQkpRMjluVVVoQ2FHTnRSblJKU0hSdFpGYzFhbVJIYkhaaWJqQm5Za2RzZW1SSFZuVmFXRWwxV0VjMVkyUkRRWEZNTVhoMVdFaFNhbUl5Tlhwa1NFb3hXVE5TZG1OcGFHcGlNalV3V2xob01FeERRbk5oV0U0d1dsYzFiR05wZDJkWk1rWnpZa2RLYUZreWMyZFFVMEoxWkZkNGMweERRbmRqYld4MlkyMXNNR1ZUUVRsSlJFRndXRWMxWTJSSWRHTmliSGd3V0VoU01HRkhiSHBNYlU1MlltNVNiR1ZJVVdkUVUwSnFZakkxTUZwWWFEQlBNWGgxV0VoU1kyUklVbTloV0UxMVlrZHNlbVJIVm5WYVdFbG5VRk5DYzJGWVRqQmFWelZzWTJwMFkySnNlREJZU0ZJd1lVZHNla3h0VG1oaVIzaHBXVmRPY2tsRU1HZFpNa1p6WWtkS2FGa3ljemRZUnpWalpFWjRNR1JIYUhCamVUVjNZMjFzZG1OdGJEQmxVMEU1U1VoQ2VXRlhPWGxoV0ZJMVR6RjRkVmhJVWpsWVJ6VmpZbTR4WTJKc2VIVk1lVzkwVEZNd2RFbEdRakZaYlhod1dUTjRVV050T1RCaU0xSTFZMGRWWjFSWFZqQmhSemxyWTNsQmRFeFRNSEZNTVhoMVdFYzFWV0ZYVG5KU1Z6VXdZMjVyZFdOSVNuWmtSemt3WlZoQ2JFeHRVbkJqTTBKMll6SlZaMUJUUW0xa1Z6VnFaRWRzZG1KcFozQmxNWGgxV0VoU01HRkhiSHBNYlU1MlltNVNiR1ZJVVdkUVUwSjFaRmQ0YzA4eGVIVllTRkl3WVVkc2VreHRlSEJqTTFKc1ltMVdlVWxFTUdkaWJsWnpZa1IwWTJKc2VEQmtSMmh3WTNrMWFsbFhlSE5aYlVacVlYbEJPVWxITlRGaVIzYzNXRWMxWTJSSVVtOWhXRTExWTBoS2NHSXpTbkJrU0d0blVGTkNkV1JYZUhOUE1YaDFabFIwWTJKc2VIVldSMnhxWVRCV2RXUklTalZNYmtKNVlqTlNkbVJJYkhkYVV6VnNaVWRXYW1SWVVteEpSREJuV201V2RWa3pVbkJpTWpSdlMxaDBZMkpzZURCaVYwWjFXVmRrYkdOcE5XaGFSMUZ2WkVkb2NHTjVhemRZUnpVNVR6RjRkVmhITlZWaFYwNXlVbGMxTUdOdWEzVmpTRXAyWkVjNU1HVllRbXhNYldSc1pFVXhhR1ZHUW5saFZ6bDVZVmhTTlVsRU1HZGFibFoxV1ROU2NHSXlORzlMV0hSallteDRNR050VmpCa1dFcDFTVWN4YUdKdFJtNWFXRWwxV2pKV01GUlhSalJWU0Vwd1lqTktjR1JJYTI5TFZIUmpZbTR3TjFoSE5XTmliSGgxV0VjMVkySnNlSFZNZVRoblZqQldRMVZGUmtSVGVVSkhWREE1VlZKV1NXZE1lVGxqWW1rNGRrbEROSFppUjJ4cFRERlNjRmt5ZEVaaWJsSjVaVk0xY1dONVNYTkpiSGgxWWtkV01FbElTbXhqV0Zac1l6TlNRbUp0YkhSWldGSndZakkxUjJOdFJuUmFWV3hyU1VRd1oxUnRSazlQTVhoMVdUSTVkV016VVdkalNFcHdZak5LY0dSSWJFWmlibEo1WVZkV2VrbEVNR2RYTWpVeFlrZDNjMGxITlRGaVIzZHpTVWMxTVdKSGQzTkpSelV4WWtkNFpFOHhlSFZZUnpWdFpGYzFhbVJIYkhaaWFVSjJZbXhTY0ZreWMyOUxXSFJqWW14NE1GcHRPWGxMUjNoc1pFTkNjR0p0VW14bFEwRTVTVVJCWjA5NVFuQmliVkpzWlVOQk9FbElRbmxoVnpsNVlWaFNOVkpYTlRCamJXeHNZM2sxYzFwWE5XNWtSMmMzU1Vkc2RWcEhWalJMZVhOd1pURjRkVmhJVW1Oa1IzaHNaRU5DTUdGWFRuSlNWelV3WTIxc2JHTjVRVGxKU0VKNVlWYzVlV0ZZVWpWU1Z6VXdZMjFzYkdNeGRIQmliVkpzWlVZd04xaEhOV05rUm5nd1lWZFpiMlJIYkdwaE1GWjFaRWhLY0ZwWVRXZEthVmxuWkVkc2FtRXdWblZrU0Vwd1dsaE5kV0pIVm5WYU0xSnZTVVEwWjAxRGEyZGxNWGgxV0VoU1kyUkdlREJhV0doc1dUTldNRnBXVW5CWk1uUkdZbTVTZVdGWFZucExTRkp3V1RKMFJtSnVVbmxoVjFaNlMxUjBZMkpzZURCWVNGSmpaRU00ZGxFeWVHeFpXRWxuWkVkb2JHSlRRblppYlU1c1NVZFdORnBYVGpGa1IxWnJXRWMxWTJSR2VEQllTRkozWTIxc2RtTnRiREJsVlZaMVpFaEtjRnBZVG1KaFZ6VnJXbGhvWkVsRU1HZGlibFp6WWtSMFkySnNlREJZU0ZJNVdFYzFZMlJJTVdOaWJqRmpZbXg0ZFZwdVZuVlpNMUp3WWpJMFoxcFlhR3haTTFZd1dsWlNjRmt5ZEVaaWJsSjVZVmRXZWt0SVVuQlpNblJHWW01U2VXRlhWbnBMV0hSallteDRNRXg1T0dkaFZ6RjNZak5LTUZsWE5UQkpTRkoyU1VoV2VscFRRbTFpTTBsMFlrYzVkbU5HZUhWWVNGRjJUSGxDTUdGWFRuSlNWelV3WTIxc2JHTjVRbTVqYlRrelkzbENhMlZYTldoaVYyeHFXVmQ0YzJWVFFtbGxVMEoyWW0xVloySXlXV2RoV0ZKNlNVZFdkV1JJU2pWWVJ6VmpaRU00ZGtsSFduWmphVUpzWlVkR2RHTkhlR3hQYVVKeldsaFJaMk15UmpWSlNHUnNTVWRvYUdSdFZXZGlNalZzU1VkV2RXUklTalZNUTBKb1ltMVJaMXBZYUd4Wk0xWXdZVmMxYmtsSVVtOVpXRkZuV2xjMU1HTnVhMmRpVjJ4dVlVaFJaMWxYVW10amVVSm9ZbTA1TUdGSFZubEpSMVoxWkVoS05WaEhOV05rUXpoMlNVaGtjR1JIWjJkaVYwWjNTVWRhTVdKdFRqQmhWemwxU1Voa2JFbEhUbWhpYmxGbldsaG9iRmt6VmpCYVUwSnJaVmMxYUdKWGJHcFpWM2h6WlZOQ2JtTnRPVE5oVnpWdVNVZFdkV1JJU25CYVdFMTFXRWMxWTJSSFduWmphV2h6V2xoUloyRlRRVGxKUkVFM1NVZHJaMUJEUWpCaFYwNXlVbGMxTUdOdGJHeGplVFZ6V2xjMWJtUkhaemRKUjJ0eVMzbHNOMWhITldOa1JuZ3dXVEk1ZFdNelVXZGtSMnhxWVRCV2RXUklTalZKUkRCblpFZHNhbUV3Vm5Wa1NFcHdXbGhPWW1GV01EZFlSelZqWkVaNE1HUkhiR3BoTUZaMVpFaEtOVXh0ZUhCak0xSnNZbTFXZVV4dFRtaGlSM2R2WkVkc2FtRXdWblZrU0VvMVRHMU9kbUp1VW14bFNGRm5aa2gzWjJSSGJHcGhNRloxWkVoS05VeHRlSEJqTTFKc1ltMVdlVmQ1WkRCaFIyeDZTakV3Y0U4eGVIVllTRkpqWkVkc2JVbERhREJoVjA1eVVsYzFNR051YTNWWk1rWnpZa2RLYUZreWMzQkpTSFJqWW14NE1GaElVbU5rU0ZKd1dUSjBSbUp1VW5sbFV6VnFXVmQ0YzFsdFJtcGhlVFZxV1ZkNGMwdElVbkJaTW5SR1ltNVNlV1ZUTldwWlYzaHpXVzFHYW1FeGMyNWtSMmh3WTNsa1pFdFVkR05pYkhnd1dFaFNPVmhITldOa1NERmpZbTR4WTJKc2VIVmFibFoxV1ROU2NHSXlOR2RoV0U1Q1drZFNiRnBGUm5OamJWWm9Xa2hyYjFwWE5UQmpibXR6WkVkc2FtRXdWblZrU0Vwd1dsaE5jR1V4ZUhWWVNGRjJUSGxDY0dKWVFuWmpibEpvWW01UloyUkhPR2RrV0U1c1NVZGFkbU5wTVhOaU1qbDNXRWMxWTJSRE9IWkpTRkp3V1RKMFJtSnVVbmxoVjFaNlNVZGtlV0l6WkhwSlIxSTFZbTFHZEdGWFRtaGlSM2cxU1VkS05VbEhPWFZhVTBKMldtbENjR1JJVFdkYVZ6VXdZMjVzWTJKc2VEQk1lVGhuV20wNWVVbEhWalJaVnpGM1lrZFZOa2xIZUd4a1EwSjZXVmhyWjJReVZXZGhSMFl5V2xOQ2RtSnRWV2RhVnpVd1kyNXJjMGxIUm5WYVEwSnNaVWRXYW1SWVVuQmliV05uWkVkb2FHUkRRbXhpYmxKNVpWTkNkR0ZYWkc5a1EwSm9Xa2RTZWtsSFJuVmlNMUp2V2xoSloxcFhOVEJqYm14allteDRNRXg1T0dka01td3dZVU5DZEZsWVFXZGFibFoxV1ROU2NHSXlOR2RrTWxWbldUSkdkV1JEUW14bFIxWnFaRmhTYkVsSFVqVmliVVowWVZkT2FHSkhlRFZKUjJSNVlqTmtjR0p0WTJkYVZ6VXdZMjFzYkdONU5XTmliSGd3V20wNWVVdEhlR3hrUTBKd1NVUXdaMDFFYzJkaFUwRTRTVWhTY0ZreWRFWmlibEo1WVZkV2VreHRlR3hpYldRd1lVUnpaMkZUYzNKTFdIUmpZbXg0TUZoSVVtcGlNalY2WkVOQ01HRlhUbkpTVnpVd1kyNXJaMUJUUWpCaFYwNXlVbGMxTUdOdGJHeGpNWFJ3V0ZSMFkySnNlREJZU0ZKd1dtbG9iR0p1VW5sbFV6VnFZakkxTUZwWWFEQkpSREE1VUZOQ01HRlhUbkpTVnpVd1kyNXJkVmt5T1hWa1IxWTBaRU5CYlVwcFFteGlibEo1WlZNMWMyRllUakJhVnpWc1kybEJPVkJVTUdka1IyeHFZVEJXZFdSSVNqVk1iWGh3WXpOU2JHSnRWbmxMV0hSallteDRNRmhJVW1Oa1NFcHNaRWhXZVdKcFFqQmpibFpzVHpGNGRWaElVbU5rU0RGallteDRNR1pXZUhWWVNGSjVXbGhTTVdOdE5HZGFiVVp6WXpKVk4xaEhOVGxZUnpWalltMWFNV0p0VGpCaFZ6bDFTVWhLYkdOWVZteGpNMUpDWW0xc2RGbFlVbkJpTWpWSFkyMUdkRnBWVG1oaVIzaHBXVmRPY2t0RGJEZFlSelZqWkVjNWRWWkhiR3BoZVdkd1R6RjRkVmhJVW5sYVdFWXhXbGhPTUZGWE5YQmlWMFl3WVZjNWRWSnVTbWhpVjFaS1drTkJPVWxJWkhCaWJWSjJaSGsxZVZwWVJqRmFXRTR3VVZjMWNHSlhSakJoVnpsMVVtNUthR0pYVlc5amJWWjRaRmRXZW1SRlJuVmhWekZvWkVkc2RtSnJXbmxaVnpGc1VUSkdjMkpIU21oWk1uTndUekY0ZFdaV2VIVllSelZxWWtkR2VtTjVRbFZoVjA1eVZGZEdkVmxYWkd4amFVSTNXRWMxWTJSSFRuWmliazR3WTI1V2FtUkhPWGxMUTJ3M1dFYzBaMGxEUVdkSlEwRm5TVWhLYkdOWVZteGpNMUpDWW0xc2RGbFlVbkJpTWpWSFkyMUdkRnBWYkd0SlJEQm5UVVJ6WjB4NU9HZGFiVGw1U1Vaa2NHSnRVblprTTAxblVsYzFNbGhITkdkSlEwRm5TVU5CWjBsSVVtOWhXRTExWXpOU2FHTnVVVzlMVkhSallteDRNR1pXZUhWbVZuaDFXRWMxWTJKc1VuQlpNblJPV1ZjMWFGb3lWbmxNYmtKNVlqTlNkbVJJYkhkYVV6Vm9Xa2RSWjFCVFFtMWtWelZxWkVkc2RtSnBRVzlrUjJ4cVlUQldkV1JJU2pWTFUwSTNXRWMxWTJSSFRuWmliazR3U1VoeloyTklTbkJpTTBwd1pFaHJjMGxIVG1oaVIzaHBXVmRPY2tsSU1HZFFVMEl3WVZkT2NsSlhOVEJqYm1zM1dFYzFZMlJIYkcxTFEwWjNZMjFzZG1OdGJEQmxWVloxWkVoS2NGcFlUbUpqU0Vwd1lqTktjR1JJYkdSTFdIUmpZbXg0TUZoSVVuZGpiV3gyWTIxc01HVlZWblZrU0Vwd1dsaE9ZbU5JU25CaU0wcHdaRWhzWkVsRU1HZFhNVEEzV0VjMVkyUkdlREJaTWpsMVl6TlJaMlJIYkdwaE1GWjFaRWhLY0ZwWVRXZFFVMEozWTIxc2RtTnRiREJsVlZaMVpFaEtjRnBZVG1KalNFcHdZak5LY0dSSWJHUlBNWGgxV0VoU1kyUklVbkJaTW5SR1ltNVNlV0ZYVm5wTWJrSXhZekpuYjJSSGJHcGhNRloxWkVoS05VdFVkR05pYkhnd1dFaFNlVnBZVWpGamJUUTNXRWMxWTJSSU1XTmliSGd3V1RJNWRXTXpVV2RrUjJ4cVlUQldkV1JJU25CYVdFMW5VRk5DZDJOdGJIWmpiV3d3WlZWV2RXUklTbkJhV0U1aVkwaEtjR0l6U25Ca1NHeGtUekY0ZFZoSVVuQmFhV2h3WXpCR2ExcEhWbXRSVjNoNVdsZEdhMlZUYURCaFYwNXlVbGMxTUdOdWEzTmtSMnhxWVRCV2RXUklTbkJhV0Uxd1MxaDBZMkpzZURCWVNGSnFXVmQ0YzFsdFJtcGhlVUZ0U21sQ2FsbFhlSE5aYlVacVlYbG9NR051Vm14TFZIUmpZbXg0TUdaVFFteGlTRTVzU1VoMFkySnNlREJZU0ZJd1lWZE9jbEpYTlRCamJXeHNZM2sxZDJSWVRtOUxTRkp3V1RKMFJtSnVVbmxsVTJzM1dFYzFZMlJJTVdOaWJqQTNXRWMxWTJKc2VIVk1lVGhuVmtjNWEySjZiMmRWTTFaM1kwYzVlV1JEUW0xaU0wbG5WRzA1YTFwVmNGUkpSbmgxVmtkc2FtRXdNV2hpYlVadVdsaEpkV05JU25aa1J6a3daVmhDYkV4dVRqQlpXRW93U1VRd1oxcHVWblZaTTFKd1lqSTBaMHREYTJkbE1YaDFXRWhTY0ZwcGFETmhWelZyWWpOamNHVXhlSFZZU0ZKalpFTTRka2xJWkhCaVIzZG5ZMjFXYWxwWGJESmFXRTFuWkVkc2RGcFlUakJaVnpGM1NVZEdla2xIUm5sYU0xWjBXbGMxTUZoSE5XTmtSbmd3VEhrNU1HSXlVblpQYVVKTldsZEdlV0pxYjJkSlNGSnZXbE5DZDJSWVNuZGlNMDVzU1VjNWJVbElVbkJpVjFaNlpFZEdkR05HZUhWWVNGSmpaRWhLYkdOWVZteGpNMUpDWW0xc2RGbFlVbkJpTWpWSFkyMUdkRnBWYkd0SlJEQm5aREpzZFZwSE9UTk1ia3BzWTFoV2JHTXpVa0ppYld4MFdWaFNjR0l5TlVkamJVWjBXbE5vZVZwWVJqRmFXRTR3VVZjMWNHSlhSakJoVnpsMVVtNUthR0pYVmtSWlYzaHpXVzFHYW1GNWF6ZFlSelZqWkVneFkySnVNRGRZUnpWallteDRkVlpIYkdwaE1ERm9ZbTFHYmxwWVNYVmpTRXAyWkVjNU1HVllRbXhNYms0d1lqTkJaMUJUUW0xa1Z6VnFaRWRzZG1KcFFXOUxVMEkzV0VjMVkyUkhiRzFMU0dSd1ltMVNkbVI1YkRkWVJ6VmpaRVo0TUdReWJIVmFSemt6VEcxT2FHSnRUbXhpUlVaMVlWY3hhR1JIYkhaaWExcDVXVmN4YkV0SVNteGpXRlpzWXpOU1FtSnRiSFJaV0ZKd1lqSTFSMk50Um5SYVZXeHJTMVIwWTJKc2VEQm1WbmgxWmxSMFkySnNlSFZXUjJ4cVlUQXhhR0p0Um01YVdFbDFZMGhLZG1SSE9UQmxXRUpzVEcxa2JHUkZNV2hsUmtKNVlWYzVlV0ZZVWpWSlJEQm5XbTVXZFZrelVuQmlNalJuUzBOcloyVXhlSFZZU0ZKNVdsaFNNV050TkdkalNFcHdZak5LY0dSSWJFWmlibEo1WVZkV2VreHRlR3hpYldRd1lVTkJkRWxFUlRkWVJ6VTVUekY0ZFZoSE5XcGlNalY2WkVOQ2VtRlhOVzVpUjFZd1lqSTFTbUp1VGpCWlZ6VnFXbE5CT1VsSE5XeGtlVUpWWVZkT2NsUlhSblZaVjJSc1kybG5jRTh4ZUhWWVJ6VnNaVWhDZG1OdVVXZGFSMVp0V1ZoV2MyUkRRbnBoVnpWdVlrZFdNR0l5TlVwaWJrNHdXVmMxYWxwVWRHTmliSGgxV0VjMVkySnNlSFZZUnpWallteDRkVmhITldOaWJIaDFUSGs0WjFZd1ZrTlZSVVpFVTNsQ1IxUXdPVlZTVmtsblRIazVZMkpwT0haSlF6UjJZa2RzYVV3d01XaGliVVp1V2xoSmRXRnVUV2xZVTNkcFl6STVNV050VG14VmJUbDJaRU5KTmtscFNqbGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TGk5dWIyUmxYMjF2WkhWc1pYTXZkR2xqYTJWeUwyeHBZaTkwYVdOclpYSXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWlMQ0pwYlhCdmNuUWdSblZ1WTNScGIyNXpJR1p5YjIwZ0p5NHZablZ1WTNScGIyNXpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUm5WdVkzUnBiMjV6TzF4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMMnhwWWk5cGJtUmxlQzVxY3lJc0ltbHRjRzl5ZENCRmJuUnllU0JtY205dElDY3VMMlZ1ZEhKNUp6dGNibWx0Y0c5eWRDQlVhV05yWlhJZ1puSnZiU0FuZEdsamEyVnlKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSblZ1WTNScGIyNXpJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWgwY21sbloyVnlSRzl1WlU1dmRHbG1hV1Z5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wlc1MGNtbGxjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1aeVlXMWxSVzUwY21sbGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVY0WldOMWRHbHVaMHhoZEdWeVNXNU9aWGgwVkdsamEwTnZkVzUwSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGNtbG5aMlZ5Ukc5dVpVNXZkR2xtYVdWeUlEMGdkSEpwWjJkbGNrUnZibVZPYjNScFptbGxjanRjYmlBZ0lDQjlYRzU5WEc1Y2JrWjFibU4wYVc5dWN5NXdjbTkwYjNSNWNHVXVjMlYwVkhKcFoyZGxja1J2Ym1WT2IzUnBabWxsY2lBOUlHWjFibU4wYVc5dUtIUnlhV2RuWlhKRWIyNWxUbTkwYVdacFpYSXBlMXh1WEhSMGFHbHpMblJ5YVdkblpYSkViMjVsVG05MGFXWnBaWElnUFNCMGNtbG5aMlZ5Ukc5dVpVNXZkR2xtYVdWeU8xeHVmVnh1WEc1R2RXNWpkR2x2Ym5NdWNISnZkRzkwZVhCbExuSmxiVzkyWlZSeWFXZG5aWEpFYjI1bFRtOTBhV1pwWlhJZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1WEhSMGFHbHpMblJ5YVdkblpYSkViMjVsVG05MGFXWnBaWElnUFNCdWRXeHNPMXh1ZlZ4dVhHNHZMeUIwYUdVZ1puVnVZM1JwYjI0Z2RHaGhkQ0J5WlhOd2IyNXphV0pzWlNCbWIzSWdhVzVwZEdsaGRHbHVaeUIwY21sbloyVnlYRzR2THlCcFppQmpZV3hzWldRZ2RYTnBibWNnZEdocGN5Qm1kVzVqZEdsdmJpQjNhV3hzSUcxaGEyVWdZU0J6ZVc1alpXUWdaV1ptWldOMElHOW1JR1Y0WldOMWRHbHZibHh1Um5WdVkzUnBiMjV6TG5CeWIzUnZkSGx3WlM1bGVHVmpkWFJsVkhKcFoyZGxjbVZ5SUQwZ1puVnVZM1JwYjI0b1kyOXVkR1Y0ZEN3Z1puVnVZeXdnZEhKcFoyZGxjbVZ5UTJGc2JHSmhZMnNwZTF4dVhIUmpiMjV6ZENCZlpYaGxZM1YwWlZSeWFXZG5aWEpsY2lBOUlDaDBjbWxuWjJWeVpXUkJaMkZwYmlBOUlHWmhiSE5sS1QwK2UxeHVYSFJjZEd4bGRDQjBhV05yWlhJN1hHNWNkRngwYVdZb2RHaHBjeTVsZUdWamRYUnBibWRNWVhSbGNrbHVUbVY0ZEZScFkydERiM1Z1ZENBOVBUMGdNQ2w3WEc1Y2RGeDBYSFJtZFc1akxtTmhiR3dvWTI5dWRHVjRkQ2s3WEc1Y2RGeDBYSFJwWmloMGNtbG5aMlZ5WlhKRFlXeHNZbUZqYXlsN1hHNWNkRngwWEhSY2RHbG1LSFJvYVhNdVpYaGxZM1YwYVc1blRHRjBaWEpKYms1bGVIUlVhV05yUTI5MWJuUWdQVDA5SURBcGUxeHVYSFJjZEZ4MFhIUmNkSFJ5YVdkblpYSmxja05oYkd4aVlXTnJJQ1ltSUhSeWFXZG5aWEpsY2tOaGJHeGlZV05yS0hSeWFXZG5aWEpsWkVGbllXbHVLVHRjYmx4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWEhSMGFXTnJaWElnUFNCdVpYY2dWR2xqYTJWeUtIUm9hWE1zSUhSeWFXZG5aWEpsY2tOaGJHeGlZV05yTENCdWRXeHNMQ0F6S1R0Y2JseDBYSFJjZEZ4MFhIUjBhV05yWlhJdVpYaGxZM1YwWlNncE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEhScFkydGxjaUE5SUc1bGR5QlVhV05yWlhJb2RHaHBjeXdnWDJWNFpXTjFkR1ZVY21sbloyVnlaWElzSUhSeWFXZG5aWEpsY2tOaGJHeGlZV05yTENBektUdGNibHgwWEhSY2RIUnBZMnRsY2k1bGVHVmpkWFJsS0NrN1hHNWNkRngwZlZ4dVhIUjlPMXh1WEhSZlpYaGxZM1YwWlZSeWFXZG5aWEpsY2lncE8xeHVmVHRjYmx4dVJuVnVZM1JwYjI1ekxuQnliM1J2ZEhsd1pTNWhaR1JNYVhOMFpXNWxjaUE5SUdaMWJtTjBhVzl1S0dOdmJuUmxlSFFzSUdaMWJtTXNJR1Y0WldOMWRHVk1ZWFJsY2tsdVRtVjRkRlJwWTJzZ1BTQm1ZV3h6WlN3Z2NISnBiM0pwZEhrZ1BTQXdMQ0JzYVhOMFpXNWxja05oYkd4aVlXTnJJRDBnYm5Wc2JDbDdYRzRnSUNBZ2JHVjBJR1Z1ZEhKNU8xeHVJQ0FnSUdsbUlDaGxlR1ZqZFhSbFRHRjBaWEpKYms1bGVIUlVhV05yS1h0Y2JseHVYSFFnSUNBZ0lHTnZibk4wSUhScFkydGxja05oYkd4aVlXTnJJRDBnS0hSeWFXZG5aWEpsWkVGbllXbHVJRDBnWm1Gc2MyVXBJRDArSUh0Y2JseDBYSFFnSUNBZ2RHaHBjeTVsZUdWamRYUnBibWRNWVhSbGNrbHVUbVY0ZEZScFkydERiM1Z1ZENBOUlIUm9hWE11WlhobFkzVjBhVzVuVEdGMFpYSkpiazVsZUhSVWFXTnJRMjkxYm5RZ0xTQXhPMXh1WEhSY2RDQWdJQ0JwWmloc2FYTjBaVzVsY2tOaGJHeGlZV05yS1h0Y2JseDBYSFJjZENBZ0lDQnNhWE4wWlc1bGNrTmhiR3hpWVdOckxtTmhiR3dvYkdsemRHVnVaWEpEWVd4c1ltRmphMXNuZEdocGN5ZGRMQ0IwY21sbloyVnlaV1JCWjJGcGJpbGNibHgwWEhRZ0lDQWdmVnh1WEhSY2RDQWdJQ0JwWmlnZ2RHaHBjeTVsZUdWamRYUnBibWRNWVhSbGNrbHVUbVY0ZEZScFkydERiM1Z1ZENBOVBUMGdNQ2w3WEc1Y2RGeDBYSFFnSUNBZ2RHaHBjeTUwY21sbloyVnlSRzl1WlU1dmRHbG1hV1Z5SUNZbUlDQjBhR2x6TG5SeWFXZG5aWEpFYjI1bFRtOTBhV1pwWlhJb0tUdGNibHgwWEhRZ0lDQWdmVnh1WEhRZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR2xqYTJWeUlEMGdibVYzSUZScFkydGxjaWhqYjI1MFpYaDBMQ0JtZFc1akxDQjBhV05yWlhKRFlXeHNZbUZqYXl3Z2NISnBiM0pwZEhrcE8xeHVYSFFnSUNBZ1pXNTBjbmtnUFNCdVpYY2dSVzUwY25rb2RHbGphMlZ5TENCMGFXTnJaWEl1WlhobFkzVjBaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkpoYldWRmJuUnlhV1Z6TG5CMWMyZ29aVzUwY25rcFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWlc1MGNua2dQU0J1WlhjZ1JXNTBjbmtvWTI5dWRHVjRkQ3dnWm5WdVl5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNTBjbWxsY3k1d2RYTm9LR1Z1ZEhKNUtUdGNiaUFnSUNCOVhHNTlPMXh1WEc1R2RXNWpkR2x2Ym5NdWNISnZkRzkwZVhCbExuSmxiVzkyWlV4cGMzUmxibVZ5SUQwZ1puVnVZM1JwYjI0b1kyOXVkR1Y0ZEN4bWRXNWpMQ0JqWVd4c1ltRmpheUE5SUc1MWJHd3BlMXh1WEhSc1pYUWdaVzUwY25rc0lHazdYRzVjZEdOdmJuTjBJSHRtY21GdFpVVnVkSEpwWlhNc0lHVnVkSEpwWlhOOUlEMGdkR2hwY3p0Y2JseHVYSFJtYjNJb2FTQTlJREE3SUdrZ1BDQm1jbUZ0WlVWdWRISnBaWE11YkdWdVozUm9PeUJwS3lzcGUxeHVYSFFnSUNBZ1kyOXVjM1FnWm5KaGJXVkZiblJ5ZVNBOUlDQm1jbUZ0WlVWdWRISnBaWE5iYVYwN1hHNWNkRngwWlc1MGNua2dQU0JtY21GdFpVVnVkSEo1TG1OdmJuUmxlSFE3WEc1Y2RGeDBhV1lvWlc1MGNua3VZMjl1ZEdWNGRDQTlQVDBnWTI5dWRHVjRkQ0FtSmlCbGJuUnllUzVzYVhOMFpXNWxjaUE5UFQwZ1puVnVZeWw3WEc1Y2RGeDBYSFJwWmloMGFHbHpMbVY0WldOMWRHbHVaMHhoZEdWeVNXNU9aWGgwVkdsamEwTnZkVzUwSUQwOVBTQXdLWHRjYmx4MFhIUmNkRngwWm5KaGJXVkZiblJ5ZVM1a2FYTndiM05sS0NrN1hHNWNkRngwWEhSOUlHVnNjMlVnZXlBdkx5Qm1jbUZ0WlNCMGNtbG5aMlZ5SUV4cGMzUmxibVZ5Y3lCaGNtVWdjM1JwYkd3Z2NuVnVibWx1WjF4dVhIUmNkRngwWEhSc1pYUWdkR2xqYTJWeVJXNTBjbms3WEc1Y2RGeDBYSFJjZEdOdmJuTjBJR1JwYzNCdmMyVkViMjVsVG05MGFXWnBaWElnUFNBb2RISnBaMmRsY21Wa1FXZGhhVzRnUFNCbVlXeHpaU2tnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkR2xtSUNoMGFHbHpMbVY0WldOMWRHbHVaMHhoZEdWeVNXNU9aWGgwVkdsamEwTnZkVzUwSUQwOVBTQXdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmpZV3hzWW1GamF5QW1KaUJqWVd4c1ltRmpheWgwY21sbloyVnlaV1JCWjJGcGJpazdYRzVjZEZ4MFhIUmNkRngwZlNCbGJITmxlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHbGphMlZ5Ulc1MGNua2dQU0J1WlhjZ1ZHbGphMlZ5S0daeVlXMWxSVzUwY25rc1puSmhiV1ZGYm5SeWVTNWthWE53YjNObExDQmthWE53YjNObFJHOXVaVTV2ZEdsbWFXVnlMQ0F6S1R0Y2JseDBYSFJjZEZ4MFhIUmNkSFJwWTJ0bGNrVnVkSEo1TG1WNFpXTjFkR1VvS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDA3WEc1Y2RGeDBYSFJjZEhScFkydGxja1Z1ZEhKNUlEMGdibVYzSUZScFkydGxjaWhtY21GdFpVVnVkSEo1TEdaeVlXMWxSVzUwY25rdVpHbHpjRzl6WlN3Z1pHbHpjRzl6WlVSdmJtVk9iM1JwWm1sbGNpd2dNeWs3WEc1Y2RGeDBYSFJjZEhScFkydGxja1Z1ZEhKNUxtVjRaV04xZEdVb0tUdGNibHgwWEhSY2RIMWNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSbWIzSW9hU0E5SURBN0lHa2dQQ0JsYm5SeWFXVnpMbXhsYm1kMGFEc2dhU3NyS1h0Y2JseDBYSFJsYm5SeWVTQTlJR1Z1ZEhKcFpYTmJhVjA3WEc1Y2RGeDBhV1lvWlc1MGNua3VZMjl1ZEdWNGRDQTlQVDBnWTI5dWRHVjRkQ0FtSmlCbGJuUnllUzVzYVhOMFpXNWxjaUE5UFQwZ1puVnVZeWw3WEc1Y2RGeDBYSFJsYm5SeWVTNWthWE53YjNObEtDazdYRzVjZEZ4MFhIUmpZV3hzWW1GamF5QW1KaUJqWVd4c1ltRmpheWdwTzF4dVhIUmNkRngwY21WMGRYSnVPMXh1WEhSY2RIMWNibHgwZlZ4dWZUdGNibHh1Um5WdVkzUnBiMjV6TG5CeWIzUnZkSGx3WlM1MGNtbG5aMlZ5VEdsemRHVnVaWEp6SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCamIyNXpkQ0JsYm5SeWFXVnpTVzVrWlhoVWIwUnBjM0J2YzJVZ1BTQmJYVHRjYmx4dVhIUjBhR2x6TG1WdWRISnBaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsYm5SeWVTd2dhVzVrWlhncGUxeHVJQ0FnSUNBZ0lDQnBaaUFvWlc1MGNua3ViR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnVkSEo1TG14cGMzUmxibVZ5TG1Gd2NHeDVLR1Z1ZEhKNUxtTnZiblJsZUhRZ2ZId2daVzUwY25rdWJHbHpkR1Z1WlhKYkozUm9hWE1uWFNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm5SeWFXVnpTVzVrWlhoVWIwUnBjM0J2YzJVdWNIVnphQ2hwYm1SbGVDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ0lDQmxiblJ5YVdWelNXNWtaWGhVYjBScGMzQnZjMlV1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsYm5SeWVVbHVaR1Y0S1h0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYm5SeWFXVnpMbk53YkdsalpTaGxiblJ5ZVVsdVpHVjRMREVwTzF4dUlDQWdJSDBzSUhSb2FYTXBPMXh1WEc1Y2JseDBhV1lvZEdocGN5NW1jbUZ0WlVWdWRISnBaWE11YkdWdVozUm9JRDRnTUNsN1hHNWNkRngwZEdocGN5NW1jbUZ0WlVWdWRISnBaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsYm5SeWVTd2dhVzVrWlhncGUxeHVYSFJjZEZ4MGFXWWdLR1Z1ZEhKNUxteHBjM1JsYm1WeUtTQjdYRzVjZEZ4MFhIUmNkSFJvYVhNdVpYaGxZM1YwYVc1blRHRjBaWEpKYms1bGVIUlVhV05yUTI5MWJuUWdQU0IwYUdsekxtVjRaV04xZEdsdVoweGhkR1Z5U1c1T1pYaDBWR2xqYTBOdmRXNTBJQ3NnTVR0Y2JseDBYSFJjZEZ4MFpXNTBjbmt1YkdsemRHVnVaWEl1WVhCd2JIa29aVzUwY25rdVkyOXVkR1Y0ZENCOGZDQmxiblJ5ZVM1c2FYTjBaVzVsY2xzbmRHaHBjeWRkS1R0Y2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEdWdWRISnBaWE5KYm1SbGVGUnZSR2x6Y0c5elpTNXdkWE5vS0dsdVpHVjRLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlMQ0IwYUdsektUdGNibHgwWEhSbGJuUnlhV1Z6U1c1a1pYaFViMFJwYzNCdmMyVXVabTl5UldGamFDaG1kVzVqZEdsdmJpaGxiblJ5ZVVsdVpHVjRLWHRjYmx4MFhIUmNkSFJvYVhNdVpuSmhiV1ZGYm5SeWFXVnpMbk53YkdsalpTaGxiblJ5ZVVsdVpHVjRMREVwTzF4dVhIUmNkSDBzSUhSb2FYTXBYRzVjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBkR2hwY3k1MGNtbG5aMlZ5Ukc5dVpVNXZkR2xtYVdWeUlDWW1JSFJvYVhNdWRISnBaMmRsY2tSdmJtVk9iM1JwWm1sbGNpZ3BPMXh1WEhSOVhHNTlPMXh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUwyeHBZaTltZFc1amRHbHZibk11YW5NaUxDSnBiWEJ2Y25RZ1ZHbGphMlZ5SUdaeWIyMGdKM1JwWTJ0bGNpYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFVnVkSEo1SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loamIyNTBaWGgwTENCbWRXNWpLWHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwWlhoMElEMGdZMjl1ZEdWNGREdGNiaUFnSUNBZ0lDQWdkR2hwY3k1c2FYTjBaVzVsY2lBOUlHWjFibU03WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZMeUJOWlhSb2IyUWdZWFpoYVd4aFlteGxJRzl1YkhrZ2IyNGdSVzUwY25rZ2FXNXpkR0Z1WTJVZ2JtOTBJR2x1SUVOc1lYTnpYRzVGYm5SeWVTNXdjbTkwYjNSNWNHVXVaR2x6Y0c5elpTQTlJR1oxYm1OMGFXOXVJQ2dwZTF4dUlDQWdJR2xtS0hSb2FYTXVZMjl1ZEdWNGRDQnBibk4wWVc1alpXOW1JRlJwWTJ0bGNpbDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1a2FYTndiM05sS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVkyOXVkR1Y0ZENBOUlHNTFiR3c3WEc0Z0lDQWdkR2hwY3k1c2FYTjBaVzVsY2lBOUlHNTFiR3c3WEc1OVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YkdsaUwyVnVkSEo1TG1weklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9ub2RlX21vZHVsZXMvZnVuY3Rpb25zL2xpYi9mdW5jdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9